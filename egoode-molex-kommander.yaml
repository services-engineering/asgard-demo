apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  labels:
    konvoy.d2iq.io/autoscaler: cluster-api
    konvoy.d2iq.io/cluster-name: egoode-molex-kommander
    konvoy.d2iq.io/cni: calico
    konvoy.d2iq.io/csi: aws-ebs
    konvoy.d2iq.io/provider: aws
  name: egoode-molex-kommander
  namespace: default
spec:
  clusterNetwork:
    pods:
      cidrBlocks:
      - 192.168.0.0/16
    services:
      cidrBlocks:
      - 10.96.0.0/12
  controlPlaneEndpoint:
    host: ""
    port: 0
  controlPlaneRef:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: KubeadmControlPlane
    name: egoode-molex-kommander-control-plane
    namespace: default
  infrastructureRef:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AWSCluster
    name: egoode-molex-kommander
    namespace: default
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AWSCluster
metadata:
  name: egoode-molex-kommander
  namespace: default
spec:
  additionalTags:
    expiration: 5d
    konvoy.d2iq.io/cluster-name: egoode-molex-kommander
    konvoy.d2iq.io/version: v2.2.0-rc.7
    owner: egoode
  bastion:
    allowedCIDRBlocks:
    - 0.0.0.0/0
    enabled: false
  controlPlaneEndpoint:
    host: ""
    port: 0
  controlPlaneLoadBalancer:
    crossZoneLoadBalancing: false
    scheme: internet-facing
  identityRef:
    kind: AWSClusterControllerIdentity
    name: default
  network:
    cni:
      cniIngressRules:
      - description: typha (calico)
        fromPort: 5473
        protocol: tcp
        toPort: 5473
      - description: bgp (calico)
        fromPort: 179
        protocol: tcp
        toPort: 179
      - description: IP-in-IP (calico)
        fromPort: -1
        protocol: "4"
        toPort: 65535
      - description: containerd metrics
        fromPort: 1338
        protocol: tcp
        toPort: 1338
      - description: kube-proxy metrics
        fromPort: 10249
        protocol: tcp
        toPort: 10249
      - description: NVIDIA Data Center GPU Manager metrics
        fromPort: 9400
        protocol: tcp
        toPort: 9400
      - description: Prometheus node exporter metrics
        fromPort: 9100
        protocol: tcp
        toPort: 9100
    vpc:
      availabilityZoneSelection: Ordered
      availabilityZoneUsageLimit: 3
  region: us-west-2
  sshKeyName: ""
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  name: egoode-molex-kommander-control-plane
  namespace: default
spec:
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        extraArgs:
          audit-log-maxage: "30"
          audit-log-maxbackup: "10"
          audit-log-maxsize: "100"
          audit-log-path: /var/log/audit/kube-apiserver-audit.log
          audit-policy-file: /etc/kubernetes/audit-policy/apiserver-audit-policy.yaml
          cloud-provider: aws
          encryption-provider-config: /etc/kubernetes/pki/encryption-config.yaml
        extraVolumes:
        - hostPath: /etc/kubernetes/audit-policy/
          mountPath: /etc/kubernetes/audit-policy/
          name: audit-policy
        - hostPath: /var/log/kubernetes/audit
          mountPath: /var/log/audit/
          name: audit-logs
      controllerManager:
        extraArgs:
          cloud-provider: aws
          configure-cloud-routes: "false"
      dns: {}
      etcd:
        local:
          imageTag: 3.4.13-0
      networking: {}
      scheduler: {}
    files:
    - content: |
        # Taken from https://github.com/kubernetes/kubernetes/blob/master/cluster/gce/gci/configure-helper.sh
        # Recommended in Kubernetes docs
        apiVersion: audit.k8s.io/v1
        kind: Policy
        rules:
          # The following requests were manually identified as high-volume and low-risk,
          # so drop them.
          - level: None
            users: ["system:kube-proxy"]
            verbs: ["watch"]
            resources:
              - group: "" # core
                resources: ["endpoints", "services", "services/status"]
          - level: None
            # Ingress controller reads 'configmaps/ingress-uid' through the unsecured port.
            # TODO(#46983): Change this to the ingress controller service account.
            users: ["system:unsecured"]
            namespaces: ["kube-system"]
            verbs: ["get"]
            resources:
              - group: "" # core
                resources: ["configmaps"]
          - level: None
            users: ["kubelet"] # legacy kubelet identity
            verbs: ["get"]
            resources:
              - group: "" # core
                resources: ["nodes", "nodes/status"]
          - level: None
            userGroups: ["system:nodes"]
            verbs: ["get"]
            resources:
              - group: "" # core
                resources: ["nodes", "nodes/status"]
          - level: None
            users:
              - system:kube-controller-manager
              - system:kube-scheduler
              - system:serviceaccount:kube-system:endpoint-controller
            verbs: ["get", "update"]
            namespaces: ["kube-system"]
            resources:
              - group: "" # core
                resources: ["endpoints"]
          - level: None
            users: ["system:apiserver"]
            verbs: ["get"]
            resources:
              - group: "" # core
                resources: ["namespaces", "namespaces/status", "namespaces/finalize"]
          - level: None
            users: ["cluster-autoscaler"]
            verbs: ["get", "update"]
            namespaces: ["kube-system"]
            resources:
              - group: "" # core
                resources: ["configmaps", "endpoints"]
          # Don't log HPA fetching metrics.
          - level: None
            users:
              - system:kube-controller-manager
            verbs: ["get", "list"]
            resources:
              - group: "metrics.k8s.io"
          # Don't log these read-only URLs.
          - level: None
            nonResourceURLs:
              - /healthz*
              - /version
              - /swagger*
          # Don't log events requests.
          - level: None
            resources:
              - group: "" # core
                resources: ["events"]
          # node and pod status calls from nodes are high-volume and can be large, don't log responses for expected updates from nodes
          - level: Request
            users: ["kubelet", "system:node-problem-detector", "system:serviceaccount:kube-system:node-problem-detector"]
            verbs: ["update","patch"]
            resources:
              - group: "" # core
                resources: ["nodes/status", "pods/status"]
            omitStages:
              - "RequestReceived"
          - level: Request
            userGroups: ["system:nodes"]
            verbs: ["update","patch"]
            resources:
              - group: "" # core
                resources: ["nodes/status", "pods/status"]
            omitStages:
              - "RequestReceived"
          # deletecollection calls can be large, don't log responses for expected namespace deletions
          - level: Request
            users: ["system:serviceaccount:kube-system:namespace-controller"]
            verbs: ["deletecollection"]
            omitStages:
              - "RequestReceived"
          # Secrets, ConfigMaps, and TokenReviews can contain sensitive & binary data,
          # so only log at the Metadata level.
          - level: Metadata
            resources:
              - group: "" # core
                resources: ["secrets", "configmaps"]
              - group: authentication.k8s.io
                resources: ["tokenreviews"]
            omitStages:
              - "RequestReceived"
          # Get responses can be large; skip them.
          - level: Request
            verbs: ["get", "list", "watch"]
            resources:
              - group: "" # core
              - group: "admissionregistration.k8s.io"
              - group: "apiextensions.k8s.io"
              - group: "apiregistration.k8s.io"
              - group: "apps"
              - group: "authentication.k8s.io"
              - group: "authorization.k8s.io"
              - group: "autoscaling"
              - group: "batch"
              - group: "certificates.k8s.io"
              - group: "extensions"
              - group: "metrics.k8s.io"
              - group: "networking.k8s.io"
              - group: "node.k8s.io"
              - group: "policy"
              - group: "rbac.authorization.k8s.io"
              - group: "scheduling.k8s.io"
              - group: "settings.k8s.io"
              - group: "storage.k8s.io"
            omitStages:
              - "RequestReceived"
          # Default level for known APIs
          - level: RequestResponse
            resources:
              - group: "" # core
              - group: "admissionregistration.k8s.io"
              - group: "apiextensions.k8s.io"
              - group: "apiregistration.k8s.io"
              - group: "apps"
              - group: "authentication.k8s.io"
              - group: "authorization.k8s.io"
              - group: "autoscaling"
              - group: "batch"
              - group: "certificates.k8s.io"
              - group: "extensions"
              - group: "metrics.k8s.io"
              - group: "networking.k8s.io"
              - group: "node.k8s.io"
              - group: "policy"
              - group: "rbac.authorization.k8s.io"
              - group: "scheduling.k8s.io"
              - group: "settings.k8s.io"
              - group: "storage.k8s.io"
            omitStages:
              - "RequestReceived"
          # Default level for all other requests.
          - level: Metadata
            omitStages:
              - "RequestReceived"
      path: /etc/kubernetes/audit-policy/apiserver-audit-policy.yaml
      permissions: "0600"
    - content: |
        #!/bin/bash
        # CAPI does not expose an API to modify KubeProxyConfiguration
        # this is a workaround to use a script with preKubeadmCommand to modify the kubeadm config files
        # https://github.com/kubernetes-sigs/cluster-api/issues/4512
        for i in $(ls /run/kubeadm/ | grep 'kubeadm.yaml\|kubeadm-join-config.yaml'); do
          cat <<EOF>> "/run/kubeadm//$i"
        ---
        kind: KubeProxyConfiguration
        apiVersion: kubeproxy.config.k8s.io/v1alpha1
        metricsBindAddress: "0.0.0.0:10249"
        EOF
        done
      path: /run/kubeadm/konvoy-set-kube-proxy-configuration.sh
      permissions: "0700"
    - content: |
        [metrics]
          address = "0.0.0.0:1338"
          grpc_histogram = false
      path: /etc/containerd/conf.d/konvoy-metrics.toml
      permissions: "0644"
    - content: |
        #!/bin/bash
        systemctl restart containerd

        SECONDS=0
        until crictl info
        do
          if (( SECONDS > 60 ))
          then
             echo "Containerd is not running. Giving up..."
             exit 1
          fi
          echo "Containerd is not running yet. Waiting..."
          sleep 5
        done
      path: /run/konvoy/restart-containerd-and-wait.sh
      permissions: "0700"
    - contentFrom:
        secret:
          key: value
          name: egoode-molex-kommander-etcd-encryption-config
      owner: root:root
      path: /etc/kubernetes/pki/encryption-config.yaml
      permissions: "0640"
    format: cloud-config
    initConfiguration:
      localAPIEndpoint: {}
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: aws
        name: '{{ ds.meta_data.local_hostname }}'
    joinConfiguration:
      discovery: {}
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: aws
        name: '{{ ds.meta_data.local_hostname }}'
    preKubeadmCommands:
    - systemctl daemon-reload
    - /run/konvoy/restart-containerd-and-wait.sh
    - /run/kubeadm/konvoy-set-kube-proxy-configuration.sh
  machineTemplate:
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: AWSMachineTemplate
      name: egoode-molex-kommander-control-plane
      namespace: default
    metadata: {}
  replicas: 3
  rolloutStrategy:
    rollingUpdate:
      maxSurge: 1
    type: RollingUpdate
  version: v1.22.8
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AWSMachineTemplate
metadata:
  name: egoode-molex-kommander-control-plane
  namespace: default
spec:
  template:
    spec:
      iamInstanceProfile: control-plane.cluster-api-provider-aws.sigs.k8s.io
      imageLookupBaseOS: ubuntu-20.04
      imageLookupFormat: capa-ami-{{.BaseOS}}-?{{.K8sVersion}}-*
      imageLookupOrg: "258751437250"
      instanceType: m5.xlarge
      rootVolume:
        size: 80
      sshKeyName: ""
---
apiVersion: v1
data:
  value: a2luZDogRW5jcnlwdGlvbkNvbmZpZwphcGlWZXJzaW9uOiB2MQpyZXNvdXJjZXM6CiAgLSByZXNvdXJjZXM6CiAgICAgIC0gc2VjcmV0cwogICAgICAtIGNvbmZpZ21hcHMKICAgIHByb3ZpZGVyczoKICAgICAgLSBhZXNjYmM6CiAgICAgICAgICBrZXlzOgogICAgICAgICAgICAtIG5hbWU6IGtleQogICAgICAgICAgICAgIHNlY3JldDogaTlrZVBHN2pLL0ZLVnc1eXRrMWcrL2JWVjhnTmdGU2FyRTkrQ1ZwM21hWT0KICAgICAgLSBpZGVudGl0eToge30=
kind: Secret
metadata:
  labels:
    cluster.x-k8s.io/cluster-name: egoode-molex-kommander
    clusterctl.cluster.x-k8s.io/move: ""
  name: egoode-molex-kommander-etcd-encryption-config
  namespace: default
type: Opaque
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: MachineDeployment
metadata:
  labels:
    cluster.x-k8s.io/cluster-name: egoode-molex-kommander
  name: egoode-molex-kommander-md-0
  namespace: default
spec:
  clusterName: egoode-molex-kommander
  minReadySeconds: 0
  progressDeadlineSeconds: 600
  replicas: 4
  revisionHistoryLimit: 1
  selector:
    matchLabels:
      cluster.x-k8s.io/cluster-name: egoode-molex-kommander
      cluster.x-k8s.io/deployment-name: egoode-molex-kommander-md-0
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        cluster.x-k8s.io/cluster-name: egoode-molex-kommander
        cluster.x-k8s.io/deployment-name: egoode-molex-kommander-md-0
    spec:
      bootstrap:
        configRef:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
          name: egoode-molex-kommander-md-0
      clusterName: egoode-molex-kommander
      infrastructureRef:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AWSMachineTemplate
        name: egoode-molex-kommander-md-0
      version: v1.22.8
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AWSMachineTemplate
metadata:
  name: egoode-molex-kommander-md-0
  namespace: default
spec:
  template:
    spec:
      iamInstanceProfile: nodes.cluster-api-provider-aws.sigs.k8s.io
      imageLookupBaseOS: ubuntu-20.04
      imageLookupFormat: capa-ami-{{.BaseOS}}-?{{.K8sVersion}}-*
      imageLookupOrg: "258751437250"
      instanceType: m5.2xlarge
      rootVolume:
        size: 80
      sshKeyName: ""
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: egoode-molex-kommander-md-0
  namespace: default
spec:
  template:
    spec:
      files:
      - content: |
          #!/bin/bash
          # CAPI does not expose an API to modify KubeProxyConfiguration
          # this is a workaround to use a script with preKubeadmCommand to modify the kubeadm config files
          # https://github.com/kubernetes-sigs/cluster-api/issues/4512
          for i in $(ls /run/kubeadm/ | grep 'kubeadm.yaml\|kubeadm-join-config.yaml'); do
            cat <<EOF>> "/run/kubeadm//$i"
          ---
          kind: KubeProxyConfiguration
          apiVersion: kubeproxy.config.k8s.io/v1alpha1
          metricsBindAddress: "0.0.0.0:10249"
          EOF
          done
        path: /run/kubeadm/konvoy-set-kube-proxy-configuration.sh
        permissions: "0700"
      - content: |
          [metrics]
            address = "0.0.0.0:1338"
            grpc_histogram = false
        path: /etc/containerd/conf.d/konvoy-metrics.toml
        permissions: "0644"
      - content: |
          #!/bin/bash
          systemctl restart containerd

          SECONDS=0
          until crictl info
          do
            if (( SECONDS > 60 ))
            then
               echo "Containerd is not running. Giving up..."
               exit 1
            fi
            echo "Containerd is not running yet. Waiting..."
            sleep 5
          done
        path: /run/konvoy/restart-containerd-and-wait.sh
        permissions: "0700"
      format: cloud-config
      joinConfiguration:
        nodeRegistration:
          kubeletExtraArgs:
            cloud-provider: aws
          name: '{{ ds.meta_data.local_hostname }}'
      preKubeadmCommands:
      - systemctl daemon-reload
      - /run/konvoy/restart-containerd-and-wait.sh
      - /run/kubeadm/konvoy-set-kube-proxy-configuration.sh
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  labels:
    konvoy.d2iq.io/cluster-name: egoode-molex-kommander
  name: calico-cni-installation-egoode-molex-kommander
  namespace: default
spec:
  clusterSelector:
    matchLabels:
      konvoy.d2iq.io/cluster-name: egoode-molex-kommander
      konvoy.d2iq.io/cni: calico
      konvoy.d2iq.io/provider: aws
  resources:
  - kind: ConfigMap
    name: tigera-operator-egoode-molex-kommander
  - kind: ConfigMap
    name: calico-cni-installation-egoode-molex-kommander
  strategy: ApplyAlways
---
apiVersion: v1
data:
  custom-resources.yaml: |
    # This section includes base Calico installation configuration.
    # For more information, see: https://docs.projectcalico.org/reference/installation/api
    apiVersion: operator.tigera.io/v1
    kind: Installation
    metadata:
      name: default
    spec:
      cni:
        type: Calico
      # Configures Calico networking.
      calicoNetwork:
        # Note: The ipPools section cannot be modified post-install.
        ipPools:
        - blockSize: 26
          cidr: 192.168.0.0/16
          encapsulation: IPIP
          natOutgoing: Enabled
          nodeSelector: all()
        bgp: Enabled
        nodeAddressAutodetectionV4:
          firstFound: true
kind: ConfigMap
metadata:
  name: calico-cni-installation-egoode-molex-kommander
  namespace: default
---
apiVersion: v1
data:
  tigera-operator.yaml: |+
    ---
    # Source: crds/calico/kdd/crd.projectcalico.org_bgpconfigurations.yaml
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: bgpconfigurations.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: BGPConfiguration
        listKind: BGPConfigurationList
        plural: bgpconfigurations
        singular: bgpconfiguration
      scope: Cluster
      versions:
      - name: v1
        schema:
          openAPIV3Schema:
            description: BGPConfiguration contains the configuration for any BGP routing.
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: BGPConfigurationSpec contains the values of the BGP configuration.
                properties:
                  asNumber:
                    description: 'ASNumber is the default AS number used by a node. [Default:
                      64512]'
                    format: int32
                    type: integer
                  communities:
                    description: Communities is a list of BGP community values and their
                      arbitrary names for tagging routes.
                    items:
                      description: Community contains standard or large community value
                        and its name.
                      properties:
                        name:
                          description: Name given to community value.
                          type: string
                        value:
                          description: Value must be of format `aa:nn` or `aa:nn:mm`.
                            For standard community use `aa:nn` format, where `aa` and
                            `nn` are 16 bit number. For large community use `aa:nn:mm`
                            format, where `aa`, `nn` and `mm` are 32 bit number. Where,
                            `aa` is an AS Number, `nn` and `mm` are per-AS identifier.
                          pattern: ^(\d+):(\d+)$|^(\d+):(\d+):(\d+)$
                          type: string
                      type: object
                    type: array
                  listenPort:
                    description: ListenPort is the port where BGP protocol should listen.
                      Defaults to 179
                    maximum: 65535
                    minimum: 1
                    type: integer
                  logSeverityScreen:
                    description: 'LogSeverityScreen is the log severity above which logs
                      are sent to the stdout. [Default: INFO]'
                    type: string
                  nodeToNodeMeshEnabled:
                    description: 'NodeToNodeMeshEnabled sets whether full node to node
                      BGP mesh is enabled. [Default: true]'
                    type: boolean
                  prefixAdvertisements:
                    description: PrefixAdvertisements contains per-prefix advertisement
                      configuration.
                    items:
                      description: PrefixAdvertisement configures advertisement properties
                        for the specified CIDR.
                      properties:
                        cidr:
                          description: CIDR for which properties should be advertised.
                          type: string
                        communities:
                          description: Communities can be list of either community names
                            already defined in `Specs.Communities` or community value
                            of format `aa:nn` or `aa:nn:mm`. For standard community use
                            `aa:nn` format, where `aa` and `nn` are 16 bit number. For
                            large community use `aa:nn:mm` format, where `aa`, `nn` and
                            `mm` are 32 bit number. Where,`aa` is an AS Number, `nn` and
                            `mm` are per-AS identifier.
                          items:
                            type: string
                          type: array
                      type: object
                    type: array
                  serviceClusterIPs:
                    description: ServiceClusterIPs are the CIDR blocks from which service
                      cluster IPs are allocated. If specified, Calico will advertise these
                      blocks, as well as any cluster IPs within them.
                    items:
                      description: ServiceClusterIPBlock represents a single allowed ClusterIP
                        CIDR block.
                      properties:
                        cidr:
                          type: string
                      type: object
                    type: array
                  serviceExternalIPs:
                    description: ServiceExternalIPs are the CIDR blocks for Kubernetes
                      Service External IPs. Kubernetes Service ExternalIPs will only be
                      advertised if they are within one of these blocks.
                    items:
                      description: ServiceExternalIPBlock represents a single allowed
                        External IP CIDR block.
                      properties:
                        cidr:
                          type: string
                      type: object
                    type: array
                  serviceLoadBalancerIPs:
                    description: ServiceLoadBalancerIPs are the CIDR blocks for Kubernetes
                      Service LoadBalancer IPs. Kubernetes Service status.LoadBalancer.Ingress
                      IPs will only be advertised if they are within one of these blocks.
                    items:
                      description: ServiceLoadBalancerIPBlock represents a single allowed
                        LoadBalancer IP CIDR block.
                      properties:
                        cidr:
                          type: string
                      type: object
                    type: array
                type: object
            type: object
        served: true
        storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---
    # Source: crds/calico/kdd/crd.projectcalico.org_bgppeers.yaml
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: bgppeers.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: BGPPeer
        listKind: BGPPeerList
        plural: bgppeers
        singular: bgppeer
      scope: Cluster
      versions:
      - name: v1
        schema:
          openAPIV3Schema:
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: BGPPeerSpec contains the specification for a BGPPeer resource.
                properties:
                  asNumber:
                    description: The AS Number of the peer.
                    format: int32
                    type: integer
                  keepOriginalNextHop:
                    description: Option to keep the original nexthop field when routes
                      are sent to a BGP Peer. Setting "true" configures the selected BGP
                      Peers node to use the "next hop keep;" instead of "next hop self;"(default)
                      in the specific branch of the Node on "bird.cfg".
                    type: boolean
                  maxRestartTime:
                    description: Time to allow for software restart.  When specified,
                      this is configured as the graceful restart timeout.  When not specified,
                      the BIRD default of 120s is used.
                    type: string
                  node:
                    description: The node name identifying the Calico node instance that
                      is targeted by this peer. If this is not set, and no nodeSelector
                      is specified, then this BGP peer selects all nodes in the cluster.
                    type: string
                  nodeSelector:
                    description: Selector for the nodes that should have this peering.  When
                      this is set, the Node field must be empty.
                    type: string
                  password:
                    description: Optional BGP password for the peerings generated by this
                      BGPPeer resource.
                    properties:
                      secretKeyRef:
                        description: Selects a key of a secret in the node pod's namespace.
                        properties:
                          key:
                            description: The key of the secret to select from.  Must be
                              a valid secret key.
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                              TODO: Add other useful fields. apiVersion, kind, uid?'
                            type: string
                          optional:
                            description: Specify whether the Secret or its key must be
                              defined
                            type: boolean
                        required:
                        - key
                        type: object
                    type: object
                  peerIP:
                    description: The IP address of the peer followed by an optional port
                      number to peer with. If port number is given, format should be `[<IPv6>]:port`
                      or `<IPv4>:<port>` for IPv4. If optional port number is not set,
                      and this peer IP and ASNumber belongs to a calico/node with ListenPort
                      set in BGPConfiguration, then we use that port to peer.
                    type: string
                  peerSelector:
                    description: Selector for the remote nodes to peer with.  When this
                      is set, the PeerIP and ASNumber fields must be empty.  For each
                      peering between the local node and selected remote nodes, we configure
                      an IPv4 peering if both ends have NodeBGPSpec.IPv4Address specified,
                      and an IPv6 peering if both ends have NodeBGPSpec.IPv6Address specified.  The
                      remote AS number comes from the remote node's NodeBGPSpec.ASNumber,
                      or the global default if that is not set.
                    type: string
                  sourceAddress:
                    description: Specifies whether and how to configure a source address
                      for the peerings generated by this BGPPeer resource.  Default value
                      "UseNodeIP" means to configure the node IP as the source address.  "None"
                      means not to configure a source address.
                    type: string
                type: object
            type: object
        served: true
        storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---
    # Source: crds/calico/kdd/crd.projectcalico.org_blockaffinities.yaml
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: blockaffinities.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: BlockAffinity
        listKind: BlockAffinityList
        plural: blockaffinities
        singular: blockaffinity
      scope: Cluster
      versions:
      - name: v1
        schema:
          openAPIV3Schema:
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: BlockAffinitySpec contains the specification for a BlockAffinity
                  resource.
                properties:
                  cidr:
                    type: string
                  deleted:
                    description: Deleted indicates that this block affinity is being deleted.
                      This field is a string for compatibility with older releases that
                      mistakenly treat this field as a string.
                    type: string
                  node:
                    type: string
                  state:
                    type: string
                required:
                - cidr
                - deleted
                - node
                - state
                type: object
            type: object
        served: true
        storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---
    # Source: crds/calico/kdd/crd.projectcalico.org_caliconodestatuses.yaml

    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: (devel)
      creationTimestamp: null
      name: caliconodestatuses.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: CalicoNodeStatus
        listKind: CalicoNodeStatusList
        plural: caliconodestatuses
        singular: caliconodestatus
      scope: Cluster
      versions:
      - name: v1
        schema:
          openAPIV3Schema:
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: CalicoNodeStatusSpec contains the specification for a CalicoNodeStatus
                  resource.
                properties:
                  classes:
                    description: Classes declares the types of information to monitor
                      for this calico/node, and allows for selective status reporting
                      about certain subsets of information.
                    items:
                      type: string
                    type: array
                  node:
                    description: The node name identifies the Calico node instance for
                      node status.
                    type: string
                  updatePeriodSeconds:
                    description: UpdatePeriodSeconds is the period at which CalicoNodeStatus
                      should be updated. Set to 0 to disable CalicoNodeStatus refresh.
                      Maximum update period is one day.
                    format: int32
                    type: integer
                type: object
              status:
                description: CalicoNodeStatusStatus defines the observed state of CalicoNodeStatus.
                  No validation needed for status since it is updated by Calico.
                properties:
                  agent:
                    description: Agent holds agent status on the node.
                    properties:
                      birdV4:
                        description: BIRDV4 represents the latest observed status of bird4.
                        properties:
                          lastBootTime:
                            description: LastBootTime holds the value of lastBootTime
                              from bird.ctl output.
                            type: string
                          lastReconfigurationTime:
                            description: LastReconfigurationTime holds the value of lastReconfigTime
                              from bird.ctl output.
                            type: string
                          routerID:
                            description: Router ID used by bird.
                            type: string
                          state:
                            description: The state of the BGP Daemon.
                            type: string
                          version:
                            description: Version of the BGP daemon
                            type: string
                        type: object
                      birdV6:
                        description: BIRDV6 represents the latest observed status of bird6.
                        properties:
                          lastBootTime:
                            description: LastBootTime holds the value of lastBootTime
                              from bird.ctl output.
                            type: string
                          lastReconfigurationTime:
                            description: LastReconfigurationTime holds the value of lastReconfigTime
                              from bird.ctl output.
                            type: string
                          routerID:
                            description: Router ID used by bird.
                            type: string
                          state:
                            description: The state of the BGP Daemon.
                            type: string
                          version:
                            description: Version of the BGP daemon
                            type: string
                        type: object
                    type: object
                  bgp:
                    description: BGP holds node BGP status.
                    properties:
                      numberEstablishedV4:
                        description: The total number of IPv4 established bgp sessions.
                        type: integer
                      numberEstablishedV6:
                        description: The total number of IPv6 established bgp sessions.
                        type: integer
                      numberNotEstablishedV4:
                        description: The total number of IPv4 non-established bgp sessions.
                        type: integer
                      numberNotEstablishedV6:
                        description: The total number of IPv6 non-established bgp sessions.
                        type: integer
                      peersV4:
                        description: PeersV4 represents IPv4 BGP peers status on the node.
                        items:
                          description: CalicoNodePeer contains the status of BGP peers
                            on the node.
                          properties:
                            peerIP:
                              description: IP address of the peer whose condition we are
                                reporting.
                              type: string
                            since:
                              description: Since the state or reason last changed.
                              type: string
                            state:
                              description: State is the BGP session state.
                              type: string
                            type:
                              description: Type indicates whether this peer is configured
                                via the node-to-node mesh, or via en explicit global or
                                per-node BGPPeer object.
                              type: string
                          type: object
                        type: array
                      peersV6:
                        description: PeersV6 represents IPv6 BGP peers status on the node.
                        items:
                          description: CalicoNodePeer contains the status of BGP peers
                            on the node.
                          properties:
                            peerIP:
                              description: IP address of the peer whose condition we are
                                reporting.
                              type: string
                            since:
                              description: Since the state or reason last changed.
                              type: string
                            state:
                              description: State is the BGP session state.
                              type: string
                            type:
                              description: Type indicates whether this peer is configured
                                via the node-to-node mesh, or via en explicit global or
                                per-node BGPPeer object.
                              type: string
                          type: object
                        type: array
                    required:
                    - numberEstablishedV4
                    - numberEstablishedV6
                    - numberNotEstablishedV4
                    - numberNotEstablishedV6
                    type: object
                  lastUpdated:
                    description: LastUpdated is a timestamp representing the server time
                      when CalicoNodeStatus object last updated. It is represented in
                      RFC3339 form and is in UTC.
                    format: date-time
                    nullable: true
                    type: string
                  routes:
                    description: Routes reports routes known to the Calico BGP daemon
                      on the node.
                    properties:
                      routesV4:
                        description: RoutesV4 represents IPv4 routes on the node.
                        items:
                          description: CalicoNodeRoute contains the status of BGP routes
                            on the node.
                          properties:
                            destination:
                              description: Destination of the route.
                              type: string
                            gateway:
                              description: Gateway for the destination.
                              type: string
                            interface:
                              description: Interface for the destination
                              type: string
                            learnedFrom:
                              description: LearnedFrom contains information regarding
                                where this route originated.
                              properties:
                                peerIP:
                                  description: If sourceType is NodeMesh or BGPPeer, IP
                                    address of the router that sent us this route.
                                  type: string
                                sourceType:
                                  description: Type of the source where a route is learned
                                    from.
                                  type: string
                              type: object
                            type:
                              description: Type indicates if the route is being used for
                                forwarding or not.
                              type: string
                          type: object
                        type: array
                      routesV6:
                        description: RoutesV6 represents IPv6 routes on the node.
                        items:
                          description: CalicoNodeRoute contains the status of BGP routes
                            on the node.
                          properties:
                            destination:
                              description: Destination of the route.
                              type: string
                            gateway:
                              description: Gateway for the destination.
                              type: string
                            interface:
                              description: Interface for the destination
                              type: string
                            learnedFrom:
                              description: LearnedFrom contains information regarding
                                where this route originated.
                              properties:
                                peerIP:
                                  description: If sourceType is NodeMesh or BGPPeer, IP
                                    address of the router that sent us this route.
                                  type: string
                                sourceType:
                                  description: Type of the source where a route is learned
                                    from.
                                  type: string
                              type: object
                            type:
                              description: Type indicates if the route is being used for
                                forwarding or not.
                              type: string
                          type: object
                        type: array
                    type: object
                type: object
            type: object
        served: true
        storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---
    # Source: crds/calico/kdd/crd.projectcalico.org_clusterinformations.yaml
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: clusterinformations.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: ClusterInformation
        listKind: ClusterInformationList
        plural: clusterinformations
        singular: clusterinformation
      scope: Cluster
      versions:
      - name: v1
        schema:
          openAPIV3Schema:
            description: ClusterInformation contains the cluster specific information.
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: ClusterInformationSpec contains the values of describing
                  the cluster.
                properties:
                  calicoVersion:
                    description: CalicoVersion is the version of Calico that the cluster
                      is running
                    type: string
                  clusterGUID:
                    description: ClusterGUID is the GUID of the cluster
                    type: string
                  clusterType:
                    description: ClusterType describes the type of the cluster
                    type: string
                  datastoreReady:
                    description: DatastoreReady is used during significant datastore migrations
                      to signal to components such as Felix that it should wait before
                      accessing the datastore.
                    type: boolean
                  variant:
                    description: Variant declares which variant of Calico should be active.
                    type: string
                type: object
            type: object
        served: true
        storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---
    # Source: crds/calico/kdd/crd.projectcalico.org_felixconfigurations.yaml
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: felixconfigurations.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: FelixConfiguration
        listKind: FelixConfigurationList
        plural: felixconfigurations
        singular: felixconfiguration
      scope: Cluster
      versions:
      - name: v1
        schema:
          openAPIV3Schema:
            description: Felix Configuration contains the configuration for Felix.
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: FelixConfigurationSpec contains the values of the Felix configuration.
                properties:
                  allowIPIPPacketsFromWorkloads:
                    description: 'AllowIPIPPacketsFromWorkloads controls whether Felix
                      will add a rule to drop IPIP encapsulated traffic from workloads
                      [Default: false]'
                    type: boolean
                  allowVXLANPacketsFromWorkloads:
                    description: 'AllowVXLANPacketsFromWorkloads controls whether Felix
                      will add a rule to drop VXLAN encapsulated traffic from workloads
                      [Default: false]'
                    type: boolean
                  awsSrcDstCheck:
                    description: 'Set source-destination-check on AWS EC2 instances. Accepted
                      value must be one of "DoNothing", "Enable" or "Disable". [Default:
                      DoNothing]'
                    enum:
                    - DoNothing
                    - Enable
                    - Disable
                    type: string
                  bpfConnectTimeLoadBalancingEnabled:
                    description: 'BPFConnectTimeLoadBalancingEnabled when in BPF mode,
                      controls whether Felix installs the connection-time load balancer.  The
                      connect-time load balancer is required for the host to be able to
                      reach Kubernetes services and it improves the performance of pod-to-service
                      connections.  The only reason to disable it is for debugging purposes.  [Default:
                      true]'
                    type: boolean
                  bpfDataIfacePattern:
                    description: BPFDataIfacePattern is a regular expression that controls
                      which interfaces Felix should attach BPF programs to in order to
                      catch traffic to/from the network.  This needs to match the interfaces
                      that Calico workload traffic flows over as well as any interfaces
                      that handle incoming traffic to nodeports and services from outside
                      the cluster.  It should not match the workload interfaces (usually
                      named cali...).
                    type: string
                  bpfDisableUnprivileged:
                    description: 'BPFDisableUnprivileged, if enabled, Felix sets the kernel.unprivileged_bpf_disabled
                      sysctl to disable unprivileged use of BPF.  This ensures that unprivileged
                      users cannot access Calico''s BPF maps and cannot insert their own
                      BPF programs to interfere with Calico''s. [Default: true]'
                    type: boolean
                  bpfEnabled:
                    description: 'BPFEnabled, if enabled Felix will use the BPF dataplane.
                      [Default: false]'
                    type: boolean
                  bpfExtToServiceConnmark:
                    description: 'BPFExtToServiceConnmark in BPF mode, control a 32bit
                      mark that is set on connections from an external client to a local
                      service. This mark allows us to control how packets of that connection
                      are routed within the host and how is routing intepreted by RPF
                      check. [Default: 0]'
                    type: integer
                  bpfExternalServiceMode:
                    description: 'BPFExternalServiceMode in BPF mode, controls how connections
                      from outside the cluster to services (node ports and cluster IPs)
                      are forwarded to remote workloads.  If set to "Tunnel" then both
                      request and response traffic is tunneled to the remote node.  If
                      set to "DSR", the request traffic is tunneled but the response traffic
                      is sent directly from the remote node.  In "DSR" mode, the remote
                      node appears to use the IP of the ingress node; this requires a
                      permissive L2 network.  [Default: Tunnel]'
                    type: string
                  bpfKubeProxyEndpointSlicesEnabled:
                    description: BPFKubeProxyEndpointSlicesEnabled in BPF mode, controls
                      whether Felix's embedded kube-proxy accepts EndpointSlices or not.
                    type: boolean
                  bpfKubeProxyIptablesCleanupEnabled:
                    description: 'BPFKubeProxyIptablesCleanupEnabled, if enabled in BPF
                      mode, Felix will proactively clean up the upstream Kubernetes kube-proxy''s
                      iptables chains.  Should only be enabled if kube-proxy is not running.  [Default:
                      true]'
                    type: boolean
                  bpfKubeProxyMinSyncPeriod:
                    description: 'BPFKubeProxyMinSyncPeriod, in BPF mode, controls the
                      minimum time between updates to the dataplane for Felix''s embedded
                      kube-proxy.  Lower values give reduced set-up latency.  Higher values
                      reduce Felix CPU usage by batching up more work.  [Default: 1s]'
                    type: string
                  bpfLogLevel:
                    description: 'BPFLogLevel controls the log level of the BPF programs
                      when in BPF dataplane mode.  One of "Off", "Info", or "Debug".  The
                      logs are emitted to the BPF trace pipe, accessible with the command
                      `tc exec bpf debug`. [Default: Off].'
                    type: string
                  chainInsertMode:
                    description: 'ChainInsertMode controls whether Felix hooks the kernel''s
                      top-level iptables chains by inserting a rule at the top of the
                      chain or by appending a rule at the bottom. insert is the safe default
                      since it prevents Calico''s rules from being bypassed. If you switch
                      to append mode, be sure that the other rules in the chains signal
                      acceptance by falling through to the Calico rules, otherwise the
                      Calico policy will be bypassed. [Default: insert]'
                    type: string
                  dataplaneDriver:
                    type: string
                  debugDisableLogDropping:
                    type: boolean
                  debugMemoryProfilePath:
                    type: string
                  debugSimulateCalcGraphHangAfter:
                    type: string
                  debugSimulateDataplaneHangAfter:
                    type: string
                  defaultEndpointToHostAction:
                    description: 'DefaultEndpointToHostAction controls what happens to
                      traffic that goes from a workload endpoint to the host itself (after
                      the traffic hits the endpoint egress policy). By default Calico
                      blocks traffic from workload endpoints to the host itself with an
                      iptables "DROP" action. If you want to allow some or all traffic
                      from endpoint to host, set this parameter to RETURN or ACCEPT. Use
                      RETURN if you have your own rules in the iptables "INPUT" chain;
                      Calico will insert its rules at the top of that chain, then "RETURN"
                      packets to the "INPUT" chain once it has completed processing workload
                      endpoint egress policy. Use ACCEPT to unconditionally accept packets
                      from workloads after processing workload endpoint egress policy.
                      [Default: Drop]'
                    type: string
                  deviceRouteProtocol:
                    description: This defines the route protocol added to programmed device
                      routes, by default this will be RTPROT_BOOT when left blank.
                    type: integer
                  deviceRouteSourceAddress:
                    description: This is the source address to use on programmed device
                      routes. By default the source address is left blank, leaving the
                      kernel to choose the source address used.
                    type: string
                  disableConntrackInvalidCheck:
                    type: boolean
                  endpointReportingDelay:
                    type: string
                  endpointReportingEnabled:
                    type: boolean
                  externalNodesList:
                    description: ExternalNodesCIDRList is a list of CIDR's of external-non-calico-nodes
                      which may source tunnel traffic and have the tunneled traffic be
                      accepted at calico nodes.
                    items:
                      type: string
                    type: array
                  failsafeInboundHostPorts:
                    description: 'FailsafeInboundHostPorts is a list of UDP/TCP ports
                      and CIDRs that Felix will allow incoming traffic to host endpoints
                      on irrespective of the security policy. This is useful to avoid
                      accidentally cutting off a host with incorrect configuration. For
                      back-compatibility, if the protocol is not specified, it defaults
                      to "tcp". If a CIDR is not specified, it will allow traffic from
                      all addresses. To disable all inbound host ports, use the value
                      none. The default value allows ssh access and DHCP. [Default: tcp:22,
                      udp:68, tcp:179, tcp:2379, tcp:2380, tcp:6443, tcp:6666, tcp:6667]'
                    items:
                      description: ProtoPort is combination of protocol, port, and CIDR.
                        Protocol and port must be specified.
                      properties:
                        net:
                          type: string
                        port:
                          type: integer
                        protocol:
                          type: string
                      required:
                      - port
                      - protocol
                      type: object
                    type: array
                  failsafeOutboundHostPorts:
                    description: 'FailsafeOutboundHostPorts is a list of UDP/TCP ports
                      and CIDRs that Felix will allow outgoing traffic from host endpoints
                      to irrespective of the security policy. This is useful to avoid
                      accidentally cutting off a host with incorrect configuration. For
                      back-compatibility, if the protocol is not specified, it defaults
                      to "tcp". If a CIDR is not specified, it will allow traffic from
                      all addresses. To disable all outbound host ports, use the value
                      none. The default value opens etcd''s standard ports to ensure that
                      Felix does not get cut off from etcd as well as allowing DHCP and
                      DNS. [Default: tcp:179, tcp:2379, tcp:2380, tcp:6443, tcp:6666,
                      tcp:6667, udp:53, udp:67]'
                    items:
                      description: ProtoPort is combination of protocol, port, and CIDR.
                        Protocol and port must be specified.
                      properties:
                        net:
                          type: string
                        port:
                          type: integer
                        protocol:
                          type: string
                      required:
                      - port
                      - protocol
                      type: object
                    type: array
                  featureDetectOverride:
                    description: FeatureDetectOverride is used to override the feature
                      detection. Values are specified in a comma separated list with no
                      spaces, example; "SNATFullyRandom=true,MASQFullyRandom=false,RestoreSupportsLock=".
                      "true" or "false" will force the feature, empty or omitted values
                      are auto-detected.
                    type: string
                  genericXDPEnabled:
                    description: 'GenericXDPEnabled enables Generic XDP so network cards
                      that don''t support XDP offload or driver modes can use XDP. This
                      is not recommended since it doesn''t provide better performance
                      than iptables. [Default: false]'
                    type: boolean
                  healthEnabled:
                    type: boolean
                  healthHost:
                    type: string
                  healthPort:
                    type: integer
                  interfaceExclude:
                    description: 'InterfaceExclude is a comma-separated list of interfaces
                      that Felix should exclude when monitoring for host endpoints. The
                      default value ensures that Felix ignores Kubernetes'' IPVS dummy
                      interface, which is used internally by kube-proxy. If you want to
                      exclude multiple interface names using a single value, the list
                      supports regular expressions. For regular expressions you must wrap
                      the value with ''/''. For example having values ''/^kube/,veth1''
                      will exclude all interfaces that begin with ''kube'' and also the
                      interface ''veth1''. [Default: kube-ipvs0]'
                    type: string
                  interfacePrefix:
                    description: 'InterfacePrefix is the interface name prefix that identifies
                      workload endpoints and so distinguishes them from host endpoint
                      interfaces. Note: in environments other than bare metal, the orchestrators
                      configure this appropriately. For example our Kubernetes and Docker
                      integrations set the ''cali'' value, and our OpenStack integration
                      sets the ''tap'' value. [Default: cali]'
                    type: string
                  interfaceRefreshInterval:
                    description: InterfaceRefreshInterval is the period at which Felix
                      rescans local interfaces to verify their state. The rescan can be
                      disabled by setting the interval to 0.
                    type: string
                  ipipEnabled:
                    type: boolean
                  ipipMTU:
                    description: 'IPIPMTU is the MTU to set on the tunnel device. See
                      Configuring MTU [Default: 1440]'
                    type: integer
                  ipsetsRefreshInterval:
                    description: 'IpsetsRefreshInterval is the period at which Felix re-checks
                      all iptables state to ensure that no other process has accidentally
                      broken Calico''s rules. Set to 0 to disable iptables refresh. [Default:
                      90s]'
                    type: string
                  iptablesBackend:
                    description: IptablesBackend specifies which backend of iptables will
                      be used. The default is legacy.
                    type: string
                  iptablesFilterAllowAction:
                    type: string
                  iptablesLockFilePath:
                    description: 'IptablesLockFilePath is the location of the iptables
                      lock file. You may need to change this if the lock file is not in
                      its standard location (for example if you have mapped it into Felix''s
                      container at a different path). [Default: /run/xtables.lock]'
                    type: string
                  iptablesLockProbeInterval:
                    description: 'IptablesLockProbeInterval is the time that Felix will
                      wait between attempts to acquire the iptables lock if it is not
                      available. Lower values make Felix more responsive when the lock
                      is contended, but use more CPU. [Default: 50ms]'
                    type: string
                  iptablesLockTimeout:
                    description: 'IptablesLockTimeout is the time that Felix will wait
                      for the iptables lock, or 0, to disable. To use this feature, Felix
                      must share the iptables lock file with all other processes that
                      also take the lock. When running Felix inside a container, this
                      requires the /run directory of the host to be mounted into the calico/node
                      or calico/felix container. [Default: 0s disabled]'
                    type: string
                  iptablesMangleAllowAction:
                    type: string
                  iptablesMarkMask:
                    description: 'IptablesMarkMask is the mask that Felix selects its
                      IPTables Mark bits from. Should be a 32 bit hexadecimal number with
                      at least 8 bits set, none of which clash with any other mark bits
                      in use on the system. [Default: 0xff000000]'
                    format: int32
                    type: integer
                  iptablesNATOutgoingInterfaceFilter:
                    type: string
                  iptablesPostWriteCheckInterval:
                    description: 'IptablesPostWriteCheckInterval is the period after Felix
                      has done a write to the dataplane that it schedules an extra read
                      back in order to check the write was not clobbered by another process.
                      This should only occur if another application on the system doesn''t
                      respect the iptables lock. [Default: 1s]'
                    type: string
                  iptablesRefreshInterval:
                    description: 'IptablesRefreshInterval is the period at which Felix
                      re-checks the IP sets in the dataplane to ensure that no other process
                      has accidentally broken Calico''s rules. Set to 0 to disable IP
                      sets refresh. Note: the default for this value is lower than the
                      other refresh intervals as a workaround for a Linux kernel bug that
                      was fixed in kernel version 4.11. If you are using v4.11 or greater
                      you may want to set this to, a higher value to reduce Felix CPU
                      usage. [Default: 10s]'
                    type: string
                  ipv6Support:
                    type: boolean
                  kubeNodePortRanges:
                    description: 'KubeNodePortRanges holds list of port ranges used for
                      service node ports. Only used if felix detects kube-proxy running
                      in ipvs mode. Felix uses these ranges to separate host and workload
                      traffic. [Default: 30000:32767].'
                    items:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^.*
                      x-kubernetes-int-or-string: true
                    type: array
                  logFilePath:
                    description: 'LogFilePath is the full path to the Felix log. Set to
                      none to disable file logging. [Default: /var/log/calico/felix.log]'
                    type: string
                  logPrefix:
                    description: 'LogPrefix is the log prefix that Felix uses when rendering
                      LOG rules. [Default: calico-packet]'
                    type: string
                  logSeverityFile:
                    description: 'LogSeverityFile is the log severity above which logs
                      are sent to the log file. [Default: Info]'
                    type: string
                  logSeverityScreen:
                    description: 'LogSeverityScreen is the log severity above which logs
                      are sent to the stdout. [Default: Info]'
                    type: string
                  logSeveritySys:
                    description: 'LogSeveritySys is the log severity above which logs
                      are sent to the syslog. Set to None for no logging to syslog. [Default:
                      Info]'
                    type: string
                  maxIpsetSize:
                    type: integer
                  metadataAddr:
                    description: 'MetadataAddr is the IP address or domain name of the
                      server that can answer VM queries for cloud-init metadata. In OpenStack,
                      this corresponds to the machine running nova-api (or in Ubuntu,
                      nova-api-metadata). A value of none (case insensitive) means that
                      Felix should not set up any NAT rule for the metadata path. [Default:
                      127.0.0.1]'
                    type: string
                  metadataPort:
                    description: 'MetadataPort is the port of the metadata server. This,
                      combined with global.MetadataAddr (if not ''None''), is used to
                      set up a NAT rule, from 169.254.169.254:80 to MetadataAddr:MetadataPort.
                      In most cases this should not need to be changed [Default: 8775].'
                    type: integer
                  mtuIfacePattern:
                    description: MTUIfacePattern is a regular expression that controls
                      which interfaces Felix should scan in order to calculate the host's
                      MTU. This should not match workload interfaces (usually named cali...).
                    type: string
                  natOutgoingAddress:
                    description: NATOutgoingAddress specifies an address to use when performing
                      source NAT for traffic in a natOutgoing pool that is leaving the
                      network. By default the address used is an address on the interface
                      the traffic is leaving on (ie it uses the iptables MASQUERADE target)
                    type: string
                  natPortRange:
                    anyOf:
                    - type: integer
                    - type: string
                    description: NATPortRange specifies the range of ports that is used
                      for port mapping when doing outgoing NAT. When unset the default
                      behavior of the network stack is used.
                    pattern: ^.*
                    x-kubernetes-int-or-string: true
                  netlinkTimeout:
                    type: string
                  openstackRegion:
                    description: 'OpenstackRegion is the name of the region that a particular
                      Felix belongs to. In a multi-region Calico/OpenStack deployment,
                      this must be configured somehow for each Felix (here in the datamodel,
                      or in felix.cfg or the environment on each compute node), and must
                      match the [calico] openstack_region value configured in neutron.conf
                      on each node. [Default: Empty]'
                    type: string
                  policySyncPathPrefix:
                    description: 'PolicySyncPathPrefix is used to by Felix to communicate
                      policy changes to external services, like Application layer policy.
                      [Default: Empty]'
                    type: string
                  prometheusGoMetricsEnabled:
                    description: 'PrometheusGoMetricsEnabled disables Go runtime metrics
                      collection, which the Prometheus client does by default, when set
                      to false. This reduces the number of metrics reported, reducing
                      Prometheus load. [Default: true]'
                    type: boolean
                  prometheusMetricsEnabled:
                    description: 'PrometheusMetricsEnabled enables the Prometheus metrics
                      server in Felix if set to true. [Default: false]'
                    type: boolean
                  prometheusMetricsHost:
                    description: 'PrometheusMetricsHost is the host that the Prometheus
                      metrics server should bind to. [Default: empty]'
                    type: string
                  prometheusMetricsPort:
                    description: 'PrometheusMetricsPort is the TCP port that the Prometheus
                      metrics server should bind to. [Default: 9091]'
                    type: integer
                  prometheusProcessMetricsEnabled:
                    description: 'PrometheusProcessMetricsEnabled disables process metrics
                      collection, which the Prometheus client does by default, when set
                      to false. This reduces the number of metrics reported, reducing
                      Prometheus load. [Default: true]'
                    type: boolean
                  prometheusWireGuardMetricsEnabled:
                    description: 'PrometheusWireGuardMetricsEnabled disables wireguard
                      metrics collection, which the Prometheus client does by default,
                      when set to false. This reduces the number of metrics reported,
                      reducing Prometheus load. [Default: true]'
                    type: boolean
                  removeExternalRoutes:
                    description: Whether or not to remove device routes that have not
                      been programmed by Felix. Disabling this will allow external applications
                      to also add device routes. This is enabled by default which means
                      we will remove externally added routes.
                    type: boolean
                  reportingInterval:
                    description: 'ReportingInterval is the interval at which Felix reports
                      its status into the datastore or 0 to disable. Must be non-zero
                      in OpenStack deployments. [Default: 30s]'
                    type: string
                  reportingTTL:
                    description: 'ReportingTTL is the time-to-live setting for process-wide
                      status reports. [Default: 90s]'
                    type: string
                  routeRefreshInterval:
                    description: 'RouteRefreshInterval is the period at which Felix re-checks
                      the routes in the dataplane to ensure that no other process has
                      accidentally broken Calico''s rules. Set to 0 to disable route refresh.
                      [Default: 90s]'
                    type: string
                  routeSource:
                    description: 'RouteSource configures where Felix gets its routing
                      information. - WorkloadIPs: use workload endpoints to construct
                      routes. - CalicoIPAM: the default - use IPAM data to construct routes.'
                    type: string
                  routeTableRange:
                    description: Calico programs additional Linux route tables for various
                      purposes.  RouteTableRange specifies the indices of the route tables
                      that Calico should use.
                    properties:
                      max:
                        type: integer
                      min:
                        type: integer
                    required:
                    - max
                    - min
                    type: object
                  serviceLoopPrevention:
                    description: 'When service IP advertisement is enabled, prevent routing
                      loops to service IPs that are not in use, by dropping or rejecting
                      packets that do not get DNAT''d by kube-proxy. Unless set to "Disabled",
                      in which case such routing loops continue to be allowed. [Default:
                      Drop]'
                    type: string
                  sidecarAccelerationEnabled:
                    description: 'SidecarAccelerationEnabled enables experimental sidecar
                      acceleration [Default: false]'
                    type: boolean
                  usageReportingEnabled:
                    description: 'UsageReportingEnabled reports anonymous Calico version
                      number and cluster size to projectcalico.org. Logs warnings returned
                      by the usage server. For example, if a significant security vulnerability
                      has been discovered in the version of Calico being used. [Default:
                      true]'
                    type: boolean
                  usageReportingInitialDelay:
                    description: 'UsageReportingInitialDelay controls the minimum delay
                      before Felix makes a report. [Default: 300s]'
                    type: string
                  usageReportingInterval:
                    description: 'UsageReportingInterval controls the interval at which
                      Felix makes reports. [Default: 86400s]'
                    type: string
                  useInternalDataplaneDriver:
                    type: boolean
                  vxlanEnabled:
                    type: boolean
                  vxlanMTU:
                    description: 'VXLANMTU is the MTU to set on the tunnel device. See
                      Configuring MTU [Default: 1440]'
                    type: integer
                  vxlanPort:
                    type: integer
                  vxlanVNI:
                    type: integer
                  wireguardEnabled:
                    description: 'WireguardEnabled controls whether Wireguard is enabled.
                      [Default: false]'
                    type: boolean
                  wireguardHostEncryptionEnabled:
                    description: 'WireguardHostEncryptionEnabled controls whether Wireguard
                      host-to-host encryption is enabled. [Default: false]'
                    type: boolean
                  wireguardInterfaceName:
                    description: 'WireguardInterfaceName specifies the name to use for
                      the Wireguard interface. [Default: wg.calico]'
                    type: string
                  wireguardListeningPort:
                    description: 'WireguardListeningPort controls the listening port used
                      by Wireguard. [Default: 51820]'
                    type: integer
                  wireguardMTU:
                    description: 'WireguardMTU controls the MTU on the Wireguard interface.
                      See Configuring MTU [Default: 1420]'
                    type: integer
                  wireguardRoutingRulePriority:
                    description: 'WireguardRoutingRulePriority controls the priority value
                      to use for the Wireguard routing rule. [Default: 99]'
                    type: integer
                  xdpEnabled:
                    description: 'XDPEnabled enables XDP acceleration for suitable untracked
                      incoming deny rules. [Default: true]'
                    type: boolean
                  xdpRefreshInterval:
                    description: 'XDPRefreshInterval is the period at which Felix re-checks
                      all XDP state to ensure that no other process has accidentally broken
                      Calico''s BPF maps or attached programs. Set to 0 to disable XDP
                      refresh. [Default: 90s]'
                    type: string
                type: object
            type: object
        served: true
        storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---
    # Source: crds/calico/kdd/crd.projectcalico.org_globalnetworkpolicies.yaml
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: globalnetworkpolicies.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: GlobalNetworkPolicy
        listKind: GlobalNetworkPolicyList
        plural: globalnetworkpolicies
        singular: globalnetworkpolicy
      scope: Cluster
      versions:
      - name: v1
        schema:
          openAPIV3Schema:
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                properties:
                  applyOnForward:
                    description: ApplyOnForward indicates to apply the rules in this policy
                      on forward traffic.
                    type: boolean
                  doNotTrack:
                    description: DoNotTrack indicates whether packets matched by the rules
                      in this policy should go through the data plane's connection tracking,
                      such as Linux conntrack.  If True, the rules in this policy are
                      applied before any data plane connection tracking, and packets allowed
                      by this policy are marked as not to be tracked.
                    type: boolean
                  egress:
                    description: The ordered set of egress rules.  Each rule contains
                      a set of packet match criteria and a corresponding action to apply.
                    items:
                      description: "A Rule encapsulates a set of match criteria and an
                        action.  Both selector-based security Policy and security Profiles
                        reference rules - separated out as a list of rules for both ingress
                        and egress packet matching. \n Each positive match criteria has
                        a negated version, prefixed with \"Not\". All the match criteria
                        within a rule must be satisfied for a packet to match. A single
                        rule can contain the positive and negative version of a match
                        and both must be satisfied for the rule to match."
                      properties:
                        action:
                          type: string
                        destination:
                          description: Destination contains the match criteria that apply
                            to destination entity.
                          properties:
                            namespaceSelector:
                              description: "NamespaceSelector is an optional field that
                                contains a selector expression. Only traffic that originates
                                from (or terminates at) endpoints within the selected
                                namespaces will be matched. When both NamespaceSelector
                                and another selector are defined on the same rule, then
                                only workload endpoints that are matched by both selectors
                                will be selected by the rule. \n For NetworkPolicy, an
                                empty NamespaceSelector implies that the Selector is limited
                                to selecting only workload endpoints in the same namespace
                                as the NetworkPolicy. \n For NetworkPolicy, `global()`
                                NamespaceSelector implies that the Selector is limited
                                to selecting only GlobalNetworkSet or HostEndpoint. \n
                                For GlobalNetworkPolicy, an empty NamespaceSelector implies
                                the Selector applies to workload endpoints across all
                                namespaces."
                              type: string
                            nets:
                              description: Nets is an optional field that restricts the
                                rule to only apply to traffic that originates from (or
                                terminates at) IP addresses in any of the given subnets.
                              items:
                                type: string
                              type: array
                            notNets:
                              description: NotNets is the negated version of the Nets
                                field.
                              items:
                                type: string
                              type: array
                            notPorts:
                              description: NotPorts is the negated version of the Ports
                                field. Since only some protocols have ports, if any ports
                                are specified it requires the Protocol match in the Rule
                                to be set to "TCP" or "UDP".
                              items:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^.*
                                x-kubernetes-int-or-string: true
                              type: array
                            notSelector:
                              description: NotSelector is the negated version of the Selector
                                field.  See Selector field for subtleties with negated
                                selectors.
                              type: string
                            ports:
                              description: "Ports is an optional field that restricts
                                the rule to only apply to traffic that has a source (destination)
                                port that matches one of these ranges/values. This value
                                is a list of integers or strings that represent ranges
                                of ports. \n Since only some protocols have ports, if
                                any ports are specified it requires the Protocol match
                                in the Rule to be set to \"TCP\" or \"UDP\"."
                              items:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^.*
                                x-kubernetes-int-or-string: true
                              type: array
                            selector:
                              description: "Selector is an optional field that contains
                                a selector expression (see Policy for sample syntax).
                                \ Only traffic that originates from (terminates at) endpoints
                                matching the selector will be matched. \n Note that: in
                                addition to the negated version of the Selector (see NotSelector
                                below), the selector expression syntax itself supports
                                negation.  The two types of negation are subtly different.
                                One negates the set of matched endpoints, the other negates
                                the whole match: \n \tSelector = \"!has(my_label)\" matches
                                packets that are from other Calico-controlled \tendpoints
                                that do not have the label \"my_label\". \n \tNotSelector
                                = \"has(my_label)\" matches packets that are not from
                                Calico-controlled \tendpoints that do have the label \"my_label\".
                                \n The effect is that the latter will accept packets from
                                non-Calico sources whereas the former is limited to packets
                                from Calico-controlled endpoints."
                              type: string
                            serviceAccounts:
                              description: ServiceAccounts is an optional field that restricts
                                the rule to only apply to traffic that originates from
                                (or terminates at) a pod running as a matching service
                                account.
                              properties:
                                names:
                                  description: Names is an optional field that restricts
                                    the rule to only apply to traffic that originates
                                    from (or terminates at) a pod running as a service
                                    account whose name is in the list.
                                  items:
                                    type: string
                                  type: array
                                selector:
                                  description: Selector is an optional field that restricts
                                    the rule to only apply to traffic that originates
                                    from (or terminates at) a pod running as a service
                                    account that matches the given label selector. If
                                    both Names and Selector are specified then they are
                                    AND'ed.
                                  type: string
                              type: object
                            services:
                              description: "Services is an optional field that contains
                                options for matching Kubernetes Services. If specified,
                                only traffic that originates from or terminates at endpoints
                                within the selected service(s) will be matched, and only
                                to/from each endpoint's port. \n Services cannot be specified
                                on the same rule as Selector, NotSelector, NamespaceSelector,
                                Nets, NotNets or ServiceAccounts. \n Ports and NotPorts
                                can only be specified with Services on ingress rules."
                              properties:
                                name:
                                  description: Name specifies the name of a Kubernetes
                                    Service to match.
                                  type: string
                                namespace:
                                  description: Namespace specifies the namespace of the
                                    given Service. If left empty, the rule will match
                                    within this policy's namespace.
                                  type: string
                              type: object
                          type: object
                        http:
                          description: HTTP contains match criteria that apply to HTTP
                            requests.
                          properties:
                            methods:
                              description: Methods is an optional field that restricts
                                the rule to apply only to HTTP requests that use one of
                                the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple
                                methods are OR'd together.
                              items:
                                type: string
                              type: array
                            paths:
                              description: 'Paths is an optional field that restricts
                                the rule to apply to HTTP requests that use one of the
                                listed HTTP Paths. Multiple paths are OR''d together.
                                e.g: - exact: /foo - prefix: /bar NOTE: Each entry may
                                ONLY specify either a `exact` or a `prefix` match. The
                                validator will check for it.'
                              items:
                                description: 'HTTPPath specifies an HTTP path to match.
                                  It may be either of the form: exact: <path>: which matches
                                  the path exactly or prefix: <path-prefix>: which matches
                                  the path prefix'
                                properties:
                                  exact:
                                    type: string
                                  prefix:
                                    type: string
                                type: object
                              type: array
                          type: object
                        icmp:
                          description: ICMP is an optional field that restricts the rule
                            to apply to a specific type and code of ICMP traffic.  This
                            should only be specified if the Protocol field is set to "ICMP"
                            or "ICMPv6".
                          properties:
                            code:
                              description: Match on a specific ICMP code.  If specified,
                                the Type value must also be specified. This is a technical
                                limitation imposed by the kernel's iptables firewall,
                                which Calico uses to enforce the rule.
                              type: integer
                            type:
                              description: Match on a specific ICMP type.  For example
                                a value of 8 refers to ICMP Echo Request (i.e. pings).
                              type: integer
                          type: object
                        ipVersion:
                          description: IPVersion is an optional field that restricts the
                            rule to only match a specific IP version.
                          type: integer
                        metadata:
                          description: Metadata contains additional information for this
                            rule
                          properties:
                            annotations:
                              additionalProperties:
                                type: string
                              description: Annotations is a set of key value pairs that
                                give extra information about the rule
                              type: object
                          type: object
                        notICMP:
                          description: NotICMP is the negated version of the ICMP field.
                          properties:
                            code:
                              description: Match on a specific ICMP code.  If specified,
                                the Type value must also be specified. This is a technical
                                limitation imposed by the kernel's iptables firewall,
                                which Calico uses to enforce the rule.
                              type: integer
                            type:
                              description: Match on a specific ICMP type.  For example
                                a value of 8 refers to ICMP Echo Request (i.e. pings).
                              type: integer
                          type: object
                        notProtocol:
                          anyOf:
                          - type: integer
                          - type: string
                          description: NotProtocol is the negated version of the Protocol
                            field.
                          pattern: ^.*
                          x-kubernetes-int-or-string: true
                        protocol:
                          anyOf:
                          - type: integer
                          - type: string
                          description: "Protocol is an optional field that restricts the
                            rule to only apply to traffic of a specific IP protocol. Required
                            if any of the EntityRules contain Ports (because ports only
                            apply to certain protocols). \n Must be one of these string
                            values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\", \"SCTP\",
                            \"UDPLite\" or an integer in the range 1-255."
                          pattern: ^.*
                          x-kubernetes-int-or-string: true
                        source:
                          description: Source contains the match criteria that apply to
                            source entity.
                          properties:
                            namespaceSelector:
                              description: "NamespaceSelector is an optional field that
                                contains a selector expression. Only traffic that originates
                                from (or terminates at) endpoints within the selected
                                namespaces will be matched. When both NamespaceSelector
                                and another selector are defined on the same rule, then
                                only workload endpoints that are matched by both selectors
                                will be selected by the rule. \n For NetworkPolicy, an
                                empty NamespaceSelector implies that the Selector is limited
                                to selecting only workload endpoints in the same namespace
                                as the NetworkPolicy. \n For NetworkPolicy, `global()`
                                NamespaceSelector implies that the Selector is limited
                                to selecting only GlobalNetworkSet or HostEndpoint. \n
                                For GlobalNetworkPolicy, an empty NamespaceSelector implies
                                the Selector applies to workload endpoints across all
                                namespaces."
                              type: string
                            nets:
                              description: Nets is an optional field that restricts the
                                rule to only apply to traffic that originates from (or
                                terminates at) IP addresses in any of the given subnets.
                              items:
                                type: string
                              type: array
                            notNets:
                              description: NotNets is the negated version of the Nets
                                field.
                              items:
                                type: string
                              type: array
                            notPorts:
                              description: NotPorts is the negated version of the Ports
                                field. Since only some protocols have ports, if any ports
                                are specified it requires the Protocol match in the Rule
                                to be set to "TCP" or "UDP".
                              items:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^.*
                                x-kubernetes-int-or-string: true
                              type: array
                            notSelector:
                              description: NotSelector is the negated version of the Selector
                                field.  See Selector field for subtleties with negated
                                selectors.
                              type: string
                            ports:
                              description: "Ports is an optional field that restricts
                                the rule to only apply to traffic that has a source (destination)
                                port that matches one of these ranges/values. This value
                                is a list of integers or strings that represent ranges
                                of ports. \n Since only some protocols have ports, if
                                any ports are specified it requires the Protocol match
                                in the Rule to be set to \"TCP\" or \"UDP\"."
                              items:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^.*
                                x-kubernetes-int-or-string: true
                              type: array
                            selector:
                              description: "Selector is an optional field that contains
                                a selector expression (see Policy for sample syntax).
                                \ Only traffic that originates from (terminates at) endpoints
                                matching the selector will be matched. \n Note that: in
                                addition to the negated version of the Selector (see NotSelector
                                below), the selector expression syntax itself supports
                                negation.  The two types of negation are subtly different.
                                One negates the set of matched endpoints, the other negates
                                the whole match: \n \tSelector = \"!has(my_label)\" matches
                                packets that are from other Calico-controlled \tendpoints
                                that do not have the label \"my_label\". \n \tNotSelector
                                = \"has(my_label)\" matches packets that are not from
                                Calico-controlled \tendpoints that do have the label \"my_label\".
                                \n The effect is that the latter will accept packets from
                                non-Calico sources whereas the former is limited to packets
                                from Calico-controlled endpoints."
                              type: string
                            serviceAccounts:
                              description: ServiceAccounts is an optional field that restricts
                                the rule to only apply to traffic that originates from
                                (or terminates at) a pod running as a matching service
                                account.
                              properties:
                                names:
                                  description: Names is an optional field that restricts
                                    the rule to only apply to traffic that originates
                                    from (or terminates at) a pod running as a service
                                    account whose name is in the list.
                                  items:
                                    type: string
                                  type: array
                                selector:
                                  description: Selector is an optional field that restricts
                                    the rule to only apply to traffic that originates
                                    from (or terminates at) a pod running as a service
                                    account that matches the given label selector. If
                                    both Names and Selector are specified then they are
                                    AND'ed.
                                  type: string
                              type: object
                            services:
                              description: "Services is an optional field that contains
                                options for matching Kubernetes Services. If specified,
                                only traffic that originates from or terminates at endpoints
                                within the selected service(s) will be matched, and only
                                to/from each endpoint's port. \n Services cannot be specified
                                on the same rule as Selector, NotSelector, NamespaceSelector,
                                Nets, NotNets or ServiceAccounts. \n Ports and NotPorts
                                can only be specified with Services on ingress rules."
                              properties:
                                name:
                                  description: Name specifies the name of a Kubernetes
                                    Service to match.
                                  type: string
                                namespace:
                                  description: Namespace specifies the namespace of the
                                    given Service. If left empty, the rule will match
                                    within this policy's namespace.
                                  type: string
                              type: object
                          type: object
                      required:
                      - action
                      type: object
                    type: array
                  ingress:
                    description: The ordered set of ingress rules.  Each rule contains
                      a set of packet match criteria and a corresponding action to apply.
                    items:
                      description: "A Rule encapsulates a set of match criteria and an
                        action.  Both selector-based security Policy and security Profiles
                        reference rules - separated out as a list of rules for both ingress
                        and egress packet matching. \n Each positive match criteria has
                        a negated version, prefixed with \"Not\". All the match criteria
                        within a rule must be satisfied for a packet to match. A single
                        rule can contain the positive and negative version of a match
                        and both must be satisfied for the rule to match."
                      properties:
                        action:
                          type: string
                        destination:
                          description: Destination contains the match criteria that apply
                            to destination entity.
                          properties:
                            namespaceSelector:
                              description: "NamespaceSelector is an optional field that
                                contains a selector expression. Only traffic that originates
                                from (or terminates at) endpoints within the selected
                                namespaces will be matched. When both NamespaceSelector
                                and another selector are defined on the same rule, then
                                only workload endpoints that are matched by both selectors
                                will be selected by the rule. \n For NetworkPolicy, an
                                empty NamespaceSelector implies that the Selector is limited
                                to selecting only workload endpoints in the same namespace
                                as the NetworkPolicy. \n For NetworkPolicy, `global()`
                                NamespaceSelector implies that the Selector is limited
                                to selecting only GlobalNetworkSet or HostEndpoint. \n
                                For GlobalNetworkPolicy, an empty NamespaceSelector implies
                                the Selector applies to workload endpoints across all
                                namespaces."
                              type: string
                            nets:
                              description: Nets is an optional field that restricts the
                                rule to only apply to traffic that originates from (or
                                terminates at) IP addresses in any of the given subnets.
                              items:
                                type: string
                              type: array
                            notNets:
                              description: NotNets is the negated version of the Nets
                                field.
                              items:
                                type: string
                              type: array
                            notPorts:
                              description: NotPorts is the negated version of the Ports
                                field. Since only some protocols have ports, if any ports
                                are specified it requires the Protocol match in the Rule
                                to be set to "TCP" or "UDP".
                              items:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^.*
                                x-kubernetes-int-or-string: true
                              type: array
                            notSelector:
                              description: NotSelector is the negated version of the Selector
                                field.  See Selector field for subtleties with negated
                                selectors.
                              type: string
                            ports:
                              description: "Ports is an optional field that restricts
                                the rule to only apply to traffic that has a source (destination)
                                port that matches one of these ranges/values. This value
                                is a list of integers or strings that represent ranges
                                of ports. \n Since only some protocols have ports, if
                                any ports are specified it requires the Protocol match
                                in the Rule to be set to \"TCP\" or \"UDP\"."
                              items:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^.*
                                x-kubernetes-int-or-string: true
                              type: array
                            selector:
                              description: "Selector is an optional field that contains
                                a selector expression (see Policy for sample syntax).
                                \ Only traffic that originates from (terminates at) endpoints
                                matching the selector will be matched. \n Note that: in
                                addition to the negated version of the Selector (see NotSelector
                                below), the selector expression syntax itself supports
                                negation.  The two types of negation are subtly different.
                                One negates the set of matched endpoints, the other negates
                                the whole match: \n \tSelector = \"!has(my_label)\" matches
                                packets that are from other Calico-controlled \tendpoints
                                that do not have the label \"my_label\". \n \tNotSelector
                                = \"has(my_label)\" matches packets that are not from
                                Calico-controlled \tendpoints that do have the label \"my_label\".
                                \n The effect is that the latter will accept packets from
                                non-Calico sources whereas the former is limited to packets
                                from Calico-controlled endpoints."
                              type: string
                            serviceAccounts:
                              description: ServiceAccounts is an optional field that restricts
                                the rule to only apply to traffic that originates from
                                (or terminates at) a pod running as a matching service
                                account.
                              properties:
                                names:
                                  description: Names is an optional field that restricts
                                    the rule to only apply to traffic that originates
                                    from (or terminates at) a pod running as a service
                                    account whose name is in the list.
                                  items:
                                    type: string
                                  type: array
                                selector:
                                  description: Selector is an optional field that restricts
                                    the rule to only apply to traffic that originates
                                    from (or terminates at) a pod running as a service
                                    account that matches the given label selector. If
                                    both Names and Selector are specified then they are
                                    AND'ed.
                                  type: string
                              type: object
                            services:
                              description: "Services is an optional field that contains
                                options for matching Kubernetes Services. If specified,
                                only traffic that originates from or terminates at endpoints
                                within the selected service(s) will be matched, and only
                                to/from each endpoint's port. \n Services cannot be specified
                                on the same rule as Selector, NotSelector, NamespaceSelector,
                                Nets, NotNets or ServiceAccounts. \n Ports and NotPorts
                                can only be specified with Services on ingress rules."
                              properties:
                                name:
                                  description: Name specifies the name of a Kubernetes
                                    Service to match.
                                  type: string
                                namespace:
                                  description: Namespace specifies the namespace of the
                                    given Service. If left empty, the rule will match
                                    within this policy's namespace.
                                  type: string
                              type: object
                          type: object
                        http:
                          description: HTTP contains match criteria that apply to HTTP
                            requests.
                          properties:
                            methods:
                              description: Methods is an optional field that restricts
                                the rule to apply only to HTTP requests that use one of
                                the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple
                                methods are OR'd together.
                              items:
                                type: string
                              type: array
                            paths:
                              description: 'Paths is an optional field that restricts
                                the rule to apply to HTTP requests that use one of the
                                listed HTTP Paths. Multiple paths are OR''d together.
                                e.g: - exact: /foo - prefix: /bar NOTE: Each entry may
                                ONLY specify either a `exact` or a `prefix` match. The
                                validator will check for it.'
                              items:
                                description: 'HTTPPath specifies an HTTP path to match.
                                  It may be either of the form: exact: <path>: which matches
                                  the path exactly or prefix: <path-prefix>: which matches
                                  the path prefix'
                                properties:
                                  exact:
                                    type: string
                                  prefix:
                                    type: string
                                type: object
                              type: array
                          type: object
                        icmp:
                          description: ICMP is an optional field that restricts the rule
                            to apply to a specific type and code of ICMP traffic.  This
                            should only be specified if the Protocol field is set to "ICMP"
                            or "ICMPv6".
                          properties:
                            code:
                              description: Match on a specific ICMP code.  If specified,
                                the Type value must also be specified. This is a technical
                                limitation imposed by the kernel's iptables firewall,
                                which Calico uses to enforce the rule.
                              type: integer
                            type:
                              description: Match on a specific ICMP type.  For example
                                a value of 8 refers to ICMP Echo Request (i.e. pings).
                              type: integer
                          type: object
                        ipVersion:
                          description: IPVersion is an optional field that restricts the
                            rule to only match a specific IP version.
                          type: integer
                        metadata:
                          description: Metadata contains additional information for this
                            rule
                          properties:
                            annotations:
                              additionalProperties:
                                type: string
                              description: Annotations is a set of key value pairs that
                                give extra information about the rule
                              type: object
                          type: object
                        notICMP:
                          description: NotICMP is the negated version of the ICMP field.
                          properties:
                            code:
                              description: Match on a specific ICMP code.  If specified,
                                the Type value must also be specified. This is a technical
                                limitation imposed by the kernel's iptables firewall,
                                which Calico uses to enforce the rule.
                              type: integer
                            type:
                              description: Match on a specific ICMP type.  For example
                                a value of 8 refers to ICMP Echo Request (i.e. pings).
                              type: integer
                          type: object
                        notProtocol:
                          anyOf:
                          - type: integer
                          - type: string
                          description: NotProtocol is the negated version of the Protocol
                            field.
                          pattern: ^.*
                          x-kubernetes-int-or-string: true
                        protocol:
                          anyOf:
                          - type: integer
                          - type: string
                          description: "Protocol is an optional field that restricts the
                            rule to only apply to traffic of a specific IP protocol. Required
                            if any of the EntityRules contain Ports (because ports only
                            apply to certain protocols). \n Must be one of these string
                            values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\", \"SCTP\",
                            \"UDPLite\" or an integer in the range 1-255."
                          pattern: ^.*
                          x-kubernetes-int-or-string: true
                        source:
                          description: Source contains the match criteria that apply to
                            source entity.
                          properties:
                            namespaceSelector:
                              description: "NamespaceSelector is an optional field that
                                contains a selector expression. Only traffic that originates
                                from (or terminates at) endpoints within the selected
                                namespaces will be matched. When both NamespaceSelector
                                and another selector are defined on the same rule, then
                                only workload endpoints that are matched by both selectors
                                will be selected by the rule. \n For NetworkPolicy, an
                                empty NamespaceSelector implies that the Selector is limited
                                to selecting only workload endpoints in the same namespace
                                as the NetworkPolicy. \n For NetworkPolicy, `global()`
                                NamespaceSelector implies that the Selector is limited
                                to selecting only GlobalNetworkSet or HostEndpoint. \n
                                For GlobalNetworkPolicy, an empty NamespaceSelector implies
                                the Selector applies to workload endpoints across all
                                namespaces."
                              type: string
                            nets:
                              description: Nets is an optional field that restricts the
                                rule to only apply to traffic that originates from (or
                                terminates at) IP addresses in any of the given subnets.
                              items:
                                type: string
                              type: array
                            notNets:
                              description: NotNets is the negated version of the Nets
                                field.
                              items:
                                type: string
                              type: array
                            notPorts:
                              description: NotPorts is the negated version of the Ports
                                field. Since only some protocols have ports, if any ports
                                are specified it requires the Protocol match in the Rule
                                to be set to "TCP" or "UDP".
                              items:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^.*
                                x-kubernetes-int-or-string: true
                              type: array
                            notSelector:
                              description: NotSelector is the negated version of the Selector
                                field.  See Selector field for subtleties with negated
                                selectors.
                              type: string
                            ports:
                              description: "Ports is an optional field that restricts
                                the rule to only apply to traffic that has a source (destination)
                                port that matches one of these ranges/values. This value
                                is a list of integers or strings that represent ranges
                                of ports. \n Since only some protocols have ports, if
                                any ports are specified it requires the Protocol match
                                in the Rule to be set to \"TCP\" or \"UDP\"."
                              items:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^.*
                                x-kubernetes-int-or-string: true
                              type: array
                            selector:
                              description: "Selector is an optional field that contains
                                a selector expression (see Policy for sample syntax).
                                \ Only traffic that originates from (terminates at) endpoints
                                matching the selector will be matched. \n Note that: in
                                addition to the negated version of the Selector (see NotSelector
                                below), the selector expression syntax itself supports
                                negation.  The two types of negation are subtly different.
                                One negates the set of matched endpoints, the other negates
                                the whole match: \n \tSelector = \"!has(my_label)\" matches
                                packets that are from other Calico-controlled \tendpoints
                                that do not have the label \"my_label\". \n \tNotSelector
                                = \"has(my_label)\" matches packets that are not from
                                Calico-controlled \tendpoints that do have the label \"my_label\".
                                \n The effect is that the latter will accept packets from
                                non-Calico sources whereas the former is limited to packets
                                from Calico-controlled endpoints."
                              type: string
                            serviceAccounts:
                              description: ServiceAccounts is an optional field that restricts
                                the rule to only apply to traffic that originates from
                                (or terminates at) a pod running as a matching service
                                account.
                              properties:
                                names:
                                  description: Names is an optional field that restricts
                                    the rule to only apply to traffic that originates
                                    from (or terminates at) a pod running as a service
                                    account whose name is in the list.
                                  items:
                                    type: string
                                  type: array
                                selector:
                                  description: Selector is an optional field that restricts
                                    the rule to only apply to traffic that originates
                                    from (or terminates at) a pod running as a service
                                    account that matches the given label selector. If
                                    both Names and Selector are specified then they are
                                    AND'ed.
                                  type: string
                              type: object
                            services:
                              description: "Services is an optional field that contains
                                options for matching Kubernetes Services. If specified,
                                only traffic that originates from or terminates at endpoints
                                within the selected service(s) will be matched, and only
                                to/from each endpoint's port. \n Services cannot be specified
                                on the same rule as Selector, NotSelector, NamespaceSelector,
                                Nets, NotNets or ServiceAccounts. \n Ports and NotPorts
                                can only be specified with Services on ingress rules."
                              properties:
                                name:
                                  description: Name specifies the name of a Kubernetes
                                    Service to match.
                                  type: string
                                namespace:
                                  description: Namespace specifies the namespace of the
                                    given Service. If left empty, the rule will match
                                    within this policy's namespace.
                                  type: string
                              type: object
                          type: object
                      required:
                      - action
                      type: object
                    type: array
                  namespaceSelector:
                    description: NamespaceSelector is an optional field for an expression
                      used to select a pod based on namespaces.
                    type: string
                  order:
                    description: Order is an optional field that specifies the order in
                      which the policy is applied. Policies with higher "order" are applied
                      after those with lower order.  If the order is omitted, it may be
                      considered to be "infinite" - i.e. the policy will be applied last.  Policies
                      with identical order will be applied in alphanumerical order based
                      on the Policy "Name".
                    type: number
                  preDNAT:
                    description: PreDNAT indicates to apply the rules in this policy before
                      any DNAT.
                    type: boolean
                  selector:
                    description: "The selector is an expression used to pick pick out
                      the endpoints that the policy should be applied to. \n Selector
                      expressions follow this syntax: \n \tlabel == \"string_literal\"
                      \ ->  comparison, e.g. my_label == \"foo bar\" \tlabel != \"string_literal\"
                      \  ->  not equal; also matches if label is not present \tlabel in
                      { \"a\", \"b\", \"c\", ... }  ->  true if the value of label X is
                      one of \"a\", \"b\", \"c\" \tlabel not in { \"a\", \"b\", \"c\",
                      ... }  ->  true if the value of label X is not one of \"a\", \"b\",
                      \"c\" \thas(label_name)  -> True if that label is present \t! expr
                      -> negation of expr \texpr && expr  -> Short-circuit and \texpr
                      || expr  -> Short-circuit or \t( expr ) -> parens for grouping \tall()
                      or the empty selector -> matches all endpoints. \n Label names are
                      allowed to contain alphanumerics, -, _ and /. String literals are
                      more permissive but they do not support escape characters. \n Examples
                      (with made-up labels): \n \ttype == \"webserver\" && deployment
                      == \"prod\" \ttype in {\"frontend\", \"backend\"} \tdeployment !=
                      \"dev\" \t! has(label_name)"
                    type: string
                  serviceAccountSelector:
                    description: ServiceAccountSelector is an optional field for an expression
                      used to select a pod based on service accounts.
                    type: string
                  types:
                    description: "Types indicates whether this policy applies to ingress,
                      or to egress, or to both.  When not explicitly specified (and so
                      the value on creation is empty or nil), Calico defaults Types according
                      to what Ingress and Egress rules are present in the policy.  The
                      default is: \n - [ PolicyTypeIngress ], if there are no Egress rules
                      (including the case where there are   also no Ingress rules) \n
                      - [ PolicyTypeEgress ], if there are Egress rules but no Ingress
                      rules \n - [ PolicyTypeIngress, PolicyTypeEgress ], if there are
                      both Ingress and Egress rules. \n When the policy is read back again,
                      Types will always be one of these values, never empty or nil."
                    items:
                      description: PolicyType enumerates the possible values of the PolicySpec
                        Types field.
                      type: string
                    type: array
                type: object
            type: object
        served: true
        storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---
    # Source: crds/calico/kdd/crd.projectcalico.org_globalnetworksets.yaml
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: globalnetworksets.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: GlobalNetworkSet
        listKind: GlobalNetworkSetList
        plural: globalnetworksets
        singular: globalnetworkset
      scope: Cluster
      versions:
      - name: v1
        schema:
          openAPIV3Schema:
            description: GlobalNetworkSet contains a set of arbitrary IP sub-networks/CIDRs
              that share labels to allow rules to refer to them via selectors.  The labels
              of GlobalNetworkSet are not namespaced.
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: GlobalNetworkSetSpec contains the specification for a NetworkSet
                  resource.
                properties:
                  nets:
                    description: The list of IP networks that belong to this set.
                    items:
                      type: string
                    type: array
                type: object
            type: object
        served: true
        storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---
    # Source: crds/calico/kdd/crd.projectcalico.org_hostendpoints.yaml
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: hostendpoints.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: HostEndpoint
        listKind: HostEndpointList
        plural: hostendpoints
        singular: hostendpoint
      scope: Cluster
      versions:
      - name: v1
        schema:
          openAPIV3Schema:
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: HostEndpointSpec contains the specification for a HostEndpoint
                  resource.
                properties:
                  expectedIPs:
                    description: "The expected IP addresses (IPv4 and IPv6) of the endpoint.
                      If \"InterfaceName\" is not present, Calico will look for an interface
                      matching any of the IPs in the list and apply policy to that. Note:
                      \tWhen using the selector match criteria in an ingress or egress
                      security Policy \tor Profile, Calico converts the selector into
                      a set of IP addresses. For host \tendpoints, the ExpectedIPs field
                      is used for that purpose. (If only the interface \tname is specified,
                      Calico does not learn the IPs of the interface for use in match
                      \tcriteria.)"
                    items:
                      type: string
                    type: array
                  interfaceName:
                    description: "Either \"*\", or the name of a specific Linux interface
                      to apply policy to; or empty.  \"*\" indicates that this HostEndpoint
                      governs all traffic to, from or through the default network namespace
                      of the host named by the \"Node\" field; entering and leaving that
                      namespace via any interface, including those from/to non-host-networked
                      local workloads. \n If InterfaceName is not \"*\", this HostEndpoint
                      only governs traffic that enters or leaves the host through the
                      specific interface named by InterfaceName, or - when InterfaceName
                      is empty - through the specific interface that has one of the IPs
                      in ExpectedIPs. Therefore, when InterfaceName is empty, at least
                      one expected IP must be specified.  Only external interfaces (such
                      as \"eth0\") are supported here; it isn't possible for a HostEndpoint
                      to protect traffic through a specific local workload interface.
                      \n Note: Only some kinds of policy are implemented for \"*\" HostEndpoints;
                      initially just pre-DNAT policy.  Please check Calico documentation
                      for the latest position."
                    type: string
                  node:
                    description: The node name identifying the Calico node instance.
                    type: string
                  ports:
                    description: Ports contains the endpoint's named ports, which may
                      be referenced in security policy rules.
                    items:
                      properties:
                        name:
                          type: string
                        port:
                          type: integer
                        protocol:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^.*
                          x-kubernetes-int-or-string: true
                      required:
                      - name
                      - port
                      - protocol
                      type: object
                    type: array
                  profiles:
                    description: A list of identifiers of security Profile objects that
                      apply to this endpoint. Each profile is applied in the order that
                      they appear in this list.  Profile rules are applied after the selector-based
                      security policy.
                    items:
                      type: string
                    type: array
                type: object
            type: object
        served: true
        storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---
    # Source: crds/calico/kdd/crd.projectcalico.org_ipamblocks.yaml
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: ipamblocks.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: IPAMBlock
        listKind: IPAMBlockList
        plural: ipamblocks
        singular: ipamblock
      scope: Cluster
      versions:
      - name: v1
        schema:
          openAPIV3Schema:
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: IPAMBlockSpec contains the specification for an IPAMBlock
                  resource.
                properties:
                  affinity:
                    type: string
                  allocations:
                    items:
                      type: integer
                      # TODO: This nullable is manually added in. We should update controller-gen
                      # to handle []*int properly itself.
                      nullable: true
                    type: array
                  attributes:
                    items:
                      properties:
                        handle_id:
                          type: string
                        secondary:
                          additionalProperties:
                            type: string
                          type: object
                      type: object
                    type: array
                  cidr:
                    type: string
                  deleted:
                    type: boolean
                  strictAffinity:
                    type: boolean
                  unallocated:
                    items:
                      type: integer
                    type: array
                required:
                - allocations
                - attributes
                - cidr
                - strictAffinity
                - unallocated
                type: object
            type: object
        served: true
        storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---
    # Source: crds/calico/kdd/crd.projectcalico.org_ipamconfigs.yaml
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: ipamconfigs.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: IPAMConfig
        listKind: IPAMConfigList
        plural: ipamconfigs
        singular: ipamconfig
      scope: Cluster
      versions:
      - name: v1
        schema:
          openAPIV3Schema:
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: IPAMConfigSpec contains the specification for an IPAMConfig
                  resource.
                properties:
                  autoAllocateBlocks:
                    type: boolean
                  maxBlocksPerHost:
                    description: MaxBlocksPerHost, if non-zero, is the max number of blocks
                      that can be affine to each host.
                    type: integer
                  strictAffinity:
                    type: boolean
                required:
                - autoAllocateBlocks
                - strictAffinity
                type: object
            type: object
        served: true
        storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---
    # Source: crds/calico/kdd/crd.projectcalico.org_ipamhandles.yaml
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: ipamhandles.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: IPAMHandle
        listKind: IPAMHandleList
        plural: ipamhandles
        singular: ipamhandle
      scope: Cluster
      versions:
      - name: v1
        schema:
          openAPIV3Schema:
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: IPAMHandleSpec contains the specification for an IPAMHandle
                  resource.
                properties:
                  block:
                    additionalProperties:
                      type: integer
                    type: object
                  deleted:
                    type: boolean
                  handleID:
                    type: string
                required:
                - block
                - handleID
                type: object
            type: object
        served: true
        storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---
    # Source: crds/calico/kdd/crd.projectcalico.org_ippools.yaml
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: ippools.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: IPPool
        listKind: IPPoolList
        plural: ippools
        singular: ippool
      scope: Cluster
      versions:
      - name: v1
        schema:
          openAPIV3Schema:
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: IPPoolSpec contains the specification for an IPPool resource.
                properties:
                  allowedUses:
                    description: AllowedUse controls what the IP pool will be used for.  If
                      not specified or empty, defaults to ["Tunnel", "Workload"] for back-compatibility
                    items:
                      type: string
                    type: array
                  blockSize:
                    description: The block size to use for IP address assignments from
                      this pool. Defaults to 26 for IPv4 and 112 for IPv6.
                    type: integer
                  cidr:
                    description: The pool CIDR.
                    type: string
                  disabled:
                    description: When disabled is true, Calico IPAM will not assign addresses
                      from this pool.
                    type: boolean
                  disableBGPExport:
                    description: "Disable exporting routes from this IP Pool's CIDR over
                      BGP. [Default: false]"
                    type: boolean
                  ipip:
                    description: 'Deprecated: this field is only used for APIv1 backwards
                      compatibility. Setting this field is not allowed, this field is
                      for internal use only.'
                    properties:
                      enabled:
                        description: When enabled is true, ipip tunneling will be used
                          to deliver packets to destinations within this pool.
                        type: boolean
                      mode:
                        description: The IPIP mode.  This can be one of "always" or "cross-subnet".  A
                          mode of "always" will also use IPIP tunneling for routing to
                          destination IP addresses within this pool.  A mode of "cross-subnet"
                          will only use IPIP tunneling when the destination node is on
                          a different subnet to the originating node.  The default value
                          (if not specified) is "always".
                        type: string
                    type: object
                  ipipMode:
                    description: Contains configuration for IPIP tunneling for this pool.
                      If not specified, then this is defaulted to "Never" (i.e. IPIP tunneling
                      is disabled).
                    type: string
                  nat-outgoing:
                    description: 'Deprecated: this field is only used for APIv1 backwards
                      compatibility. Setting this field is not allowed, this field is
                      for internal use only.'
                    type: boolean
                  natOutgoing:
                    description: When nat-outgoing is true, packets sent from Calico networked
                      containers in this pool to destinations outside of this pool will
                      be masqueraded.
                    type: boolean
                  nodeSelector:
                    description: Allows IPPool to allocate for a specific node by label
                      selector.
                    type: string
                  vxlanMode:
                    description: Contains configuration for VXLAN tunneling for this pool.
                      If not specified, then this is defaulted to "Never" (i.e. VXLAN
                      tunneling is disabled).
                    type: string
                required:
                - cidr
                type: object
            type: object
        served: true
        storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---
    # Source: crds/calico/kdd/crd.projectcalico.org_ipreservations.yaml
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: ipreservations.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: IPReservation
        listKind: IPReservationList
        plural: ipreservations
        singular: ipreservation
      scope: Cluster
      versions:
      - name: v1
        schema:
          openAPIV3Schema:
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: IPReservationSpec contains the specification for an IPReservation
                  resource.
                properties:
                  reservedCIDRs:
                    description: ReservedCIDRs is a list of CIDRs and/or IP addresses
                      that Calico IPAM will exclude from new allocations.
                    items:
                      type: string
                    type: array
                type: object
            type: object
        served: true
        storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---
    # Source: crds/calico/kdd/crd.projectcalico.org_kubecontrollersconfigurations.yaml
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: kubecontrollersconfigurations.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: KubeControllersConfiguration
        listKind: KubeControllersConfigurationList
        plural: kubecontrollersconfigurations
        singular: kubecontrollersconfiguration
      scope: Cluster
      versions:
      - name: v1
        schema:
          openAPIV3Schema:
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: KubeControllersConfigurationSpec contains the values of the
                  Kubernetes controllers configuration.
                properties:
                  controllers:
                    description: Controllers enables and configures individual Kubernetes
                      controllers
                    properties:
                      namespace:
                        description: Namespace enables and configures the namespace controller.
                          Enabled by default, set to nil to disable.
                        properties:
                          reconcilerPeriod:
                            description: 'ReconcilerPeriod is the period to perform reconciliation
                              with the Calico datastore. [Default: 5m]'
                            type: string
                        type: object
                      node:
                        description: Node enables and configures the node controller.
                          Enabled by default, set to nil to disable.
                        properties:
                          hostEndpoint:
                            description: HostEndpoint controls syncing nodes to host endpoints.
                              Disabled by default, set to nil to disable.
                            properties:
                              autoCreate:
                                description: 'AutoCreate enables automatic creation of
                                  host endpoints for every node. [Default: Disabled]'
                                type: string
                            type: object
                          leakGracePeriod:
                            description: 'LeakGracePeriod is the period used by the controller
                              to determine if an IP address has been leaked. Set to 0
                              to disable IP garbage collection. [Default: 15m]'
                            type: string
                          reconcilerPeriod:
                            description: 'ReconcilerPeriod is the period to perform reconciliation
                              with the Calico datastore. [Default: 5m]'
                            type: string
                          syncLabels:
                            description: 'SyncLabels controls whether to copy Kubernetes
                              node labels to Calico nodes. [Default: Enabled]'
                            type: string
                        type: object
                      policy:
                        description: Policy enables and configures the policy controller.
                          Enabled by default, set to nil to disable.
                        properties:
                          reconcilerPeriod:
                            description: 'ReconcilerPeriod is the period to perform reconciliation
                              with the Calico datastore. [Default: 5m]'
                            type: string
                        type: object
                      serviceAccount:
                        description: ServiceAccount enables and configures the service
                          account controller. Enabled by default, set to nil to disable.
                        properties:
                          reconcilerPeriod:
                            description: 'ReconcilerPeriod is the period to perform reconciliation
                              with the Calico datastore. [Default: 5m]'
                            type: string
                        type: object
                      workloadEndpoint:
                        description: WorkloadEndpoint enables and configures the workload
                          endpoint controller. Enabled by default, set to nil to disable.
                        properties:
                          reconcilerPeriod:
                            description: 'ReconcilerPeriod is the period to perform reconciliation
                              with the Calico datastore. [Default: 5m]'
                            type: string
                        type: object
                    type: object
                  etcdV3CompactionPeriod:
                    description: 'EtcdV3CompactionPeriod is the period between etcdv3
                      compaction requests. Set to 0 to disable. [Default: 10m]'
                    type: string
                  healthChecks:
                    description: 'HealthChecks enables or disables support for health
                      checks [Default: Enabled]'
                    type: string
                  logSeverityScreen:
                    description: 'LogSeverityScreen is the log severity above which logs
                      are sent to the stdout. [Default: Info]'
                    type: string
                  prometheusMetricsPort:
                    description: 'PrometheusMetricsPort is the TCP port that the Prometheus
                      metrics server should bind to. Set to 0 to disable. [Default: 9094]'
                    type: integer
                required:
                - controllers
                type: object
              status:
                description: KubeControllersConfigurationStatus represents the status
                  of the configuration. It's useful for admins to be able to see the actual
                  config that was applied, which can be modified by environment variables
                  on the kube-controllers process.
                properties:
                  environmentVars:
                    additionalProperties:
                      type: string
                    description: EnvironmentVars contains the environment variables on
                      the kube-controllers that influenced the RunningConfig.
                    type: object
                  runningConfig:
                    description: RunningConfig contains the effective config that is running
                      in the kube-controllers pod, after merging the API resource with
                      any environment variables.
                    properties:
                      controllers:
                        description: Controllers enables and configures individual Kubernetes
                          controllers
                        properties:
                          namespace:
                            description: Namespace enables and configures the namespace
                              controller. Enabled by default, set to nil to disable.
                            properties:
                              reconcilerPeriod:
                                description: 'ReconcilerPeriod is the period to perform
                                  reconciliation with the Calico datastore. [Default:
                                  5m]'
                                type: string
                            type: object
                          node:
                            description: Node enables and configures the node controller.
                              Enabled by default, set to nil to disable.
                            properties:
                              hostEndpoint:
                                description: HostEndpoint controls syncing nodes to host
                                  endpoints. Disabled by default, set to nil to disable.
                                properties:
                                  autoCreate:
                                    description: 'AutoCreate enables automatic creation
                                      of host endpoints for every node. [Default: Disabled]'
                                    type: string
                                type: object
                              leakGracePeriod:
                                description: 'LeakGracePeriod is the period used by the
                                  controller to determine if an IP address has been leaked.
                                  Set to 0 to disable IP garbage collection. [Default:
                                  15m]'
                                type: string
                              reconcilerPeriod:
                                description: 'ReconcilerPeriod is the period to perform
                                  reconciliation with the Calico datastore. [Default:
                                  5m]'
                                type: string
                              syncLabels:
                                description: 'SyncLabels controls whether to copy Kubernetes
                                  node labels to Calico nodes. [Default: Enabled]'
                                type: string
                            type: object
                          policy:
                            description: Policy enables and configures the policy controller.
                              Enabled by default, set to nil to disable.
                            properties:
                              reconcilerPeriod:
                                description: 'ReconcilerPeriod is the period to perform
                                  reconciliation with the Calico datastore. [Default:
                                  5m]'
                                type: string
                            type: object
                          serviceAccount:
                            description: ServiceAccount enables and configures the service
                              account controller. Enabled by default, set to nil to disable.
                            properties:
                              reconcilerPeriod:
                                description: 'ReconcilerPeriod is the period to perform
                                  reconciliation with the Calico datastore. [Default:
                                  5m]'
                                type: string
                            type: object
                          workloadEndpoint:
                            description: WorkloadEndpoint enables and configures the workload
                              endpoint controller. Enabled by default, set to nil to disable.
                            properties:
                              reconcilerPeriod:
                                description: 'ReconcilerPeriod is the period to perform
                                  reconciliation with the Calico datastore. [Default:
                                  5m]'
                                type: string
                            type: object
                        type: object
                      etcdV3CompactionPeriod:
                        description: 'EtcdV3CompactionPeriod is the period between etcdv3
                          compaction requests. Set to 0 to disable. [Default: 10m]'
                        type: string
                      healthChecks:
                        description: 'HealthChecks enables or disables support for health
                          checks [Default: Enabled]'
                        type: string
                      logSeverityScreen:
                        description: 'LogSeverityScreen is the log severity above which
                          logs are sent to the stdout. [Default: Info]'
                        type: string
                      prometheusMetricsPort:
                        description: 'PrometheusMetricsPort is the TCP port that the Prometheus
                          metrics server should bind to. Set to 0 to disable. [Default:
                          9094]'
                        type: integer
                    required:
                    - controllers
                    type: object
                type: object
            type: object
        served: true
        storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---
    # Source: crds/calico/kdd/crd.projectcalico.org_networkpolicies.yaml
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: networkpolicies.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: NetworkPolicy
        listKind: NetworkPolicyList
        plural: networkpolicies
        singular: networkpolicy
      scope: Namespaced
      versions:
      - name: v1
        schema:
          openAPIV3Schema:
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                properties:
                  egress:
                    description: The ordered set of egress rules.  Each rule contains
                      a set of packet match criteria and a corresponding action to apply.
                    items:
                      description: "A Rule encapsulates a set of match criteria and an
                        action.  Both selector-based security Policy and security Profiles
                        reference rules - separated out as a list of rules for both ingress
                        and egress packet matching. \n Each positive match criteria has
                        a negated version, prefixed with \"Not\". All the match criteria
                        within a rule must be satisfied for a packet to match. A single
                        rule can contain the positive and negative version of a match
                        and both must be satisfied for the rule to match."
                      properties:
                        action:
                          type: string
                        destination:
                          description: Destination contains the match criteria that apply
                            to destination entity.
                          properties:
                            namespaceSelector:
                              description: "NamespaceSelector is an optional field that
                                contains a selector expression. Only traffic that originates
                                from (or terminates at) endpoints within the selected
                                namespaces will be matched. When both NamespaceSelector
                                and another selector are defined on the same rule, then
                                only workload endpoints that are matched by both selectors
                                will be selected by the rule. \n For NetworkPolicy, an
                                empty NamespaceSelector implies that the Selector is limited
                                to selecting only workload endpoints in the same namespace
                                as the NetworkPolicy. \n For NetworkPolicy, `global()`
                                NamespaceSelector implies that the Selector is limited
                                to selecting only GlobalNetworkSet or HostEndpoint. \n
                                For GlobalNetworkPolicy, an empty NamespaceSelector implies
                                the Selector applies to workload endpoints across all
                                namespaces."
                              type: string
                            nets:
                              description: Nets is an optional field that restricts the
                                rule to only apply to traffic that originates from (or
                                terminates at) IP addresses in any of the given subnets.
                              items:
                                type: string
                              type: array
                            notNets:
                              description: NotNets is the negated version of the Nets
                                field.
                              items:
                                type: string
                              type: array
                            notPorts:
                              description: NotPorts is the negated version of the Ports
                                field. Since only some protocols have ports, if any ports
                                are specified it requires the Protocol match in the Rule
                                to be set to "TCP" or "UDP".
                              items:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^.*
                                x-kubernetes-int-or-string: true
                              type: array
                            notSelector:
                              description: NotSelector is the negated version of the Selector
                                field.  See Selector field for subtleties with negated
                                selectors.
                              type: string
                            ports:
                              description: "Ports is an optional field that restricts
                                the rule to only apply to traffic that has a source (destination)
                                port that matches one of these ranges/values. This value
                                is a list of integers or strings that represent ranges
                                of ports. \n Since only some protocols have ports, if
                                any ports are specified it requires the Protocol match
                                in the Rule to be set to \"TCP\" or \"UDP\"."
                              items:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^.*
                                x-kubernetes-int-or-string: true
                              type: array
                            selector:
                              description: "Selector is an optional field that contains
                                a selector expression (see Policy for sample syntax).
                                \ Only traffic that originates from (terminates at) endpoints
                                matching the selector will be matched. \n Note that: in
                                addition to the negated version of the Selector (see NotSelector
                                below), the selector expression syntax itself supports
                                negation.  The two types of negation are subtly different.
                                One negates the set of matched endpoints, the other negates
                                the whole match: \n \tSelector = \"!has(my_label)\" matches
                                packets that are from other Calico-controlled \tendpoints
                                that do not have the label \"my_label\". \n \tNotSelector
                                = \"has(my_label)\" matches packets that are not from
                                Calico-controlled \tendpoints that do have the label \"my_label\".
                                \n The effect is that the latter will accept packets from
                                non-Calico sources whereas the former is limited to packets
                                from Calico-controlled endpoints."
                              type: string
                            serviceAccounts:
                              description: ServiceAccounts is an optional field that restricts
                                the rule to only apply to traffic that originates from
                                (or terminates at) a pod running as a matching service
                                account.
                              properties:
                                names:
                                  description: Names is an optional field that restricts
                                    the rule to only apply to traffic that originates
                                    from (or terminates at) a pod running as a service
                                    account whose name is in the list.
                                  items:
                                    type: string
                                  type: array
                                selector:
                                  description: Selector is an optional field that restricts
                                    the rule to only apply to traffic that originates
                                    from (or terminates at) a pod running as a service
                                    account that matches the given label selector. If
                                    both Names and Selector are specified then they are
                                    AND'ed.
                                  type: string
                              type: object
                            services:
                              description: "Services is an optional field that contains
                                options for matching Kubernetes Services. If specified,
                                only traffic that originates from or terminates at endpoints
                                within the selected service(s) will be matched, and only
                                to/from each endpoint's port. \n Services cannot be specified
                                on the same rule as Selector, NotSelector, NamespaceSelector,
                                Nets, NotNets or ServiceAccounts. \n Ports and NotPorts
                                can only be specified with Services on ingress rules."
                              properties:
                                name:
                                  description: Name specifies the name of a Kubernetes
                                    Service to match.
                                  type: string
                                namespace:
                                  description: Namespace specifies the namespace of the
                                    given Service. If left empty, the rule will match
                                    within this policy's namespace.
                                  type: string
                              type: object
                          type: object
                        http:
                          description: HTTP contains match criteria that apply to HTTP
                            requests.
                          properties:
                            methods:
                              description: Methods is an optional field that restricts
                                the rule to apply only to HTTP requests that use one of
                                the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple
                                methods are OR'd together.
                              items:
                                type: string
                              type: array
                            paths:
                              description: 'Paths is an optional field that restricts
                                the rule to apply to HTTP requests that use one of the
                                listed HTTP Paths. Multiple paths are OR''d together.
                                e.g: - exact: /foo - prefix: /bar NOTE: Each entry may
                                ONLY specify either a `exact` or a `prefix` match. The
                                validator will check for it.'
                              items:
                                description: 'HTTPPath specifies an HTTP path to match.
                                  It may be either of the form: exact: <path>: which matches
                                  the path exactly or prefix: <path-prefix>: which matches
                                  the path prefix'
                                properties:
                                  exact:
                                    type: string
                                  prefix:
                                    type: string
                                type: object
                              type: array
                          type: object
                        icmp:
                          description: ICMP is an optional field that restricts the rule
                            to apply to a specific type and code of ICMP traffic.  This
                            should only be specified if the Protocol field is set to "ICMP"
                            or "ICMPv6".
                          properties:
                            code:
                              description: Match on a specific ICMP code.  If specified,
                                the Type value must also be specified. This is a technical
                                limitation imposed by the kernel's iptables firewall,
                                which Calico uses to enforce the rule.
                              type: integer
                            type:
                              description: Match on a specific ICMP type.  For example
                                a value of 8 refers to ICMP Echo Request (i.e. pings).
                              type: integer
                          type: object
                        ipVersion:
                          description: IPVersion is an optional field that restricts the
                            rule to only match a specific IP version.
                          type: integer
                        metadata:
                          description: Metadata contains additional information for this
                            rule
                          properties:
                            annotations:
                              additionalProperties:
                                type: string
                              description: Annotations is a set of key value pairs that
                                give extra information about the rule
                              type: object
                          type: object
                        notICMP:
                          description: NotICMP is the negated version of the ICMP field.
                          properties:
                            code:
                              description: Match on a specific ICMP code.  If specified,
                                the Type value must also be specified. This is a technical
                                limitation imposed by the kernel's iptables firewall,
                                which Calico uses to enforce the rule.
                              type: integer
                            type:
                              description: Match on a specific ICMP type.  For example
                                a value of 8 refers to ICMP Echo Request (i.e. pings).
                              type: integer
                          type: object
                        notProtocol:
                          anyOf:
                          - type: integer
                          - type: string
                          description: NotProtocol is the negated version of the Protocol
                            field.
                          pattern: ^.*
                          x-kubernetes-int-or-string: true
                        protocol:
                          anyOf:
                          - type: integer
                          - type: string
                          description: "Protocol is an optional field that restricts the
                            rule to only apply to traffic of a specific IP protocol. Required
                            if any of the EntityRules contain Ports (because ports only
                            apply to certain protocols). \n Must be one of these string
                            values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\", \"SCTP\",
                            \"UDPLite\" or an integer in the range 1-255."
                          pattern: ^.*
                          x-kubernetes-int-or-string: true
                        source:
                          description: Source contains the match criteria that apply to
                            source entity.
                          properties:
                            namespaceSelector:
                              description: "NamespaceSelector is an optional field that
                                contains a selector expression. Only traffic that originates
                                from (or terminates at) endpoints within the selected
                                namespaces will be matched. When both NamespaceSelector
                                and another selector are defined on the same rule, then
                                only workload endpoints that are matched by both selectors
                                will be selected by the rule. \n For NetworkPolicy, an
                                empty NamespaceSelector implies that the Selector is limited
                                to selecting only workload endpoints in the same namespace
                                as the NetworkPolicy. \n For NetworkPolicy, `global()`
                                NamespaceSelector implies that the Selector is limited
                                to selecting only GlobalNetworkSet or HostEndpoint. \n
                                For GlobalNetworkPolicy, an empty NamespaceSelector implies
                                the Selector applies to workload endpoints across all
                                namespaces."
                              type: string
                            nets:
                              description: Nets is an optional field that restricts the
                                rule to only apply to traffic that originates from (or
                                terminates at) IP addresses in any of the given subnets.
                              items:
                                type: string
                              type: array
                            notNets:
                              description: NotNets is the negated version of the Nets
                                field.
                              items:
                                type: string
                              type: array
                            notPorts:
                              description: NotPorts is the negated version of the Ports
                                field. Since only some protocols have ports, if any ports
                                are specified it requires the Protocol match in the Rule
                                to be set to "TCP" or "UDP".
                              items:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^.*
                                x-kubernetes-int-or-string: true
                              type: array
                            notSelector:
                              description: NotSelector is the negated version of the Selector
                                field.  See Selector field for subtleties with negated
                                selectors.
                              type: string
                            ports:
                              description: "Ports is an optional field that restricts
                                the rule to only apply to traffic that has a source (destination)
                                port that matches one of these ranges/values. This value
                                is a list of integers or strings that represent ranges
                                of ports. \n Since only some protocols have ports, if
                                any ports are specified it requires the Protocol match
                                in the Rule to be set to \"TCP\" or \"UDP\"."
                              items:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^.*
                                x-kubernetes-int-or-string: true
                              type: array
                            selector:
                              description: "Selector is an optional field that contains
                                a selector expression (see Policy for sample syntax).
                                \ Only traffic that originates from (terminates at) endpoints
                                matching the selector will be matched. \n Note that: in
                                addition to the negated version of the Selector (see NotSelector
                                below), the selector expression syntax itself supports
                                negation.  The two types of negation are subtly different.
                                One negates the set of matched endpoints, the other negates
                                the whole match: \n \tSelector = \"!has(my_label)\" matches
                                packets that are from other Calico-controlled \tendpoints
                                that do not have the label \"my_label\". \n \tNotSelector
                                = \"has(my_label)\" matches packets that are not from
                                Calico-controlled \tendpoints that do have the label \"my_label\".
                                \n The effect is that the latter will accept packets from
                                non-Calico sources whereas the former is limited to packets
                                from Calico-controlled endpoints."
                              type: string
                            serviceAccounts:
                              description: ServiceAccounts is an optional field that restricts
                                the rule to only apply to traffic that originates from
                                (or terminates at) a pod running as a matching service
                                account.
                              properties:
                                names:
                                  description: Names is an optional field that restricts
                                    the rule to only apply to traffic that originates
                                    from (or terminates at) a pod running as a service
                                    account whose name is in the list.
                                  items:
                                    type: string
                                  type: array
                                selector:
                                  description: Selector is an optional field that restricts
                                    the rule to only apply to traffic that originates
                                    from (or terminates at) a pod running as a service
                                    account that matches the given label selector. If
                                    both Names and Selector are specified then they are
                                    AND'ed.
                                  type: string
                              type: object
                            services:
                              description: "Services is an optional field that contains
                                options for matching Kubernetes Services. If specified,
                                only traffic that originates from or terminates at endpoints
                                within the selected service(s) will be matched, and only
                                to/from each endpoint's port. \n Services cannot be specified
                                on the same rule as Selector, NotSelector, NamespaceSelector,
                                Nets, NotNets or ServiceAccounts. \n Ports and NotPorts
                                can only be specified with Services on ingress rules."
                              properties:
                                name:
                                  description: Name specifies the name of a Kubernetes
                                    Service to match.
                                  type: string
                                namespace:
                                  description: Namespace specifies the namespace of the
                                    given Service. If left empty, the rule will match
                                    within this policy's namespace.
                                  type: string
                              type: object
                          type: object
                      required:
                      - action
                      type: object
                    type: array
                  ingress:
                    description: The ordered set of ingress rules.  Each rule contains
                      a set of packet match criteria and a corresponding action to apply.
                    items:
                      description: "A Rule encapsulates a set of match criteria and an
                        action.  Both selector-based security Policy and security Profiles
                        reference rules - separated out as a list of rules for both ingress
                        and egress packet matching. \n Each positive match criteria has
                        a negated version, prefixed with \"Not\". All the match criteria
                        within a rule must be satisfied for a packet to match. A single
                        rule can contain the positive and negative version of a match
                        and both must be satisfied for the rule to match."
                      properties:
                        action:
                          type: string
                        destination:
                          description: Destination contains the match criteria that apply
                            to destination entity.
                          properties:
                            namespaceSelector:
                              description: "NamespaceSelector is an optional field that
                                contains a selector expression. Only traffic that originates
                                from (or terminates at) endpoints within the selected
                                namespaces will be matched. When both NamespaceSelector
                                and another selector are defined on the same rule, then
                                only workload endpoints that are matched by both selectors
                                will be selected by the rule. \n For NetworkPolicy, an
                                empty NamespaceSelector implies that the Selector is limited
                                to selecting only workload endpoints in the same namespace
                                as the NetworkPolicy. \n For NetworkPolicy, `global()`
                                NamespaceSelector implies that the Selector is limited
                                to selecting only GlobalNetworkSet or HostEndpoint. \n
                                For GlobalNetworkPolicy, an empty NamespaceSelector implies
                                the Selector applies to workload endpoints across all
                                namespaces."
                              type: string
                            nets:
                              description: Nets is an optional field that restricts the
                                rule to only apply to traffic that originates from (or
                                terminates at) IP addresses in any of the given subnets.
                              items:
                                type: string
                              type: array
                            notNets:
                              description: NotNets is the negated version of the Nets
                                field.
                              items:
                                type: string
                              type: array
                            notPorts:
                              description: NotPorts is the negated version of the Ports
                                field. Since only some protocols have ports, if any ports
                                are specified it requires the Protocol match in the Rule
                                to be set to "TCP" or "UDP".
                              items:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^.*
                                x-kubernetes-int-or-string: true
                              type: array
                            notSelector:
                              description: NotSelector is the negated version of the Selector
                                field.  See Selector field for subtleties with negated
                                selectors.
                              type: string
                            ports:
                              description: "Ports is an optional field that restricts
                                the rule to only apply to traffic that has a source (destination)
                                port that matches one of these ranges/values. This value
                                is a list of integers or strings that represent ranges
                                of ports. \n Since only some protocols have ports, if
                                any ports are specified it requires the Protocol match
                                in the Rule to be set to \"TCP\" or \"UDP\"."
                              items:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^.*
                                x-kubernetes-int-or-string: true
                              type: array
                            selector:
                              description: "Selector is an optional field that contains
                                a selector expression (see Policy for sample syntax).
                                \ Only traffic that originates from (terminates at) endpoints
                                matching the selector will be matched. \n Note that: in
                                addition to the negated version of the Selector (see NotSelector
                                below), the selector expression syntax itself supports
                                negation.  The two types of negation are subtly different.
                                One negates the set of matched endpoints, the other negates
                                the whole match: \n \tSelector = \"!has(my_label)\" matches
                                packets that are from other Calico-controlled \tendpoints
                                that do not have the label \"my_label\". \n \tNotSelector
                                = \"has(my_label)\" matches packets that are not from
                                Calico-controlled \tendpoints that do have the label \"my_label\".
                                \n The effect is that the latter will accept packets from
                                non-Calico sources whereas the former is limited to packets
                                from Calico-controlled endpoints."
                              type: string
                            serviceAccounts:
                              description: ServiceAccounts is an optional field that restricts
                                the rule to only apply to traffic that originates from
                                (or terminates at) a pod running as a matching service
                                account.
                              properties:
                                names:
                                  description: Names is an optional field that restricts
                                    the rule to only apply to traffic that originates
                                    from (or terminates at) a pod running as a service
                                    account whose name is in the list.
                                  items:
                                    type: string
                                  type: array
                                selector:
                                  description: Selector is an optional field that restricts
                                    the rule to only apply to traffic that originates
                                    from (or terminates at) a pod running as a service
                                    account that matches the given label selector. If
                                    both Names and Selector are specified then they are
                                    AND'ed.
                                  type: string
                              type: object
                            services:
                              description: "Services is an optional field that contains
                                options for matching Kubernetes Services. If specified,
                                only traffic that originates from or terminates at endpoints
                                within the selected service(s) will be matched, and only
                                to/from each endpoint's port. \n Services cannot be specified
                                on the same rule as Selector, NotSelector, NamespaceSelector,
                                Nets, NotNets or ServiceAccounts. \n Ports and NotPorts
                                can only be specified with Services on ingress rules."
                              properties:
                                name:
                                  description: Name specifies the name of a Kubernetes
                                    Service to match.
                                  type: string
                                namespace:
                                  description: Namespace specifies the namespace of the
                                    given Service. If left empty, the rule will match
                                    within this policy's namespace.
                                  type: string
                              type: object
                          type: object
                        http:
                          description: HTTP contains match criteria that apply to HTTP
                            requests.
                          properties:
                            methods:
                              description: Methods is an optional field that restricts
                                the rule to apply only to HTTP requests that use one of
                                the listed HTTP Methods (e.g. GET, PUT, etc.) Multiple
                                methods are OR'd together.
                              items:
                                type: string
                              type: array
                            paths:
                              description: 'Paths is an optional field that restricts
                                the rule to apply to HTTP requests that use one of the
                                listed HTTP Paths. Multiple paths are OR''d together.
                                e.g: - exact: /foo - prefix: /bar NOTE: Each entry may
                                ONLY specify either a `exact` or a `prefix` match. The
                                validator will check for it.'
                              items:
                                description: 'HTTPPath specifies an HTTP path to match.
                                  It may be either of the form: exact: <path>: which matches
                                  the path exactly or prefix: <path-prefix>: which matches
                                  the path prefix'
                                properties:
                                  exact:
                                    type: string
                                  prefix:
                                    type: string
                                type: object
                              type: array
                          type: object
                        icmp:
                          description: ICMP is an optional field that restricts the rule
                            to apply to a specific type and code of ICMP traffic.  This
                            should only be specified if the Protocol field is set to "ICMP"
                            or "ICMPv6".
                          properties:
                            code:
                              description: Match on a specific ICMP code.  If specified,
                                the Type value must also be specified. This is a technical
                                limitation imposed by the kernel's iptables firewall,
                                which Calico uses to enforce the rule.
                              type: integer
                            type:
                              description: Match on a specific ICMP type.  For example
                                a value of 8 refers to ICMP Echo Request (i.e. pings).
                              type: integer
                          type: object
                        ipVersion:
                          description: IPVersion is an optional field that restricts the
                            rule to only match a specific IP version.
                          type: integer
                        metadata:
                          description: Metadata contains additional information for this
                            rule
                          properties:
                            annotations:
                              additionalProperties:
                                type: string
                              description: Annotations is a set of key value pairs that
                                give extra information about the rule
                              type: object
                          type: object
                        notICMP:
                          description: NotICMP is the negated version of the ICMP field.
                          properties:
                            code:
                              description: Match on a specific ICMP code.  If specified,
                                the Type value must also be specified. This is a technical
                                limitation imposed by the kernel's iptables firewall,
                                which Calico uses to enforce the rule.
                              type: integer
                            type:
                              description: Match on a specific ICMP type.  For example
                                a value of 8 refers to ICMP Echo Request (i.e. pings).
                              type: integer
                          type: object
                        notProtocol:
                          anyOf:
                          - type: integer
                          - type: string
                          description: NotProtocol is the negated version of the Protocol
                            field.
                          pattern: ^.*
                          x-kubernetes-int-or-string: true
                        protocol:
                          anyOf:
                          - type: integer
                          - type: string
                          description: "Protocol is an optional field that restricts the
                            rule to only apply to traffic of a specific IP protocol. Required
                            if any of the EntityRules contain Ports (because ports only
                            apply to certain protocols). \n Must be one of these string
                            values: \"TCP\", \"UDP\", \"ICMP\", \"ICMPv6\", \"SCTP\",
                            \"UDPLite\" or an integer in the range 1-255."
                          pattern: ^.*
                          x-kubernetes-int-or-string: true
                        source:
                          description: Source contains the match criteria that apply to
                            source entity.
                          properties:
                            namespaceSelector:
                              description: "NamespaceSelector is an optional field that
                                contains a selector expression. Only traffic that originates
                                from (or terminates at) endpoints within the selected
                                namespaces will be matched. When both NamespaceSelector
                                and another selector are defined on the same rule, then
                                only workload endpoints that are matched by both selectors
                                will be selected by the rule. \n For NetworkPolicy, an
                                empty NamespaceSelector implies that the Selector is limited
                                to selecting only workload endpoints in the same namespace
                                as the NetworkPolicy. \n For NetworkPolicy, `global()`
                                NamespaceSelector implies that the Selector is limited
                                to selecting only GlobalNetworkSet or HostEndpoint. \n
                                For GlobalNetworkPolicy, an empty NamespaceSelector implies
                                the Selector applies to workload endpoints across all
                                namespaces."
                              type: string
                            nets:
                              description: Nets is an optional field that restricts the
                                rule to only apply to traffic that originates from (or
                                terminates at) IP addresses in any of the given subnets.
                              items:
                                type: string
                              type: array
                            notNets:
                              description: NotNets is the negated version of the Nets
                                field.
                              items:
                                type: string
                              type: array
                            notPorts:
                              description: NotPorts is the negated version of the Ports
                                field. Since only some protocols have ports, if any ports
                                are specified it requires the Protocol match in the Rule
                                to be set to "TCP" or "UDP".
                              items:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^.*
                                x-kubernetes-int-or-string: true
                              type: array
                            notSelector:
                              description: NotSelector is the negated version of the Selector
                                field.  See Selector field for subtleties with negated
                                selectors.
                              type: string
                            ports:
                              description: "Ports is an optional field that restricts
                                the rule to only apply to traffic that has a source (destination)
                                port that matches one of these ranges/values. This value
                                is a list of integers or strings that represent ranges
                                of ports. \n Since only some protocols have ports, if
                                any ports are specified it requires the Protocol match
                                in the Rule to be set to \"TCP\" or \"UDP\"."
                              items:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^.*
                                x-kubernetes-int-or-string: true
                              type: array
                            selector:
                              description: "Selector is an optional field that contains
                                a selector expression (see Policy for sample syntax).
                                \ Only traffic that originates from (terminates at) endpoints
                                matching the selector will be matched. \n Note that: in
                                addition to the negated version of the Selector (see NotSelector
                                below), the selector expression syntax itself supports
                                negation.  The two types of negation are subtly different.
                                One negates the set of matched endpoints, the other negates
                                the whole match: \n \tSelector = \"!has(my_label)\" matches
                                packets that are from other Calico-controlled \tendpoints
                                that do not have the label \"my_label\". \n \tNotSelector
                                = \"has(my_label)\" matches packets that are not from
                                Calico-controlled \tendpoints that do have the label \"my_label\".
                                \n The effect is that the latter will accept packets from
                                non-Calico sources whereas the former is limited to packets
                                from Calico-controlled endpoints."
                              type: string
                            serviceAccounts:
                              description: ServiceAccounts is an optional field that restricts
                                the rule to only apply to traffic that originates from
                                (or terminates at) a pod running as a matching service
                                account.
                              properties:
                                names:
                                  description: Names is an optional field that restricts
                                    the rule to only apply to traffic that originates
                                    from (or terminates at) a pod running as a service
                                    account whose name is in the list.
                                  items:
                                    type: string
                                  type: array
                                selector:
                                  description: Selector is an optional field that restricts
                                    the rule to only apply to traffic that originates
                                    from (or terminates at) a pod running as a service
                                    account that matches the given label selector. If
                                    both Names and Selector are specified then they are
                                    AND'ed.
                                  type: string
                              type: object
                            services:
                              description: "Services is an optional field that contains
                                options for matching Kubernetes Services. If specified,
                                only traffic that originates from or terminates at endpoints
                                within the selected service(s) will be matched, and only
                                to/from each endpoint's port. \n Services cannot be specified
                                on the same rule as Selector, NotSelector, NamespaceSelector,
                                Nets, NotNets or ServiceAccounts. \n Ports and NotPorts
                                can only be specified with Services on ingress rules."
                              properties:
                                name:
                                  description: Name specifies the name of a Kubernetes
                                    Service to match.
                                  type: string
                                namespace:
                                  description: Namespace specifies the namespace of the
                                    given Service. If left empty, the rule will match
                                    within this policy's namespace.
                                  type: string
                              type: object
                          type: object
                      required:
                      - action
                      type: object
                    type: array
                  order:
                    description: Order is an optional field that specifies the order in
                      which the policy is applied. Policies with higher "order" are applied
                      after those with lower order.  If the order is omitted, it may be
                      considered to be "infinite" - i.e. the policy will be applied last.  Policies
                      with identical order will be applied in alphanumerical order based
                      on the Policy "Name".
                    type: number
                  selector:
                    description: "The selector is an expression used to pick pick out
                      the endpoints that the policy should be applied to. \n Selector
                      expressions follow this syntax: \n \tlabel == \"string_literal\"
                      \ ->  comparison, e.g. my_label == \"foo bar\" \tlabel != \"string_literal\"
                      \  ->  not equal; also matches if label is not present \tlabel in
                      { \"a\", \"b\", \"c\", ... }  ->  true if the value of label X is
                      one of \"a\", \"b\", \"c\" \tlabel not in { \"a\", \"b\", \"c\",
                      ... }  ->  true if the value of label X is not one of \"a\", \"b\",
                      \"c\" \thas(label_name)  -> True if that label is present \t! expr
                      -> negation of expr \texpr && expr  -> Short-circuit and \texpr
                      || expr  -> Short-circuit or \t( expr ) -> parens for grouping \tall()
                      or the empty selector -> matches all endpoints. \n Label names are
                      allowed to contain alphanumerics, -, _ and /. String literals are
                      more permissive but they do not support escape characters. \n Examples
                      (with made-up labels): \n \ttype == \"webserver\" && deployment
                      == \"prod\" \ttype in {\"frontend\", \"backend\"} \tdeployment !=
                      \"dev\" \t! has(label_name)"
                    type: string
                  serviceAccountSelector:
                    description: ServiceAccountSelector is an optional field for an expression
                      used to select a pod based on service accounts.
                    type: string
                  types:
                    description: "Types indicates whether this policy applies to ingress,
                      or to egress, or to both.  When not explicitly specified (and so
                      the value on creation is empty or nil), Calico defaults Types according
                      to what Ingress and Egress are present in the policy.  The default
                      is: \n - [ PolicyTypeIngress ], if there are no Egress rules (including
                      the case where there are   also no Ingress rules) \n - [ PolicyTypeEgress
                      ], if there are Egress rules but no Ingress rules \n - [ PolicyTypeIngress,
                      PolicyTypeEgress ], if there are both Ingress and Egress rules.
                      \n When the policy is read back again, Types will always be one
                      of these values, never empty or nil."
                    items:
                      description: PolicyType enumerates the possible values of the PolicySpec
                        Types field.
                      type: string
                    type: array
                type: object
            type: object
        served: true
        storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---
    # Source: crds/calico/kdd/crd.projectcalico.org_networksets.yaml
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      name: networksets.crd.projectcalico.org
    spec:
      group: crd.projectcalico.org
      names:
        kind: NetworkSet
        listKind: NetworkSetList
        plural: networksets
        singular: networkset
      scope: Namespaced
      versions:
      - name: v1
        schema:
          openAPIV3Schema:
            description: NetworkSet is the Namespaced-equivalent of the GlobalNetworkSet.
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: NetworkSetSpec contains the specification for a NetworkSet
                  resource.
                properties:
                  nets:
                    description: The list of IP networks that belong to this set.
                    items:
                      type: string
                    type: array
                type: object
            type: object
        served: true
        storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---
    # Source: crds/operator.tigera.io_apiservers_crd.yaml
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: v0.3.0
      name: apiservers.operator.tigera.io
    spec:
      group: operator.tigera.io
      names:
        kind: APIServer
        listKind: APIServerList
        plural: apiservers
        singular: apiserver
      scope: Cluster
      versions:
      - name: v1
        schema:
          openAPIV3Schema:
            description: APIServer installs the Tigera API server and related resources.
              At most one instance of this resource is supported. It must be named "tigera-secure".
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: Specification of the desired state for the Tigera API server.
                type: object
              status:
                description: Most recently observed status for the Tigera API server.
                properties:
                  state:
                    description: State provides user-readable status.
                    type: string
                type: object
            type: object
        served: true
        storage: true
        subresources:
          status: {}

    ---
    # Source: crds/operator.tigera.io_imagesets_crd.yaml
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: v0.3.0
      name: imagesets.operator.tigera.io
    spec:
      group: operator.tigera.io
      names:
        kind: ImageSet
        listKind: ImageSetList
        plural: imagesets
        singular: imageset
      scope: Cluster
      versions:
      - name: v1
        schema:
          openAPIV3Schema:
            description: ImageSet is used to specify image digests for the images that
              the operator deploys. The name of the ImageSet is expected to be in the
              format `<variang>-<release>`. The `variant` used is `enterprise` if the
              InstallationSpec Variant is `TigeraSecureEnterprise` otherwise it is `calico`.
              The `release` must match the version of the variant that the operator is
              built to deploy, this version can be obtained by passing the `--version`
              flag to the operator binary.
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: ImageSetSpec defines the desired state of ImageSet.
                properties:
                  images:
                    description: Images is the list of images to use digests. All images
                      that the operator will deploy must be specified.
                    items:
                      properties:
                        digest:
                          description: Digest is the image identifier that will be used
                            for the Image. The field should not include a leading `@`
                            and must be prefixed with `sha256:`.
                          type: string
                        image:
                          description: Image is an image that the operator deploys and
                            instead of using the built in tag the operator will use the
                            Digest for the image identifier. The value should be the image
                            name without registry or tag or digest. For the image `docker.io/calico/node:v3.17.1`
                            it should be represented as `calico/node`
                          type: string
                      required:
                      - digest
                      - image
                      type: object
                    type: array
                type: object
            type: object
        served: true
        storage: true
        subresources:
          status: {}
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---
    # Source: crds/operator.tigera.io_installations_crd.yaml
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: v0.3.0
      name: installations.operator.tigera.io
    spec:
      group: operator.tigera.io
      names:
        kind: Installation
        listKind: InstallationList
        plural: installations
        singular: installation
      scope: Cluster
      versions:
      - name: v1
        schema:
          openAPIV3Schema:
            description: Installation configures an installation of Calico or Calico Enterprise.
              At most one instance of this resource is supported. It must be named "default".
              The Installation API installs core networking and network policy components,
              and provides general install-time configuration.
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: Specification of the desired state for the Calico or Calico
                  Enterprise installation.
                properties:
                  calicoNetwork:
                    description: CalicoNetwork specifies networking configuration options
                      for Calico.
                    properties:
                      bgp:
                        description: BGP configures whether or not to enable Calico's
                          BGP capabilities.
                        enum:
                        - Enabled
                        - Disabled
                        type: string
                      containerIPForwarding:
                        description: 'ContainerIPForwarding configures whether ip forwarding
                          will be enabled for containers in the CNI configuration. Default:
                          Disabled'
                        enum:
                        - Enabled
                        - Disabled
                        type: string
                      hostPorts:
                        description: 'HostPorts configures whether or not Calico will
                          support Kubernetes HostPorts. Valid only when using the Calico
                          CNI plugin. Default: Enabled'
                        enum:
                        - Enabled
                        - Disabled
                        type: string
                      ipPools:
                        description: IPPools contains a list of IP pools to create if
                          none exist. At most one IP pool of each address family may be
                          specified. If omitted, a single pool will be configured if needed.
                        items:
                          properties:
                            blockSize:
                              description: 'BlockSize specifies the CIDR prefex length
                                to use when allocating per-node IP blocks from the main
                                IP pool CIDR. Default: 26 (IPv4), 122 (IPv6)'
                              format: int32
                              type: integer
                            cidr:
                              description: CIDR contains the address range for the IP
                                Pool in classless inter-domain routing format.
                              type: string
                            encapsulation:
                              description: 'Encapsulation specifies the encapsulation
                                type that will be used with the IP Pool. Default: IPIP'
                              enum:
                              - IPIPCrossSubnet
                              - IPIP
                              - VXLAN
                              - VXLANCrossSubnet
                              - None
                              type: string
                            natOutgoing:
                              description: 'NATOutgoing specifies if NAT will be enabled
                                or disabled for outgoing traffic. Default: Enabled'
                              enum:
                              - Enabled
                              - Disabled
                              type: string
                            nodeSelector:
                              description: 'NodeSelector specifies the node selector that
                                will be set for the IP Pool. Default: ''all()'''
                              type: string
                          required:
                          - cidr
                          type: object
                        type: array
                      linuxDataplane:
                        description: 'LinuxDataplane is used to select the dataplane used
                          for Linux nodes. In particular, it causes the operator to add
                          required mounts and environment variables for the particular
                          dataplane. If not specified, iptables mode is used. Default:
                          Iptables'
                        enum:
                        - Iptables
                        - BPF
                        - VPP
                        type: string
                      mtu:
                        description: MTU specifies the maximum transmission unit to use
                          on the pod network. If not specified, Calico will perform MTU
                          auto-detection based on the cluster network.
                        format: int32
                        type: integer
                      multiInterfaceMode:
                        description: 'MultiInterfaceMode configures what will configure
                          multiple interface per pod. Only valid for Calico Enterprise
                          installations using the Calico CNI plugin. Default: None'
                        enum:
                        - None
                        - Multus
                        type: string
                      nodeAddressAutodetectionV4:
                        description: NodeAddressAutodetectionV4 specifies an approach
                          to automatically detect node IPv4 addresses. If not specified,
                          will use default auto-detection settings to acquire an IPv4
                          address for each node.
                        properties:
                          canReach:
                            description: CanReach enables IP auto-detection based on which
                              source address on the node is used to reach the specified
                              IP or domain.
                            type: string
                          cidrs:
                            description: CIDRS enables IP auto-detection based on which
                              addresses on the nodes are within one of the provided CIDRs.
                            items:
                              type: string
                            type: array
                          firstFound:
                            description: FirstFound uses default interface matching parameters
                              to select an interface, performing best-effort filtering
                              based on well-known interface names.
                            type: boolean
                          interface:
                            description: Interface enables IP auto-detection based on
                              interfaces that match the given regex.
                            type: string
                          kubernetes:
                            description: Kubernetes configures Calico to detect node addresses
                              based on the Kubernetes API.
                            enum:
                            - NodeInternalIP
                            type: string
                          skipInterface:
                            description: SkipInterface enables IP auto-detection based
                              on interfaces that do not match the given regex.
                            type: string
                        type: object
                      nodeAddressAutodetectionV6:
                        description: NodeAddressAutodetectionV6 specifies an approach
                          to automatically detect node IPv6 addresses. If not specified,
                          IPv6 addresses will not be auto-detected.
                        properties:
                          canReach:
                            description: CanReach enables IP auto-detection based on which
                              source address on the node is used to reach the specified
                              IP or domain.
                            type: string
                          cidrs:
                            description: CIDRS enables IP auto-detection based on which
                              addresses on the nodes are within one of the provided CIDRs.
                            items:
                              type: string
                            type: array
                          firstFound:
                            description: FirstFound uses default interface matching parameters
                              to select an interface, performing best-effort filtering
                              based on well-known interface names.
                            type: boolean
                          interface:
                            description: Interface enables IP auto-detection based on
                              interfaces that match the given regex.
                            type: string
                          kubernetes:
                            description: Kubernetes configures Calico to detect node addresses
                              based on the Kubernetes API.
                            enum:
                            - NodeInternalIP
                            type: string
                          skipInterface:
                            description: SkipInterface enables IP auto-detection based
                              on interfaces that do not match the given regex.
                            type: string
                        type: object
                    type: object
                  certificateManagement:
                    description: CertificateManagement configures pods to submit a CertificateSigningRequest
                      to the certificates.k8s.io/v1beta1 API in order to obtain TLS certificates.
                      This feature requires that you bring your own CSR signing and approval
                      process, otherwise pods will be stuck during initialization.
                    properties:
                      caCert:
                        description: Certificate of the authority that signs the CertificateSigningRequests
                          in PEM format.
                        format: byte
                        type: string
                      keyAlgorithm:
                        description: 'Specify the algorithm used by pods to generate a
                          key pair that is associated with the X.509 certificate request.
                          Default: RSAWithSize2048'
                        enum:
                        - ""
                        - RSAWithSize2048
                        - RSAWithSize4096
                        - RSAWithSize8192
                        - ECDSAWithCurve256
                        - ECDSAWithCurve384
                        - ECDSAWithCurve521
                        type: string
                      signatureAlgorithm:
                        description: 'Specify the algorithm used for the signature of
                          the X.509 certificate request. Default: SHA256WithRSA'
                        enum:
                        - ""
                        - SHA256WithRSA
                        - SHA384WithRSA
                        - SHA512WithRSA
                        - ECDSAWithSHA256
                        - ECDSAWithSHA384
                        - ECDSAWithSHA512
                        type: string
                      signerName:
                        description: 'When a CSR is issued to the certificates.k8s.io
                          API, the signerName is added to the request in order to accommodate
                          for clusters with multiple signers. Must be formatted as: `<my-domain>/<my-signername>`.'
                        type: string
                    required:
                    - caCert
                    - signerName
                    type: object
                  cni:
                    description: CNI specifies the CNI that will be used by this installation.
                    properties:
                      ipam:
                        description: IPAM specifies the pod IP address management that
                          will be used in the Calico or Calico Enterprise installation.
                        properties:
                          type:
                            description: "Specifies the IPAM plugin that will be used
                              in the Calico or Calico Enterprise installation. * For CNI
                              Plugin Calico, this field defaults to Calico. * For CNI
                              Plugin GKE, this field defaults to HostLocal. * For CNI
                              Plugin AzureVNET, this field defaults to AzureVNET. * For
                              CNI Plugin AmazonVPC, this field defaults to AmazonVPC.
                              \n The IPAM plugin is installed and configured only if the
                              CNI plugin is set to Calico, for all other values of the
                              CNI plugin the plugin binaries and CNI config is a dependency
                              that is expected to be installed separately. \n Default:
                              Calico"
                            enum:
                            - Calico
                            - HostLocal
                            - AmazonVPC
                            - AzureVNET
                            type: string
                        required:
                        - type
                        type: object
                      type:
                        description: "Specifies the CNI plugin that will be used in the
                          Calico or Calico Enterprise installation. * For KubernetesProvider
                          GKE, this field defaults to GKE. * For KubernetesProvider AKS,
                          this field defaults to AzureVNET. * For KubernetesProvider EKS,
                          this field defaults to AmazonVPC. * If aws-node daemonset exists
                          in kube-system when the Installation resource is created, this
                          field defaults to AmazonVPC. * For all other cases this field
                          defaults to Calico. \n For the value Calico, the CNI plugin
                          binaries and CNI config will be installed as part of deployment,
                          for all other values the CNI plugin binaries and CNI config
                          is a dependency that is expected to be installed separately.
                          \n Default: Calico"
                        enum:
                        - Calico
                        - GKE
                        - AmazonVPC
                        - AzureVNET
                        type: string
                    required:
                    - type
                    type: object
                  componentResources:
                    description: ComponentResources can be used to customize the resource
                      requirements for each component. Node, Typha, and KubeControllers
                      are supported for installations.
                    items:
                      description: The ComponentResource struct associates a ResourceRequirements
                        with a component by name
                      properties:
                        componentName:
                          description: ComponentName is an enum which identifies the component
                          enum:
                          - Node
                          - Typha
                          - KubeControllers
                          type: string
                        resourceRequirements:
                          description: ResourceRequirements allows customization of limits
                            and requests for compute resources such as cpu and memory.
                          properties:
                            limits:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Limits describes the maximum amount of compute
                                resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                              type: object
                            requests:
                              additionalProperties:
                                anyOf:
                                - type: integer
                                - type: string
                                pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                x-kubernetes-int-or-string: true
                              description: 'Requests describes the minimum amount of compute
                                resources required. If Requests is omitted for a container,
                                it defaults to Limits if that is explicitly specified,
                                otherwise to an implementation-defined value. More info:
                                https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                              type: object
                          type: object
                      required:
                      - componentName
                      - resourceRequirements
                      type: object
                    type: array
                  controlPlaneNodeSelector:
                    additionalProperties:
                      type: string
                    description: ControlPlaneNodeSelector is used to select control plane
                      nodes on which to run Calico components. This is globally applied
                      to all resources created by the operator excluding daemonsets.
                    type: object
                  controlPlaneReplicas:
                    description: ControlPlaneReplicas defines how many replicas of the
                      control plane core components will be deployed. This field applies
                      to all control plane components that support High Availability.
                      Defaults to 2.
                    format: int32
                    type: integer
                  controlPlaneTolerations:
                    description: ControlPlaneTolerations specify tolerations which are
                      then globally applied to all resources created by the operator.
                    items:
                      description: The pod this Toleration is attached to tolerates any
                        taint that matches the triple <key,value,effect> using the matching
                        operator <operator>.
                      properties:
                        effect:
                          description: Effect indicates the taint effect to match. Empty
                            means match all taint effects. When specified, allowed values
                            are NoSchedule, PreferNoSchedule and NoExecute.
                          type: string
                        key:
                          description: Key is the taint key that the toleration applies
                            to. Empty means match all taint keys. If the key is empty,
                            operator must be Exists; this combination means to match all
                            values and all keys.
                          type: string
                        operator:
                          description: Operator represents a key's relationship to the
                            value. Valid operators are Exists and Equal. Defaults to Equal.
                            Exists is equivalent to wildcard for value, so that a pod
                            can tolerate all taints of a particular category.
                          type: string
                        tolerationSeconds:
                          description: TolerationSeconds represents the period of time
                            the toleration (which must be of effect NoExecute, otherwise
                            this field is ignored) tolerates the taint. By default, it
                            is not set, which means tolerate the taint forever (do not
                            evict). Zero and negative values will be treated as 0 (evict
                            immediately) by the system.
                          format: int64
                          type: integer
                        value:
                          description: Value is the taint value the toleration matches
                            to. If the operator is Exists, the value should be empty,
                            otherwise just a regular string.
                          type: string
                      type: object
                    type: array
                  flexVolumePath:
                    description: FlexVolumePath optionally specifies a custom path for
                      FlexVolume. If not specified, FlexVolume will be enabled by default.
                      If set to 'None', FlexVolume will be disabled. The default is based
                      on the kubernetesProvider.
                    type: string
                  imagePath:
                    description: "ImagePath allows for the path part of an image to be
                      specified. If specified then the specified value will be used as
                      the image path for each image. If not specified or empty, the default
                      for each image will be used. A special case value, UseDefault, is
                      supported to explicitly specify the default image path will be used
                      for each image. \n Image format:    `<registry><imagePath>/<imagePrefix><imageName>:<image-tag>`
                      \n This option allows configuring the `<imagePath>` portion of the
                      above format."
                    type: string
                  imagePrefix:
                    description: "ImagePrefix allows for the prefix part of an image to
                      be specified. If specified then the given value will be used as
                      a prefix on each image. If not specified or empty, no prefix will
                      be used. A special case value, UseDefault, is supported to explicitly
                      specify the default image prefix will be used for each image. \n
                      Image format:    `<registry><imagePath>/<imagePrefix><imageName>:<image-tag>`
                      \n This option allows configuring the `<imagePrefix>` portion of
                      the above format."
                    type: string
                  imagePullSecrets:
                    description: ImagePullSecrets is an array of references to container
                      registry pull secrets to use. These are applied to all images to
                      be pulled.
                    items:
                      description: LocalObjectReference contains enough information to
                        let you locate the referenced object inside the same namespace.
                      properties:
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                            TODO: Add other useful fields. apiVersion, kind, uid?'
                          type: string
                      type: object
                    type: array
                  kubernetesProvider:
                    description: KubernetesProvider specifies a particular provider of
                      the Kubernetes platform and enables provider-specific configuration.
                      If the specified value is empty, the Operator will attempt to automatically
                      determine the current provider. If the specified value is not empty,
                      the Operator will still attempt auto-detection, but will additionally
                      compare the auto-detected value to the specified value to confirm
                      they match.
                    enum:
                    - ""
                    - EKS
                    - GKE
                    - AKS
                    - OpenShift
                    - DockerEnterprise
                    type: string
                  nodeMetricsPort:
                    description: NodeMetricsPort specifies which port calico/node serves
                      prometheus metrics on. By default, metrics are not enabled. If specified,
                      this overrides any FelixConfiguration resources which may exist.
                      If omitted, then prometheus metrics may still be configured through
                      FelixConfiguration.
                    format: int32
                    type: integer
                  nodeUpdateStrategy:
                    description: NodeUpdateStrategy can be used to customize the desired
                      update strategy, such as the MaxUnavailable field.
                    properties:
                      rollingUpdate:
                        description: 'Rolling update config params. Present only if type
                          = "RollingUpdate". --- TODO: Update this to follow our convention
                          for oneOf, whatever we decide it to be. Same as Deployment `strategy.rollingUpdate`.
                          See https://github.com/kubernetes/kubernetes/issues/35345'
                        properties:
                          maxSurge:
                            anyOf:
                            - type: integer
                            - type: string
                            description: 'The maximum number of nodes with an existing
                              available DaemonSet pod that can have an updated DaemonSet
                              pod during during an update. Value can be an absolute number
                              (ex: 5) or a percentage of desired pods (ex: 10%). This
                              can not be 0 if MaxUnavailable is 0. Absolute number is
                              calculated from percentage by rounding up to a minimum of
                              1. Default value is 0. Example: when this is set to 30%,
                              at most 30% of the total number of nodes that should be
                              running the daemon pod (i.e. status.desiredNumberScheduled)
                              can have their a new pod created before the old pod is marked
                              as deleted. The update starts by launching new pods on 30%
                              of nodes. Once an updated pod is available (Ready for at
                              least minReadySeconds) the old DaemonSet pod on that node
                              is marked deleted. If the old pod becomes unavailable for
                              any reason (Ready transitions to false, is evicted, or is
                              drained) an updated pod is immediatedly created on that
                              node without considering surge limits. Allowing surge implies
                              the possibility that the resources consumed by the daemonset
                              on any given node can double if the readiness check fails,
                              and so resource intensive daemonsets should take into account
                              that they may cause evictions during disruption. This is
                              an alpha field and requires enabling DaemonSetUpdateSurge
                              feature gate.'
                            x-kubernetes-int-or-string: true
                          maxUnavailable:
                            anyOf:
                            - type: integer
                            - type: string
                            description: 'The maximum number of DaemonSet pods that can
                              be unavailable during the update. Value can be an absolute
                              number (ex: 5) or a percentage of total number of DaemonSet
                              pods at the start of the update (ex: 10%). Absolute number
                              is calculated from percentage by rounding down to a minimum
                              of one. This cannot be 0 if MaxSurge is 0 Default value
                              is 1. Example: when this is set to 30%, at most 30% of the
                              total number of nodes that should be running the daemon
                              pod (i.e. status.desiredNumberScheduled) can have their
                              pods stopped for an update at any given time. The update
                              starts by stopping at most 30% of those DaemonSet pods and
                              then brings up new DaemonSet pods in their place. Once the
                              new pods are available, it then proceeds onto other DaemonSet
                              pods, thus ensuring that at least 70% of original number
                              of DaemonSet pods are available at all times during the
                              update.'
                            x-kubernetes-int-or-string: true
                        type: object
                      type:
                        description: Type of daemon set update. Can be "RollingUpdate"
                          or "OnDelete". Default is RollingUpdate.
                        type: string
                    type: object
                  nonPrivileged:
                    description: NonPrivileged configures Calico to be run in non-privileged
                      containers as non-root users where possible.
                    type: string
                  registry:
                    description: "Registry is the default Docker registry used for component
                      Docker images. If specified then the given value must end with a
                      slash character (`/`) and all images will be pulled from this registry.
                      If not specified then the default registries will be used. A special
                      case value, UseDefault, is supported to explicitly specify the default
                      registries will be used. \n Image format:    `<registry><imagePath>/<imagePrefix><imageName>:<image-tag>`
                      \n This option allows configuring the `<registry>` portion of the
                      above format."
                    type: string
                  typhaAffinity:
                    description: TyphaAffinity allows configuration of node affinity characteristics
                      for Typha pods.
                    properties:
                      nodeAffinity:
                        description: NodeAffinity describes node affinity scheduling rules
                          for typha.
                        properties:
                          preferredDuringSchedulingIgnoredDuringExecution:
                            description: The scheduler will prefer to schedule pods to
                              nodes that satisfy the affinity expressions specified by
                              this field, but it may choose a node that violates one or
                              more of the expressions.
                            items:
                              description: An empty preferred scheduling term matches
                                all objects with implicit weight 0 (i.e. it's a no-op).
                                A null preferred scheduling term matches no objects (i.e.
                                is also a no-op).
                              properties:
                                preference:
                                  description: A node selector term, associated with the
                                    corresponding weight.
                                  properties:
                                    matchExpressions:
                                      description: A list of node selector requirements
                                        by node's labels.
                                      items:
                                        description: A node selector requirement is a
                                          selector that contains values, a key, and an
                                          operator that relates the key and values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship
                                              to a set of values. Valid operators are
                                              In, NotIn, Exists, DoesNotExist. Gt, and
                                              Lt.
                                            type: string
                                          values:
                                            description: An array of string values. If
                                              the operator is In or NotIn, the values
                                              array must be non-empty. If the operator
                                              is Exists or DoesNotExist, the values array
                                              must be empty. If the operator is Gt or
                                              Lt, the values array must have a single
                                              element, which will be interpreted as an
                                              integer. This array is replaced during a
                                              strategic merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchFields:
                                      description: A list of node selector requirements
                                        by node's fields.
                                      items:
                                        description: A node selector requirement is a
                                          selector that contains values, a key, and an
                                          operator that relates the key and values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship
                                              to a set of values. Valid operators are
                                              In, NotIn, Exists, DoesNotExist. Gt, and
                                              Lt.
                                            type: string
                                          values:
                                            description: An array of string values. If
                                              the operator is In or NotIn, the values
                                              array must be non-empty. If the operator
                                              is Exists or DoesNotExist, the values array
                                              must be empty. If the operator is Gt or
                                              Lt, the values array must have a single
                                              element, which will be interpreted as an
                                              integer. This array is replaced during a
                                              strategic merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                  type: object
                                weight:
                                  description: Weight associated with matching the corresponding
                                    nodeSelectorTerm, in the range 1-100.
                                  format: int32
                                  type: integer
                              required:
                              - preference
                              - weight
                              type: object
                            type: array
                          requiredDuringSchedulingIgnoredDuringExecution:
                            description: 'WARNING: Please note that if the affinity requirements
                              specified by this field are not met at scheduling time,
                              the pod will NOT be scheduled onto the node. There is no
                              fallback to another affinity rules with this setting. This
                              may cause networking disruption or even catastrophic failure!
                              PreferredDuringSchedulingIgnoredDuringExecution should be
                              used for affinity unless there is a specific well understood
                              reason to use RequiredDuringSchedulingIgnoredDuringExecution
                              and you can guarantee that the RequiredDuringSchedulingIgnoredDuringExecution
                              will always have sufficient nodes to satisfy the requirement.
                              NOTE: RequiredDuringSchedulingIgnoredDuringExecution is
                              set by default for AKS nodes, to avoid scheduling Typhas
                              on virtual-nodes. If the affinity requirements specified
                              by this field cease to be met at some point during pod execution
                              (e.g. due to an update), the system may or may not try to
                              eventually evict the pod from its node.'
                            properties:
                              nodeSelectorTerms:
                                description: Required. A list of node selector terms.
                                  The terms are ORed.
                                items:
                                  description: A null or empty node selector term matches
                                    no objects. The requirements of them are ANDed. The
                                    TopologySelectorTerm type implements a subset of the
                                    NodeSelectorTerm.
                                  properties:
                                    matchExpressions:
                                      description: A list of node selector requirements
                                        by node's labels.
                                      items:
                                        description: A node selector requirement is a
                                          selector that contains values, a key, and an
                                          operator that relates the key and values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship
                                              to a set of values. Valid operators are
                                              In, NotIn, Exists, DoesNotExist. Gt, and
                                              Lt.
                                            type: string
                                          values:
                                            description: An array of string values. If
                                              the operator is In or NotIn, the values
                                              array must be non-empty. If the operator
                                              is Exists or DoesNotExist, the values array
                                              must be empty. If the operator is Gt or
                                              Lt, the values array must have a single
                                              element, which will be interpreted as an
                                              integer. This array is replaced during a
                                              strategic merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchFields:
                                      description: A list of node selector requirements
                                        by node's fields.
                                      items:
                                        description: A node selector requirement is a
                                          selector that contains values, a key, and an
                                          operator that relates the key and values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship
                                              to a set of values. Valid operators are
                                              In, NotIn, Exists, DoesNotExist. Gt, and
                                              Lt.
                                            type: string
                                          values:
                                            description: An array of string values. If
                                              the operator is In or NotIn, the values
                                              array must be non-empty. If the operator
                                              is Exists or DoesNotExist, the values array
                                              must be empty. If the operator is Gt or
                                              Lt, the values array must have a single
                                              element, which will be interpreted as an
                                              integer. This array is replaced during a
                                              strategic merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                  type: object
                                type: array
                            required:
                            - nodeSelectorTerms
                            type: object
                        type: object
                    type: object
                  typhaMetricsPort:
                    description: TyphaMetricsPort specifies which port calico/typha serves
                      prometheus metrics on. By default, metrics are not enabled.
                    format: int32
                    type: integer
                  variant:
                    description: 'Variant is the product to install - one of Calico or
                      TigeraSecureEnterprise Default: Calico'
                    enum:
                    - Calico
                    - TigeraSecureEnterprise
                    type: string
                type: object
              status:
                description: Most recently observed state for the Calico or Calico Enterprise
                  installation.
                properties:
                  computed:
                    description: Computed is the final installation including overlaid
                      resources.
                    properties:
                      calicoNetwork:
                        description: CalicoNetwork specifies networking configuration
                          options for Calico.
                        properties:
                          bgp:
                            description: BGP configures whether or not to enable Calico's
                              BGP capabilities.
                            enum:
                            - Enabled
                            - Disabled
                            type: string
                          containerIPForwarding:
                            description: 'ContainerIPForwarding configures whether ip
                              forwarding will be enabled for containers in the CNI configuration.
                              Default: Disabled'
                            enum:
                            - Enabled
                            - Disabled
                            type: string
                          hostPorts:
                            description: 'HostPorts configures whether or not Calico will
                              support Kubernetes HostPorts. Valid only when using the
                              Calico CNI plugin. Default: Enabled'
                            enum:
                            - Enabled
                            - Disabled
                            type: string
                          ipPools:
                            description: IPPools contains a list of IP pools to create
                              if none exist. At most one IP pool of each address family
                              may be specified. If omitted, a single pool will be configured
                              if needed.
                            items:
                              properties:
                                blockSize:
                                  description: 'BlockSize specifies the CIDR prefex length
                                    to use when allocating per-node IP blocks from the
                                    main IP pool CIDR. Default: 26 (IPv4), 122 (IPv6)'
                                  format: int32
                                  type: integer
                                cidr:
                                  description: CIDR contains the address range for the
                                    IP Pool in classless inter-domain routing format.
                                  type: string
                                encapsulation:
                                  description: 'Encapsulation specifies the encapsulation
                                    type that will be used with the IP Pool. Default:
                                    IPIP'
                                  enum:
                                  - IPIPCrossSubnet
                                  - IPIP
                                  - VXLAN
                                  - VXLANCrossSubnet
                                  - None
                                  type: string
                                natOutgoing:
                                  description: 'NATOutgoing specifies if NAT will be enabled
                                    or disabled for outgoing traffic. Default: Enabled'
                                  enum:
                                  - Enabled
                                  - Disabled
                                  type: string
                                nodeSelector:
                                  description: 'NodeSelector specifies the node selector
                                    that will be set for the IP Pool. Default: ''all()'''
                                  type: string
                              required:
                              - cidr
                              type: object
                            type: array
                          linuxDataplane:
                            description: 'LinuxDataplane is used to select the dataplane
                              used for Linux nodes. In particular, it causes the operator
                              to add required mounts and environment variables for the
                              particular dataplane. If not specified, iptables mode is
                              used. Default: Iptables'
                            enum:
                            - Iptables
                            - BPF
                            - VPP
                            type: string
                          mtu:
                            description: MTU specifies the maximum transmission unit to
                              use on the pod network. If not specified, Calico will perform
                              MTU auto-detection based on the cluster network.
                            format: int32
                            type: integer
                          multiInterfaceMode:
                            description: 'MultiInterfaceMode configures what will configure
                              multiple interface per pod. Only valid for Calico Enterprise
                              installations using the Calico CNI plugin. Default: None'
                            enum:
                            - None
                            - Multus
                            type: string
                          nodeAddressAutodetectionV4:
                            description: NodeAddressAutodetectionV4 specifies an approach
                              to automatically detect node IPv4 addresses. If not specified,
                              will use default auto-detection settings to acquire an IPv4
                              address for each node.
                            properties:
                              canReach:
                                description: CanReach enables IP auto-detection based
                                  on which source address on the node is used to reach
                                  the specified IP or domain.
                                type: string
                              cidrs:
                                description: CIDRS enables IP auto-detection based on
                                  which addresses on the nodes are within one of the provided
                                  CIDRs.
                                items:
                                  type: string
                                type: array
                              firstFound:
                                description: FirstFound uses default interface matching
                                  parameters to select an interface, performing best-effort
                                  filtering based on well-known interface names.
                                type: boolean
                              interface:
                                description: Interface enables IP auto-detection based
                                  on interfaces that match the given regex.
                                type: string
                              kubernetes:
                                description: Kubernetes configures Calico to detect node
                                  addresses based on the Kubernetes API.
                                enum:
                                - NodeInternalIP
                                type: string
                              skipInterface:
                                description: SkipInterface enables IP auto-detection based
                                  on interfaces that do not match the given regex.
                                type: string
                            type: object
                          nodeAddressAutodetectionV6:
                            description: NodeAddressAutodetectionV6 specifies an approach
                              to automatically detect node IPv6 addresses. If not specified,
                              IPv6 addresses will not be auto-detected.
                            properties:
                              canReach:
                                description: CanReach enables IP auto-detection based
                                  on which source address on the node is used to reach
                                  the specified IP or domain.
                                type: string
                              cidrs:
                                description: CIDRS enables IP auto-detection based on
                                  which addresses on the nodes are within one of the provided
                                  CIDRs.
                                items:
                                  type: string
                                type: array
                              firstFound:
                                description: FirstFound uses default interface matching
                                  parameters to select an interface, performing best-effort
                                  filtering based on well-known interface names.
                                type: boolean
                              interface:
                                description: Interface enables IP auto-detection based
                                  on interfaces that match the given regex.
                                type: string
                              kubernetes:
                                description: Kubernetes configures Calico to detect node
                                  addresses based on the Kubernetes API.
                                enum:
                                - NodeInternalIP
                                type: string
                              skipInterface:
                                description: SkipInterface enables IP auto-detection based
                                  on interfaces that do not match the given regex.
                                type: string
                            type: object
                        type: object
                      certificateManagement:
                        description: CertificateManagement configures pods to submit a
                          CertificateSigningRequest to the certificates.k8s.io/v1beta1
                          API in order to obtain TLS certificates. This feature requires
                          that you bring your own CSR signing and approval process, otherwise
                          pods will be stuck during initialization.
                        properties:
                          caCert:
                            description: Certificate of the authority that signs the CertificateSigningRequests
                              in PEM format.
                            format: byte
                            type: string
                          keyAlgorithm:
                            description: 'Specify the algorithm used by pods to generate
                              a key pair that is associated with the X.509 certificate
                              request. Default: RSAWithSize2048'
                            enum:
                            - ""
                            - RSAWithSize2048
                            - RSAWithSize4096
                            - RSAWithSize8192
                            - ECDSAWithCurve256
                            - ECDSAWithCurve384
                            - ECDSAWithCurve521
                            type: string
                          signatureAlgorithm:
                            description: 'Specify the algorithm used for the signature
                              of the X.509 certificate request. Default: SHA256WithRSA'
                            enum:
                            - ""
                            - SHA256WithRSA
                            - SHA384WithRSA
                            - SHA512WithRSA
                            - ECDSAWithSHA256
                            - ECDSAWithSHA384
                            - ECDSAWithSHA512
                            type: string
                          signerName:
                            description: 'When a CSR is issued to the certificates.k8s.io
                              API, the signerName is added to the request in order to
                              accommodate for clusters with multiple signers. Must be
                              formatted as: `<my-domain>/<my-signername>`.'
                            type: string
                        required:
                        - caCert
                        - signerName
                        type: object
                      cni:
                        description: CNI specifies the CNI that will be used by this installation.
                        properties:
                          ipam:
                            description: IPAM specifies the pod IP address management
                              that will be used in the Calico or Calico Enterprise installation.
                            properties:
                              type:
                                description: "Specifies the IPAM plugin that will be used
                                  in the Calico or Calico Enterprise installation. * For
                                  CNI Plugin Calico, this field defaults to Calico. *
                                  For CNI Plugin GKE, this field defaults to HostLocal.
                                  * For CNI Plugin AzureVNET, this field defaults to AzureVNET.
                                  * For CNI Plugin AmazonVPC, this field defaults to AmazonVPC.
                                  \n The IPAM plugin is installed and configured only
                                  if the CNI plugin is set to Calico, for all other values
                                  of the CNI plugin the plugin binaries and CNI config
                                  is a dependency that is expected to be installed separately.
                                  \n Default: Calico"
                                enum:
                                - Calico
                                - HostLocal
                                - AmazonVPC
                                - AzureVNET
                                type: string
                            required:
                            - type
                            type: object
                          type:
                            description: "Specifies the CNI plugin that will be used in
                              the Calico or Calico Enterprise installation. * For KubernetesProvider
                              GKE, this field defaults to GKE. * For KubernetesProvider
                              AKS, this field defaults to AzureVNET. * For KubernetesProvider
                              EKS, this field defaults to AmazonVPC. * If aws-node daemonset
                              exists in kube-system when the Installation resource is
                              created, this field defaults to AmazonVPC. * For all other
                              cases this field defaults to Calico. \n For the value Calico,
                              the CNI plugin binaries and CNI config will be installed
                              as part of deployment, for all other values the CNI plugin
                              binaries and CNI config is a dependency that is expected
                              to be installed separately. \n Default: Calico"
                            enum:
                            - Calico
                            - GKE
                            - AmazonVPC
                            - AzureVNET
                            type: string
                        required:
                        - type
                        type: object
                      componentResources:
                        description: ComponentResources can be used to customize the resource
                          requirements for each component. Node, Typha, and KubeControllers
                          are supported for installations.
                        items:
                          description: The ComponentResource struct associates a ResourceRequirements
                            with a component by name
                          properties:
                            componentName:
                              description: ComponentName is an enum which identifies the
                                component
                              enum:
                              - Node
                              - Typha
                              - KubeControllers
                              type: string
                            resourceRequirements:
                              description: ResourceRequirements allows customization of
                                limits and requests for compute resources such as cpu
                                and memory.
                              properties:
                                limits:
                                  additionalProperties:
                                    anyOf:
                                    - type: integer
                                    - type: string
                                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                    x-kubernetes-int-or-string: true
                                  description: 'Limits describes the maximum amount of
                                    compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                  type: object
                                requests:
                                  additionalProperties:
                                    anyOf:
                                    - type: integer
                                    - type: string
                                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                    x-kubernetes-int-or-string: true
                                  description: 'Requests describes the minimum amount
                                    of compute resources required. If Requests is omitted
                                    for a container, it defaults to Limits if that is
                                    explicitly specified, otherwise to an implementation-defined
                                    value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                  type: object
                              type: object
                          required:
                          - componentName
                          - resourceRequirements
                          type: object
                        type: array
                      controlPlaneNodeSelector:
                        additionalProperties:
                          type: string
                        description: ControlPlaneNodeSelector is used to select control
                          plane nodes on which to run Calico components. This is globally
                          applied to all resources created by the operator excluding daemonsets.
                        type: object
                      controlPlaneReplicas:
                        description: ControlPlaneReplicas defines how many replicas of
                          the control plane core components will be deployed. This field
                          applies to all control plane components that support High Availability.
                          Defaults to 2.
                        format: int32
                        type: integer
                      controlPlaneTolerations:
                        description: ControlPlaneTolerations specify tolerations which
                          are then globally applied to all resources created by the operator.
                        items:
                          description: The pod this Toleration is attached to tolerates
                            any taint that matches the triple <key,value,effect> using
                            the matching operator <operator>.
                          properties:
                            effect:
                              description: Effect indicates the taint effect to match.
                                Empty means match all taint effects. When specified, allowed
                                values are NoSchedule, PreferNoSchedule and NoExecute.
                              type: string
                            key:
                              description: Key is the taint key that the toleration applies
                                to. Empty means match all taint keys. If the key is empty,
                                operator must be Exists; this combination means to match
                                all values and all keys.
                              type: string
                            operator:
                              description: Operator represents a key's relationship to
                                the value. Valid operators are Exists and Equal. Defaults
                                to Equal. Exists is equivalent to wildcard for value,
                                so that a pod can tolerate all taints of a particular
                                category.
                              type: string
                            tolerationSeconds:
                              description: TolerationSeconds represents the period of
                                time the toleration (which must be of effect NoExecute,
                                otherwise this field is ignored) tolerates the taint.
                                By default, it is not set, which means tolerate the taint
                                forever (do not evict). Zero and negative values will
                                be treated as 0 (evict immediately) by the system.
                              format: int64
                              type: integer
                            value:
                              description: Value is the taint value the toleration matches
                                to. If the operator is Exists, the value should be empty,
                                otherwise just a regular string.
                              type: string
                          type: object
                        type: array
                      flexVolumePath:
                        description: FlexVolumePath optionally specifies a custom path
                          for FlexVolume. If not specified, FlexVolume will be enabled
                          by default. If set to 'None', FlexVolume will be disabled. The
                          default is based on the kubernetesProvider.
                        type: string
                      imagePath:
                        description: "ImagePath allows for the path part of an image to
                          be specified. If specified then the specified value will be
                          used as the image path for each image. If not specified or empty,
                          the default for each image will be used. A special case value,
                          UseDefault, is supported to explicitly specify the default image
                          path will be used for each image. \n Image format:    `<registry><imagePath>/<imagePrefix><imageName>:<image-tag>`
                          \n This option allows configuring the `<imagePath>` portion
                          of the above format."
                        type: string
                      imagePrefix:
                        description: "ImagePrefix allows for the prefix part of an image
                          to be specified. If specified then the given value will be used
                          as a prefix on each image. If not specified or empty, no prefix
                          will be used. A special case value, UseDefault, is supported
                          to explicitly specify the default image prefix will be used
                          for each image. \n Image format:    `<registry><imagePath>/<imagePrefix><imageName>:<image-tag>`
                          \n This option allows configuring the `<imagePrefix>` portion
                          of the above format."
                        type: string
                      imagePullSecrets:
                        description: ImagePullSecrets is an array of references to container
                          registry pull secrets to use. These are applied to all images
                          to be pulled.
                        items:
                          description: LocalObjectReference contains enough information
                            to let you locate the referenced object inside the same namespace.
                          properties:
                            name:
                              description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                TODO: Add other useful fields. apiVersion, kind, uid?'
                              type: string
                          type: object
                        type: array
                      kubernetesProvider:
                        description: KubernetesProvider specifies a particular provider
                          of the Kubernetes platform and enables provider-specific configuration.
                          If the specified value is empty, the Operator will attempt to
                          automatically determine the current provider. If the specified
                          value is not empty, the Operator will still attempt auto-detection,
                          but will additionally compare the auto-detected value to the
                          specified value to confirm they match.
                        enum:
                        - ""
                        - EKS
                        - GKE
                        - AKS
                        - OpenShift
                        - DockerEnterprise
                        type: string
                      nodeMetricsPort:
                        description: NodeMetricsPort specifies which port calico/node
                          serves prometheus metrics on. By default, metrics are not enabled.
                          If specified, this overrides any FelixConfiguration resources
                          which may exist. If omitted, then prometheus metrics may still
                          be configured through FelixConfiguration.
                        format: int32
                        type: integer
                      nodeUpdateStrategy:
                        description: NodeUpdateStrategy can be used to customize the desired
                          update strategy, such as the MaxUnavailable field.
                        properties:
                          rollingUpdate:
                            description: 'Rolling update config params. Present only if
                              type = "RollingUpdate". --- TODO: Update this to follow
                              our convention for oneOf, whatever we decide it to be. Same
                              as Deployment `strategy.rollingUpdate`. See https://github.com/kubernetes/kubernetes/issues/35345'
                            properties:
                              maxSurge:
                                anyOf:
                                - type: integer
                                - type: string
                                description: 'The maximum number of nodes with an existing
                                  available DaemonSet pod that can have an updated DaemonSet
                                  pod during during an update. Value can be an absolute
                                  number (ex: 5) or a percentage of desired pods (ex:
                                  10%). This can not be 0 if MaxUnavailable is 0. Absolute
                                  number is calculated from percentage by rounding up
                                  to a minimum of 1. Default value is 0. Example: when
                                  this is set to 30%, at most 30% of the total number
                                  of nodes that should be running the daemon pod (i.e.
                                  status.desiredNumberScheduled) can have their a new
                                  pod created before the old pod is marked as deleted.
                                  The update starts by launching new pods on 30% of nodes.
                                  Once an updated pod is available (Ready for at least
                                  minReadySeconds) the old DaemonSet pod on that node
                                  is marked deleted. If the old pod becomes unavailable
                                  for any reason (Ready transitions to false, is evicted,
                                  or is drained) an updated pod is immediatedly created
                                  on that node without considering surge limits. Allowing
                                  surge implies the possibility that the resources consumed
                                  by the daemonset on any given node can double if the
                                  readiness check fails, and so resource intensive daemonsets
                                  should take into account that they may cause evictions
                                  during disruption. This is an alpha field and requires
                                  enabling DaemonSetUpdateSurge feature gate.'
                                x-kubernetes-int-or-string: true
                              maxUnavailable:
                                anyOf:
                                - type: integer
                                - type: string
                                description: 'The maximum number of DaemonSet pods that
                                  can be unavailable during the update. Value can be an
                                  absolute number (ex: 5) or a percentage of total number
                                  of DaemonSet pods at the start of the update (ex: 10%).
                                  Absolute number is calculated from percentage by rounding
                                  down to a minimum of one. This cannot be 0 if MaxSurge
                                  is 0 Default value is 1. Example: when this is set to
                                  30%, at most 30% of the total number of nodes that should
                                  be running the daemon pod (i.e. status.desiredNumberScheduled)
                                  can have their pods stopped for an update at any given
                                  time. The update starts by stopping at most 30% of those
                                  DaemonSet pods and then brings up new DaemonSet pods
                                  in their place. Once the new pods are available, it
                                  then proceeds onto other DaemonSet pods, thus ensuring
                                  that at least 70% of original number of DaemonSet pods
                                  are available at all times during the update.'
                                x-kubernetes-int-or-string: true
                            type: object
                          type:
                            description: Type of daemon set update. Can be "RollingUpdate"
                              or "OnDelete". Default is RollingUpdate.
                            type: string
                        type: object
                      nonPrivileged:
                        description: NonPrivileged configures Calico to be run in non-privileged
                          containers as non-root users where possible.
                        type: string
                      registry:
                        description: "Registry is the default Docker registry used for
                          component Docker images. If specified then the given value must
                          end with a slash character (`/`) and all images will be pulled
                          from this registry. If not specified then the default registries
                          will be used. A special case value, UseDefault, is supported
                          to explicitly specify the default registries will be used. \n
                          Image format:    `<registry><imagePath>/<imagePrefix><imageName>:<image-tag>`
                          \n This option allows configuring the `<registry>` portion of
                          the above format."
                        type: string
                      typhaAffinity:
                        description: TyphaAffinity allows configuration of node affinity
                          characteristics for Typha pods.
                        properties:
                          nodeAffinity:
                            description: NodeAffinity describes node affinity scheduling
                              rules for typha.
                            properties:
                              preferredDuringSchedulingIgnoredDuringExecution:
                                description: The scheduler will prefer to schedule pods
                                  to nodes that satisfy the affinity expressions specified
                                  by this field, but it may choose a node that violates
                                  one or more of the expressions.
                                items:
                                  description: An empty preferred scheduling term matches
                                    all objects with implicit weight 0 (i.e. it's a no-op).
                                    A null preferred scheduling term matches no objects
                                    (i.e. is also a no-op).
                                  properties:
                                    preference:
                                      description: A node selector term, associated with
                                        the corresponding weight.
                                      properties:
                                        matchExpressions:
                                          description: A list of node selector requirements
                                            by node's labels.
                                          items:
                                            description: A node selector requirement is
                                              a selector that contains values, a key,
                                              and an operator that relates the key and
                                              values.
                                            properties:
                                              key:
                                                description: The label key that the selector
                                                  applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators
                                                  are In, NotIn, Exists, DoesNotExist.
                                                  Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn, the
                                                  values array must be non-empty. If the
                                                  operator is Exists or DoesNotExist,
                                                  the values array must be empty. If the
                                                  operator is Gt or Lt, the values array
                                                  must have a single element, which will
                                                  be interpreted as an integer. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchFields:
                                          description: A list of node selector requirements
                                            by node's fields.
                                          items:
                                            description: A node selector requirement is
                                              a selector that contains values, a key,
                                              and an operator that relates the key and
                                              values.
                                            properties:
                                              key:
                                                description: The label key that the selector
                                                  applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators
                                                  are In, NotIn, Exists, DoesNotExist.
                                                  Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn, the
                                                  values array must be non-empty. If the
                                                  operator is Exists or DoesNotExist,
                                                  the values array must be empty. If the
                                                  operator is Gt or Lt, the values array
                                                  must have a single element, which will
                                                  be interpreted as an integer. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                      type: object
                                    weight:
                                      description: Weight associated with matching the
                                        corresponding nodeSelectorTerm, in the range 1-100.
                                      format: int32
                                      type: integer
                                  required:
                                  - preference
                                  - weight
                                  type: object
                                type: array
                              requiredDuringSchedulingIgnoredDuringExecution:
                                description: 'WARNING: Please note that if the affinity
                                  requirements specified by this field are not met at
                                  scheduling time, the pod will NOT be scheduled onto
                                  the node. There is no fallback to another affinity rules
                                  with this setting. This may cause networking disruption
                                  or even catastrophic failure! PreferredDuringSchedulingIgnoredDuringExecution
                                  should be used for affinity unless there is a specific
                                  well understood reason to use RequiredDuringSchedulingIgnoredDuringExecution
                                  and you can guarantee that the RequiredDuringSchedulingIgnoredDuringExecution
                                  will always have sufficient nodes to satisfy the requirement.
                                  NOTE: RequiredDuringSchedulingIgnoredDuringExecution
                                  is set by default for AKS nodes, to avoid scheduling
                                  Typhas on virtual-nodes. If the affinity requirements
                                  specified by this field cease to be met at some point
                                  during pod execution (e.g. due to an update), the system
                                  may or may not try to eventually evict the pod from
                                  its node.'
                                properties:
                                  nodeSelectorTerms:
                                    description: Required. A list of node selector terms.
                                      The terms are ORed.
                                    items:
                                      description: A null or empty node selector term
                                        matches no objects. The requirements of them are
                                        ANDed. The TopologySelectorTerm type implements
                                        a subset of the NodeSelectorTerm.
                                      properties:
                                        matchExpressions:
                                          description: A list of node selector requirements
                                            by node's labels.
                                          items:
                                            description: A node selector requirement is
                                              a selector that contains values, a key,
                                              and an operator that relates the key and
                                              values.
                                            properties:
                                              key:
                                                description: The label key that the selector
                                                  applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators
                                                  are In, NotIn, Exists, DoesNotExist.
                                                  Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn, the
                                                  values array must be non-empty. If the
                                                  operator is Exists or DoesNotExist,
                                                  the values array must be empty. If the
                                                  operator is Gt or Lt, the values array
                                                  must have a single element, which will
                                                  be interpreted as an integer. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchFields:
                                          description: A list of node selector requirements
                                            by node's fields.
                                          items:
                                            description: A node selector requirement is
                                              a selector that contains values, a key,
                                              and an operator that relates the key and
                                              values.
                                            properties:
                                              key:
                                                description: The label key that the selector
                                                  applies to.
                                                type: string
                                              operator:
                                                description: Represents a key's relationship
                                                  to a set of values. Valid operators
                                                  are In, NotIn, Exists, DoesNotExist.
                                                  Gt, and Lt.
                                                type: string
                                              values:
                                                description: An array of string values.
                                                  If the operator is In or NotIn, the
                                                  values array must be non-empty. If the
                                                  operator is Exists or DoesNotExist,
                                                  the values array must be empty. If the
                                                  operator is Gt or Lt, the values array
                                                  must have a single element, which will
                                                  be interpreted as an integer. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                      type: object
                                    type: array
                                required:
                                - nodeSelectorTerms
                                type: object
                            type: object
                        type: object
                      typhaMetricsPort:
                        description: TyphaMetricsPort specifies which port calico/typha
                          serves prometheus metrics on. By default, metrics are not enabled.
                        format: int32
                        type: integer
                      variant:
                        description: 'Variant is the product to install - one of Calico
                          or TigeraSecureEnterprise Default: Calico'
                        enum:
                        - Calico
                        - TigeraSecureEnterprise
                        type: string
                    type: object
                  imageSet:
                    description: ImageSet is the name of the ImageSet being used, if there
                      is an ImageSet that is being used. If an ImageSet is not being used
                      then this will not be set.
                    type: string
                  mtu:
                    description: MTU is the most recently observed value for pod network
                      MTU. This may be an explicitly configured value, or based on Calico's
                      native auto-detetion.
                    format: int32
                    type: integer
                  variant:
                    description: Variant is the most recently observed installed variant
                      - one of Calico or TigeraSecureEnterprise
                    enum:
                    - Calico
                    - TigeraSecureEnterprise
                    type: string
                type: object
            type: object
        served: true
        storage: true
        subresources:
          status: {}
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---
    # Source: crds/operator.tigera.io_tigerastatuses_crd.yaml
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: v0.3.0
      name: tigerastatuses.operator.tigera.io
    spec:
      group: operator.tigera.io
      names:
        kind: TigeraStatus
        listKind: TigeraStatusList
        plural: tigerastatuses
        singular: tigerastatus
      scope: Cluster
      versions:
      - additionalPrinterColumns:
        - description: Whether the component running and stable.
          jsonPath: .status.conditions[?(@.type=='Available')].status
          name: Available
          type: string
        - description: Whether the component is processing changes.
          jsonPath: .status.conditions[?(@.type=='Progressing')].status
          name: Progressing
          type: string
        - description: Whether the component is degraded.
          jsonPath: .status.conditions[?(@.type=='Degraded')].status
          name: Degraded
          type: string
        - description: The time the component's Available status last changed.
          jsonPath: .status.conditions[?(@.type=='Available')].lastTransitionTime
          name: Since
          type: date
        name: v1
        schema:
          openAPIV3Schema:
            description: TigeraStatus represents the most recently observed status for
              Calico or a Calico Enterprise functional area.
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: TigeraStatusSpec defines the desired state of TigeraStatus
                type: object
              status:
                description: TigeraStatusStatus defines the observed state of TigeraStatus
                properties:
                  conditions:
                    description: Conditions represents the latest observed set of conditions
                      for this component. A component may be one or more of Available,
                      Progressing, or Degraded.
                    items:
                      description: TigeraStatusCondition represents a condition attached
                        to a particular component.
                      properties:
                        lastTransitionTime:
                          description: The timestamp representing the start time for the
                            current status.
                          format: date-time
                          type: string
                        message:
                          description: Optionally, a detailed message providing additional
                            context.
                          type: string
                        reason:
                          description: A brief reason explaining the condition.
                          type: string
                        status:
                          description: The status of the condition. May be True, False,
                            or Unknown.
                          type: string
                        type:
                          description: The type of condition. May be Available, Progressing,
                            or Degraded.
                          type: string
                      required:
                      - lastTransitionTime
                      - status
                      - type
                      type: object
                    type: array
                required:
                - conditions
                type: object
            type: object
        served: true
        storage: true
        subresources:
          status: {}
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []

    ---
    # Source: tigera-operator/templates/tigera-operator/00-namespace-tigera-operator.yaml
    apiVersion: v1
    kind: Namespace
    metadata:
      name: tigera-operator
      annotations:
      labels:
        name: tigera-operator
    ---
    # Source: tigera-operator/templates/tigera-operator/02-podsecuritypolicy-tigera-operator.yaml
    # This should not be rendered for an OpenShift install.
    # OpenShift uses SecurityContextConstraints instead.
    apiVersion: policy/v1beta1
    kind: PodSecurityPolicy
    metadata:
      name: tigera-operator
      annotations:
        seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
    spec:
      privileged: false
      allowPrivilegeEscalation: false
      requiredDropCapabilities:
      - ALL
      volumes:
      - 'hostPath'
      - 'configMap'
      - 'emptyDir'
      - 'projected'
      - 'secret'
      - 'downwardAPI'
      # Assume that persistentVolumes set up by the cluster admin are safe to use.
      - 'persistentVolumeClaim'
      hostNetwork: true
      hostPorts:
      - min: 0
        max: 65535
      hostIPC: false
      hostPID: false
      runAsUser:
        rule: 'MustRunAsNonRoot'
      seLinux:
        rule: 'RunAsAny'
      supplementalGroups:
        rule: 'MustRunAs'
        ranges:
          # Forbid adding the root group.
          - min: 1
            max: 65535
      fsGroup:
        rule: 'MustRunAs'
        ranges:
          # Forbid adding the root group.
          - min: 1
            max: 65535
      readOnlyRootFilesystem: false
    ---
    # Source: tigera-operator/templates/tigera-operator/02-serviceaccount-tigera-operator.yaml
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: tigera-operator
      namespace: tigera-operator
    ---
    # Source: tigera-operator/templates/tigera-operator/02-role-tigera-operator.yaml
    # Permissions required when running the operator for a Calico cluster.
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: tigera-operator
    rules:
      - apiGroups:
          - ""
        resources:
          - namespaces
          - pods
          - podtemplates
          - services
          - endpoints
          - events
          - configmaps
          - secrets
          - serviceaccounts
        verbs:
          - create
          - get
          - list
          - update
          - delete
          - watch
      - apiGroups:
          - ""
        resources:
          - resourcequotas
        verbs:
          - list
          - get
          - watch
      - apiGroups:
          - ""
        resources:
          - resourcequotas
        verbs:
          - create
          - get
          - list
          - update
          - delete
          - watch
        resourceNames:
          - calico-critical-pods
          - tigera-critical-pods
      - apiGroups:
          - ""
        resources:
          - nodes
        verbs:
          # Need to update node labels when migrating nodes.
          - get
          - patch
          - list
          # We need this for Typha autoscaling
          - watch
      - apiGroups:
          - rbac.authorization.k8s.io
        resources:
          - clusterroles
          - clusterrolebindings
          - rolebindings
          - roles
        verbs:
          - create
          - get
          - list
          - update
          - delete
          - watch
          - bind
          - escalate
      - apiGroups:
          - apps
        resources:
          - deployments
          - daemonsets
          - statefulsets
        verbs:
          - create
          - get
          - list
          - patch
          - update
          - delete
          - watch
      - apiGroups:
          - apps
        resourceNames:
          - tigera-operator
        resources:
          - deployments/finalizers
        verbs:
          - update
      - apiGroups:
          - operator.tigera.io
        resources:
          - '*'
        verbs:
          - create
          - get
          - list
          - update
          - patch
          - delete
          - watch
      - apiGroups:
        - networking.k8s.io
        resources:
        - networkpolicies
        verbs:
          - create
          - update
          - delete
          - get
          - list
          - watch
      - apiGroups:
        - crd.projectcalico.org
        resources:
        - felixconfigurations
        verbs:
        - create
        - patch
        - list
        - get
        - watch
      - apiGroups:
        - crd.projectcalico.org
        resources:
        - ippools
        - kubecontrollersconfigurations
        verbs:
        - get
        - list
        - watch
      - apiGroups:
          - scheduling.k8s.io
        resources:
          - priorityclasses
        verbs:
          - create
          - get
          - list
          - update
          - delete
          - watch
      - apiGroups:
          - policy
        resources:
          - poddisruptionbudgets
        verbs:
          - create
          - get
          - list
          - update
          - delete
          - watch
      - apiGroups:
          - apiregistration.k8s.io
        resources:
          - apiservices
        verbs:
          - list
          - watch
          - create
          - update
      # Needed for operator lock
      - apiGroups:
          - coordination.k8s.io
        resources:
          - leases
        verbs:
          - create
          - get
          - list
          - update
          - delete
          - watch
      # Add the appropriate pod security policy permissions
      - apiGroups:
          - policy
        resources:
          - podsecuritypolicies
        resourceNames:
          - tigera-operator
        verbs:
          - use
      - apiGroups:
          - policy
        resources:
          - podsecuritypolicies
        verbs:
          - get
          - list
          - watch
          - create
          - update
          - delete
    # Add the permissions to monitor the status of certificatesigningrequests when certificate management is enabled.
      - apiGroups:
          - certificates.k8s.io
        resources:
          - certificatesigningrequests
        verbs:
          - list
    ---
    # Source: tigera-operator/templates/tigera-operator/02-rolebinding-tigera-operator.yaml
    kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: tigera-operator
    subjects:
    - kind: ServiceAccount
      name: tigera-operator
      namespace: tigera-operator
    roleRef:
      kind: ClusterRole
      name: tigera-operator
      apiGroup: rbac.authorization.k8s.io
    ---
    # Source: tigera-operator/templates/tigera-operator/02-tigera-operator.yaml
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: tigera-operator
      namespace: tigera-operator
      labels:
        k8s-app: tigera-operator
    spec:
      replicas: 1
      selector:
        matchLabels:
          name: tigera-operator
      template:
        metadata:
          labels:
            name: tigera-operator
            k8s-app: tigera-operator
        spec:
          nodeSelector:
            kubernetes.io/os: linux
          tolerations:
            - effect: NoExecute
              operator: Exists
            - effect: NoSchedule
              operator: Exists
          serviceAccountName: tigera-operator
          hostNetwork: true
          # This must be set when hostNetwork is true or else the cluster services won't resolve
          dnsPolicy: ClusterFirstWithHostNet
          containers:
            - name: tigera-operator
              image: quay.io/tigera/operator:v1.25.3
              imagePullPolicy: IfNotPresent
              command:
                - operator
              volumeMounts:
                - name: var-lib-calico
                  readOnly: true
                  mountPath: /var/lib/calico
              env:
                - name: WATCH_NAMESPACE
                  value: ""
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: OPERATOR_NAME
                  value: "tigera-operator"
                - name: TIGERA_OPERATOR_INIT_IMAGE_VERSION
                  value: v1.25.3
              envFrom:
                - configMapRef:
                    name: kubernetes-services-endpoint
                    optional: true
          volumes:
            - name: var-lib-calico
              hostPath:
                path: /var/lib/calico

kind: ConfigMap
metadata:
  name: tigera-operator-egoode-molex-kommander
  namespace: default
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  labels:
    konvoy.d2iq.io/cluster-name: egoode-molex-kommander
  name: aws-ebs-csi-egoode-molex-kommander
  namespace: default
spec:
  clusterSelector:
    matchLabels:
      konvoy.d2iq.io/cluster-name: egoode-molex-kommander
      konvoy.d2iq.io/csi: aws-ebs
      konvoy.d2iq.io/provider: aws
  resources:
  - kind: ConfigMap
    name: aws-ebs-csi-egoode-molex-kommander
  strategy: ApplyAlways
---
apiVersion: v1
data:
  aws-ebs-csi.yaml: |
    apiVersion: storage.k8s.io/v1
    kind: StorageClass
    metadata:
      annotations:
        storageclass.kubernetes.io/is-default-class: "true"
      name: ebs-sc
    parameters:
      csi.storage.k8s.io/fstype: ext4
      type: gp3
    provisioner: ebs.csi.aws.com
    volumeBindingMode: WaitForFirstConsumer
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
      name: ebs-csi-controller-sa
      namespace: kube-system
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
      name: ebs-csi-node-sa
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
      name: ebs-csi-node-role
    rules:
    - apiGroups:
      - ""
      resources:
      - nodes
      verbs:
      - get
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
      name: ebs-external-attacher-role
    rules:
    - apiGroups:
      - ""
      resources:
      - persistentvolumes
      verbs:
      - get
      - list
      - watch
      - update
      - patch
    - apiGroups:
      - ""
      resources:
      - nodes
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - csi.storage.k8s.io
      resources:
      - csinodeinfos
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - storage.k8s.io
      resources:
      - volumeattachments
      verbs:
      - get
      - list
      - watch
      - update
      - patch
    - apiGroups:
      - storage.k8s.io
      resources:
      - volumeattachments/status
      verbs:
      - patch
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
      name: ebs-external-provisioner-role
    rules:
    - apiGroups:
      - ""
      resources:
      - persistentvolumes
      verbs:
      - get
      - list
      - watch
      - create
      - delete
    - apiGroups:
      - ""
      resources:
      - persistentvolumeclaims
      verbs:
      - get
      - list
      - watch
      - update
    - apiGroups:
      - storage.k8s.io
      resources:
      - storageclasses
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - ""
      resources:
      - events
      verbs:
      - list
      - watch
      - create
      - update
      - patch
    - apiGroups:
      - snapshot.storage.k8s.io
      resources:
      - volumesnapshots
      verbs:
      - get
      - list
    - apiGroups:
      - snapshot.storage.k8s.io
      resources:
      - volumesnapshotcontents
      verbs:
      - get
      - list
    - apiGroups:
      - storage.k8s.io
      resources:
      - csinodes
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - ""
      resources:
      - nodes
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - coordination.k8s.io
      resources:
      - leases
      verbs:
      - get
      - watch
      - list
      - delete
      - update
      - create
    - apiGroups:
      - storage.k8s.io
      resources:
      - volumeattachments
      verbs:
      - get
      - list
      - watch
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
      name: ebs-external-resizer-role
    rules:
    - apiGroups:
      - ""
      resources:
      - persistentvolumes
      verbs:
      - get
      - list
      - watch
      - update
      - patch
    - apiGroups:
      - ""
      resources:
      - persistentvolumeclaims
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - ""
      resources:
      - persistentvolumeclaims/status
      verbs:
      - update
      - patch
    - apiGroups:
      - storage.k8s.io
      resources:
      - storageclasses
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - ""
      resources:
      - events
      verbs:
      - list
      - watch
      - create
      - update
      - patch
    - apiGroups:
      - ""
      resources:
      - pods
      verbs:
      - get
      - list
      - watch
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
      name: ebs-external-snapshotter-role
    rules:
    - apiGroups:
      - ""
      resources:
      - events
      verbs:
      - list
      - watch
      - create
      - update
      - patch
    - apiGroups:
      - ""
      resources:
      - secrets
      verbs:
      - get
      - list
    - apiGroups:
      - snapshot.storage.k8s.io
      resources:
      - volumesnapshotclasses
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - snapshot.storage.k8s.io
      resources:
      - volumesnapshotcontents
      verbs:
      - create
      - get
      - list
      - watch
      - update
      - delete
    - apiGroups:
      - snapshot.storage.k8s.io
      resources:
      - volumesnapshotcontents/status
      verbs:
      - update
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
      name: ebs-csi-attacher-binding
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: ebs-external-attacher-role
    subjects:
    - kind: ServiceAccount
      name: ebs-csi-controller-sa
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
      name: ebs-csi-node-getter-binding
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: ebs-csi-node-role
    subjects:
    - kind: ServiceAccount
      name: ebs-csi-node-sa
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
      name: ebs-csi-provisioner-binding
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: ebs-external-provisioner-role
    subjects:
    - kind: ServiceAccount
      name: ebs-csi-controller-sa
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
      name: ebs-csi-resizer-binding
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: ebs-external-resizer-role
    subjects:
    - kind: ServiceAccount
      name: ebs-csi-controller-sa
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
      name: ebs-csi-snapshotter-binding
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: ebs-external-snapshotter-role
    subjects:
    - kind: ServiceAccount
      name: ebs-csi-controller-sa
      namespace: kube-system
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
      name: ebs-csi-controller
      namespace: kube-system
    spec:
      replicas: 2
      selector:
        matchLabels:
          app: ebs-csi-controller
          app.kubernetes.io/name: aws-ebs-csi-driver
      template:
        metadata:
          labels:
            app: ebs-csi-controller
            app.kubernetes.io/name: aws-ebs-csi-driver
        spec:
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: node-role.kubernetes.io/control-plane
                    operator: Exists
          containers:
          - args:
            - --endpoint=$(CSI_ENDPOINT)
            - --logtostderr
            - --v=2
            env:
            - name: CSI_ENDPOINT
              value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
            - name: CSI_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  key: key_id
                  name: aws-secret
                  optional: true
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  key: access_key
                  name: aws-secret
                  optional: true
            image: public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.5.1
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 5
              httpGet:
                path: /healthz
                port: healthz
              initialDelaySeconds: 10
              periodSeconds: 10
              timeoutSeconds: 3
            name: ebs-plugin
            ports:
            - containerPort: 9808
              name: healthz
              protocol: TCP
            readinessProbe:
              failureThreshold: 5
              httpGet:
                path: /healthz
                port: healthz
              initialDelaySeconds: 10
              periodSeconds: 10
              timeoutSeconds: 3
            volumeMounts:
            - mountPath: /var/lib/csi/sockets/pluginproxy/
              name: socket-dir
          - args:
            - --csi-address=$(ADDRESS)
            - --v=2
            - --feature-gates=Topology=true
            - --extra-create-metadata
            - --leader-election=true
            - --default-fstype=ext4
            env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
            image: public.ecr.aws/eks-distro/kubernetes-csi/external-provisioner:v2.1.1-eks-1-18-13
            imagePullPolicy: IfNotPresent
            name: csi-provisioner
            volumeMounts:
            - mountPath: /var/lib/csi/sockets/pluginproxy/
              name: socket-dir
          - args:
            - --csi-address=$(ADDRESS)
            - --v=2
            - --leader-election=true
            env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
            image: public.ecr.aws/eks-distro/kubernetes-csi/external-attacher:v3.1.0-eks-1-18-13
            imagePullPolicy: IfNotPresent
            name: csi-attacher
            volumeMounts:
            - mountPath: /var/lib/csi/sockets/pluginproxy/
              name: socket-dir
          - args:
            - --csi-address=$(ADDRESS)
            - --leader-election=true
            env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
            image: public.ecr.aws/eks-distro/kubernetes-csi/external-snapshotter/csi-snapshotter:v3.0.3-eks-1-18-13
            imagePullPolicy: IfNotPresent
            name: csi-snapshotter
            volumeMounts:
            - mountPath: /var/lib/csi/sockets/pluginproxy/
              name: socket-dir
          - args:
            - --csi-address=$(ADDRESS)
            - --v=2
            env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
            image: public.ecr.aws/eks-distro/kubernetes-csi/external-resizer:v1.1.0-eks-1-18-13
            imagePullPolicy: IfNotPresent
            name: csi-resizer
            volumeMounts:
            - mountPath: /var/lib/csi/sockets/pluginproxy/
              name: socket-dir
          - args:
            - --csi-address=/csi/csi.sock
            image: public.ecr.aws/eks-distro/kubernetes-csi/livenessprobe:v2.2.0-eks-1-18-13
            imagePullPolicy: IfNotPresent
            name: liveness-probe
            volumeMounts:
            - mountPath: /csi
              name: socket-dir
          nodeSelector:
            kubernetes.io/os: linux
          priorityClassName: system-cluster-critical
          serviceAccountName: ebs-csi-controller-sa
          tolerations:
          - key: CriticalAddonsOnly
            operator: Exists
          - effect: NoExecute
            operator: Exists
            tolerationSeconds: 300
          - effect: NoSchedule
            key: node-role.kubernetes.io/master
            operator: Exists
          volumes:
          - emptyDir: {}
            name: socket-dir
    ---
    apiVersion: policy/v1beta1
    kind: PodDisruptionBudget
    metadata:
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
      name: ebs-csi-controller
      namespace: kube-system
    spec:
      maxUnavailable: 1
      selector:
        matchLabels:
          app: ebs-csi-controller
          app.kubernetes.io/name: aws-ebs-csi-driver
    ---
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
      name: ebs-csi-node
      namespace: kube-system
    spec:
      selector:
        matchLabels:
          app: ebs-csi-node
          app.kubernetes.io/name: aws-ebs-csi-driver
      template:
        metadata:
          labels:
            app: ebs-csi-node
            app.kubernetes.io/name: aws-ebs-csi-driver
        spec:
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: eks.amazonaws.com/compute-type
                    operator: NotIn
                    values:
                    - fargate
          containers:
          - args:
            - node
            - --endpoint=$(CSI_ENDPOINT)
            - --logtostderr
            - --v=2
            env:
            - name: CSI_ENDPOINT
              value: unix:/csi/csi.sock
            - name: CSI_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            image: public.ecr.aws/ebs-csi-driver/aws-ebs-csi-driver:v1.5.1
            imagePullPolicy: IfNotPresent
            livenessProbe:
              failureThreshold: 5
              httpGet:
                path: /healthz
                port: healthz
              initialDelaySeconds: 10
              periodSeconds: 10
              timeoutSeconds: 3
            name: ebs-plugin
            ports:
            - containerPort: 9808
              name: healthz
              protocol: TCP
            securityContext:
              privileged: true
            volumeMounts:
            - mountPath: /var/lib/kubelet
              mountPropagation: Bidirectional
              name: kubelet-dir
            - mountPath: /csi
              name: plugin-dir
            - mountPath: /dev
              name: device-dir
          - args:
            - --csi-address=$(ADDRESS)
            - --kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)
            - --v=2
            env:
            - name: ADDRESS
              value: /csi/csi.sock
            - name: DRIVER_REG_SOCK_PATH
              value: /var/lib/kubelet/plugins/ebs.csi.aws.com/csi.sock
            image: public.ecr.aws/eks-distro/kubernetes-csi/node-driver-registrar:v2.1.0-eks-1-18-13
            imagePullPolicy: IfNotPresent
            name: node-driver-registrar
            volumeMounts:
            - mountPath: /csi
              name: plugin-dir
            - mountPath: /registration
              name: registration-dir
          - args:
            - --csi-address=/csi/csi.sock
            image: public.ecr.aws/eks-distro/kubernetes-csi/livenessprobe:v2.2.0-eks-1-18-13
            imagePullPolicy: IfNotPresent
            name: liveness-probe
            volumeMounts:
            - mountPath: /csi
              name: plugin-dir
          nodeSelector:
            kubernetes.io/os: linux
          priorityClassName: system-node-critical
          serviceAccountName: ebs-csi-node-sa
          tolerations:
          - key: CriticalAddonsOnly
            operator: Exists
          - effect: NoExecute
            operator: Exists
          - effect: NoSchedule
            operator: Exists
          volumes:
          - hostPath:
              path: /var/lib/kubelet
              type: Directory
            name: kubelet-dir
          - hostPath:
              path: /var/lib/kubelet/plugins/ebs.csi.aws.com/
              type: DirectoryOrCreate
            name: plugin-dir
          - hostPath:
              path: /var/lib/kubelet/plugins_registry/
              type: Directory
            name: registration-dir
          - hostPath:
              path: /dev
              type: Directory
            name: device-dir
      updateStrategy:
        rollingUpdate:
          maxUnavailable: 10%
        type: RollingUpdate
    ---
    apiVersion: storage.k8s.io/v1
    kind: CSIDriver
    metadata:
      labels:
        app.kubernetes.io/name: aws-ebs-csi-driver
      name: ebs.csi.aws.com
    spec:
      attachRequired: true
      podInfoOnMount: false
    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        api-approved.kubernetes.io: https://github.com/kubernetes-csi/external-snapshotter/pull/419
        controller-gen.kubebuilder.io/version: v0.4.0
      creationTimestamp: null
      name: volumesnapshotclasses.snapshot.storage.k8s.io
    spec:
      group: snapshot.storage.k8s.io
      names:
        kind: VolumeSnapshotClass
        listKind: VolumeSnapshotClassList
        plural: volumesnapshotclasses
        shortNames:
        - vsclass
        - vsclasses
        singular: volumesnapshotclass
      scope: Cluster
      versions:
      - additionalPrinterColumns:
        - jsonPath: .driver
          name: Driver
          type: string
        - description: Determines whether a VolumeSnapshotContent created through the
            VolumeSnapshotClass should be deleted when its bound VolumeSnapshot is deleted.
          jsonPath: .deletionPolicy
          name: DeletionPolicy
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
        name: v1
        schema:
          openAPIV3Schema:
            description: VolumeSnapshotClass specifies parameters that a underlying storage
              system uses when creating a volume snapshot. A specific VolumeSnapshotClass
              is used by specifying its name in a VolumeSnapshot object. VolumeSnapshotClasses
              are non-namespaced
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              deletionPolicy:
                description: deletionPolicy determines whether a VolumeSnapshotContent
                  created through the VolumeSnapshotClass should be deleted when its bound
                  VolumeSnapshot is deleted. Supported values are "Retain" and "Delete".
                  "Retain" means that the VolumeSnapshotContent and its physical snapshot
                  on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent
                  and its physical snapshot on underlying storage system are deleted.
                  Required.
                enum:
                - Delete
                - Retain
                type: string
              driver:
                description: driver is the name of the storage driver that handles this
                  VolumeSnapshotClass. Required.
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              parameters:
                additionalProperties:
                  type: string
                description: parameters is a key-value map with storage driver specific
                  parameters for creating snapshots. These values are opaque to Kubernetes.
                type: object
            required:
            - deletionPolicy
            - driver
            type: object
        served: true
        storage: true
        subresources: {}
      - additionalPrinterColumns:
        - jsonPath: .driver
          name: Driver
          type: string
        - description: Determines whether a VolumeSnapshotContent created through the
            VolumeSnapshotClass should be deleted when its bound VolumeSnapshot is deleted.
          jsonPath: .deletionPolicy
          name: DeletionPolicy
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
        deprecated: true
        deprecationWarning: snapshot.storage.k8s.io/v1beta1 VolumeSnapshotClass is deprecated;
          use snapshot.storage.k8s.io/v1 VolumeSnapshotClass
        name: v1beta1
        schema:
          openAPIV3Schema:
            description: VolumeSnapshotClass specifies parameters that a underlying storage
              system uses when creating a volume snapshot. A specific VolumeSnapshotClass
              is used by specifying its name in a VolumeSnapshot object. VolumeSnapshotClasses
              are non-namespaced
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              deletionPolicy:
                description: deletionPolicy determines whether a VolumeSnapshotContent
                  created through the VolumeSnapshotClass should be deleted when its bound
                  VolumeSnapshot is deleted. Supported values are "Retain" and "Delete".
                  "Retain" means that the VolumeSnapshotContent and its physical snapshot
                  on underlying storage system are kept. "Delete" means that the VolumeSnapshotContent
                  and its physical snapshot on underlying storage system are deleted.
                  Required.
                enum:
                - Delete
                - Retain
                type: string
              driver:
                description: driver is the name of the storage driver that handles this
                  VolumeSnapshotClass. Required.
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              parameters:
                additionalProperties:
                  type: string
                description: parameters is a key-value map with storage driver specific
                  parameters for creating snapshots. These values are opaque to Kubernetes.
                type: object
            required:
            - deletionPolicy
            - driver
            type: object
        served: true
        storage: false
        subresources: {}
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []
    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        api-approved.kubernetes.io: https://github.com/kubernetes-csi/external-snapshotter/pull/419
        controller-gen.kubebuilder.io/version: v0.4.0
      creationTimestamp: null
      name: volumesnapshotcontents.snapshot.storage.k8s.io
    spec:
      group: snapshot.storage.k8s.io
      names:
        kind: VolumeSnapshotContent
        listKind: VolumeSnapshotContentList
        plural: volumesnapshotcontents
        shortNames:
        - vsc
        - vscs
        singular: volumesnapshotcontent
      scope: Cluster
      versions:
      - additionalPrinterColumns:
        - description: Indicates if the snapshot is ready to be used to restore a volume.
          jsonPath: .status.readyToUse
          name: ReadyToUse
          type: boolean
        - description: Represents the complete size of the snapshot in bytes
          jsonPath: .status.restoreSize
          name: RestoreSize
          type: integer
        - description: Determines whether this VolumeSnapshotContent and its physical
            snapshot on the underlying storage system should be deleted when its bound
            VolumeSnapshot is deleted.
          jsonPath: .spec.deletionPolicy
          name: DeletionPolicy
          type: string
        - description: Name of the CSI driver used to create the physical snapshot on
            the underlying storage system.
          jsonPath: .spec.driver
          name: Driver
          type: string
        - description: Name of the VolumeSnapshotClass to which this snapshot belongs.
          jsonPath: .spec.volumeSnapshotClassName
          name: VolumeSnapshotClass
          type: string
        - description: Name of the VolumeSnapshot object to which this VolumeSnapshotContent
            object is bound.
          jsonPath: .spec.volumeSnapshotRef.name
          name: VolumeSnapshot
          type: string
        - description: Namespace of the VolumeSnapshot object to which this VolumeSnapshotContent
            object is bound.
          jsonPath: .spec.volumeSnapshotRef.namespace
          name: VolumeSnapshotNamespace
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
        name: v1
        schema:
          openAPIV3Schema:
            description: VolumeSnapshotContent represents the actual "on-disk" snapshot
              object in the underlying storage system
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              spec:
                description: spec defines properties of a VolumeSnapshotContent created
                  by the underlying storage system. Required.
                properties:
                  deletionPolicy:
                    description: deletionPolicy determines whether this VolumeSnapshotContent
                      and its physical snapshot on the underlying storage system should
                      be deleted when its bound VolumeSnapshot is deleted. Supported values
                      are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent
                      and its physical snapshot on underlying storage system are kept.
                      "Delete" means that the VolumeSnapshotContent and its physical snapshot
                      on underlying storage system are deleted. For dynamically provisioned
                      snapshots, this field will automatically be filled in by the CSI
                      snapshotter sidecar with the "DeletionPolicy" field defined in the
                      corresponding VolumeSnapshotClass. For pre-existing snapshots, users
                      MUST specify this field when creating the  VolumeSnapshotContent
                      object. Required.
                    enum:
                    - Delete
                    - Retain
                    type: string
                  driver:
                    description: driver is the name of the CSI driver used to create the
                      physical snapshot on the underlying storage system. This MUST be
                      the same as the name returned by the CSI GetPluginName() call for
                      that driver. Required.
                    type: string
                  source:
                    description: source specifies whether the snapshot is (or should be)
                      dynamically provisioned or already exists, and just requires a Kubernetes
                      object representation. This field is immutable after creation. Required.
                    oneOf:
                    - required:
                      - snapshotHandle
                    - required:
                      - volumeHandle
                    properties:
                      snapshotHandle:
                        description: snapshotHandle specifies the CSI "snapshot_id" of
                          a pre-existing snapshot on the underlying storage system for
                          which a Kubernetes object representation was (or should be)
                          created. This field is immutable.
                        type: string
                      volumeHandle:
                        description: volumeHandle specifies the CSI "volume_id" of the
                          volume from which a snapshot should be dynamically taken from.
                          This field is immutable.
                        type: string
                    type: object
                  volumeSnapshotClassName:
                    description: name of the VolumeSnapshotClass from which this snapshot
                      was (or will be) created. Note that after provisioning, the VolumeSnapshotClass
                      may be deleted or recreated with different set of values, and as
                      such, should not be referenced post-snapshot creation.
                    type: string
                  volumeSnapshotRef:
                    description: volumeSnapshotRef specifies the VolumeSnapshot object
                      to which this VolumeSnapshotContent object is bound. VolumeSnapshot.Spec.VolumeSnapshotContentName
                      field must reference to this VolumeSnapshotContent's name for the
                      bidirectional binding to be valid. For a pre-existing VolumeSnapshotContent
                      object, name and namespace of the VolumeSnapshot object MUST be
                      provided for binding to happen. This field is immutable after creation.
                      Required.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead of
                          an entire object, this string should contain a valid JSON/Go
                          field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within
                          a pod, this would take on a value like: "spec.containers{name}"
                          (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]"
                          (container with index 2 in this pod). This syntax is chosen
                          only to have some well-defined way of referencing a part of
                          an object. TODO: this design is not final and this field is
                          subject to change in the future.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference
                          is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                required:
                - deletionPolicy
                - driver
                - source
                - volumeSnapshotRef
                type: object
              status:
                description: status represents the current information of a snapshot.
                properties:
                  creationTime:
                    description: creationTime is the timestamp when the point-in-time
                      snapshot is taken by the underlying storage system. In dynamic snapshot
                      creation case, this field will be filled in by the CSI snapshotter
                      sidecar with the "creation_time" value returned from CSI "CreateSnapshot"
                      gRPC call. For a pre-existing snapshot, this field will be filled
                      with the "creation_time" value returned from the CSI "ListSnapshots"
                      gRPC call if the driver supports it. If not specified, it indicates
                      the creation time is unknown. The format of this field is a Unix
                      nanoseconds time encoded as an int64. On Unix, the command `date
                      +%s%N` returns the current time in nanoseconds since 1970-01-01
                      00:00:00 UTC.
                    format: int64
                    type: integer
                  error:
                    description: error is the last observed error during snapshot creation,
                      if any. Upon success after retry, this error field will be cleared.
                    properties:
                      message:
                        description: 'message is a string detailing the encountered error
                          during snapshot creation if specified. NOTE: message may be
                          logged, and it should not contain sensitive information.'
                        type: string
                      time:
                        description: time is the timestamp when the error was encountered.
                        format: date-time
                        type: string
                    type: object
                  readyToUse:
                    description: readyToUse indicates if a snapshot is ready to be used
                      to restore a volume. In dynamic snapshot creation case, this field
                      will be filled in by the CSI snapshotter sidecar with the "ready_to_use"
                      value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing
                      snapshot, this field will be filled with the "ready_to_use" value
                      returned from the CSI "ListSnapshots" gRPC call if the driver supports
                      it, otherwise, this field will be set to "True". If not specified,
                      it means the readiness of a snapshot is unknown.
                    type: boolean
                  restoreSize:
                    description: restoreSize represents the complete size of the snapshot
                      in bytes. In dynamic snapshot creation case, this field will be
                      filled in by the CSI snapshotter sidecar with the "size_bytes" value
                      returned from CSI "CreateSnapshot" gRPC call. For a pre-existing
                      snapshot, this field will be filled with the "size_bytes" value
                      returned from the CSI "ListSnapshots" gRPC call if the driver supports
                      it. When restoring a volume from this snapshot, the size of the
                      volume MUST NOT be smaller than the restoreSize if it is specified,
                      otherwise the restoration will fail. If not specified, it indicates
                      that the size is unknown.
                    format: int64
                    minimum: 0
                    type: integer
                  snapshotHandle:
                    description: snapshotHandle is the CSI "snapshot_id" of a snapshot
                      on the underlying storage system. If not specified, it indicates
                      that dynamic snapshot creation has either failed or it is still
                      in progress.
                    type: string
                type: object
            required:
            - spec
            type: object
        served: true
        storage: true
        subresources:
          status: {}
      - additionalPrinterColumns:
        - description: Indicates if the snapshot is ready to be used to restore a volume.
          jsonPath: .status.readyToUse
          name: ReadyToUse
          type: boolean
        - description: Represents the complete size of the snapshot in bytes
          jsonPath: .status.restoreSize
          name: RestoreSize
          type: integer
        - description: Determines whether this VolumeSnapshotContent and its physical
            snapshot on the underlying storage system should be deleted when its bound
            VolumeSnapshot is deleted.
          jsonPath: .spec.deletionPolicy
          name: DeletionPolicy
          type: string
        - description: Name of the CSI driver used to create the physical snapshot on
            the underlying storage system.
          jsonPath: .spec.driver
          name: Driver
          type: string
        - description: Name of the VolumeSnapshotClass to which this snapshot belongs.
          jsonPath: .spec.volumeSnapshotClassName
          name: VolumeSnapshotClass
          type: string
        - description: Name of the VolumeSnapshot object to which this VolumeSnapshotContent
            object is bound.
          jsonPath: .spec.volumeSnapshotRef.name
          name: VolumeSnapshot
          type: string
        - description: Namespace of the VolumeSnapshot object to which this VolumeSnapshotContent
            object is bound.
          jsonPath: .spec.volumeSnapshotRef.namespace
          name: VolumeSnapshotNamespace
          type: string
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
        deprecated: true
        deprecationWarning: snapshot.storage.k8s.io/v1beta1 VolumeSnapshotContent is deprecated;
          use snapshot.storage.k8s.io/v1 VolumeSnapshotContent
        name: v1beta1
        schema:
          openAPIV3Schema:
            description: VolumeSnapshotContent represents the actual "on-disk" snapshot
              object in the underlying storage system
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              spec:
                description: spec defines properties of a VolumeSnapshotContent created
                  by the underlying storage system. Required.
                properties:
                  deletionPolicy:
                    description: deletionPolicy determines whether this VolumeSnapshotContent
                      and its physical snapshot on the underlying storage system should
                      be deleted when its bound VolumeSnapshot is deleted. Supported values
                      are "Retain" and "Delete". "Retain" means that the VolumeSnapshotContent
                      and its physical snapshot on underlying storage system are kept.
                      "Delete" means that the VolumeSnapshotContent and its physical snapshot
                      on underlying storage system are deleted. For dynamically provisioned
                      snapshots, this field will automatically be filled in by the CSI
                      snapshotter sidecar with the "DeletionPolicy" field defined in the
                      corresponding VolumeSnapshotClass. For pre-existing snapshots, users
                      MUST specify this field when creating the  VolumeSnapshotContent
                      object. Required.
                    enum:
                    - Delete
                    - Retain
                    type: string
                  driver:
                    description: driver is the name of the CSI driver used to create the
                      physical snapshot on the underlying storage system. This MUST be
                      the same as the name returned by the CSI GetPluginName() call for
                      that driver. Required.
                    type: string
                  source:
                    description: source specifies whether the snapshot is (or should be)
                      dynamically provisioned or already exists, and just requires a Kubernetes
                      object representation. This field is immutable after creation. Required.
                    properties:
                      snapshotHandle:
                        description: snapshotHandle specifies the CSI "snapshot_id" of
                          a pre-existing snapshot on the underlying storage system for
                          which a Kubernetes object representation was (or should be)
                          created. This field is immutable.
                        type: string
                      volumeHandle:
                        description: volumeHandle specifies the CSI "volume_id" of the
                          volume from which a snapshot should be dynamically taken from.
                          This field is immutable.
                        type: string
                    type: object
                  volumeSnapshotClassName:
                    description: name of the VolumeSnapshotClass from which this snapshot
                      was (or will be) created. Note that after provisioning, the VolumeSnapshotClass
                      may be deleted or recreated with different set of values, and as
                      such, should not be referenced post-snapshot creation.
                    type: string
                  volumeSnapshotRef:
                    description: volumeSnapshotRef specifies the VolumeSnapshot object
                      to which this VolumeSnapshotContent object is bound. VolumeSnapshot.Spec.VolumeSnapshotContentName
                      field must reference to this VolumeSnapshotContent's name for the
                      bidirectional binding to be valid. For a pre-existing VolumeSnapshotContent
                      object, name and namespace of the VolumeSnapshot object MUST be
                      provided for binding to happen. This field is immutable after creation.
                      Required.
                    properties:
                      apiVersion:
                        description: API version of the referent.
                        type: string
                      fieldPath:
                        description: 'If referring to a piece of an object instead of
                          an entire object, this string should contain a valid JSON/Go
                          field access statement, such as desiredState.manifest.containers[2].
                          For example, if the object reference is to a container within
                          a pod, this would take on a value like: "spec.containers{name}"
                          (where "name" refers to the name of the container that triggered
                          the event) or if no container name is specified "spec.containers[2]"
                          (container with index 2 in this pod). This syntax is chosen
                          only to have some well-defined way of referencing a part of
                          an object. TODO: this design is not final and this field is
                          subject to change in the future.'
                        type: string
                      kind:
                        description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                        type: string
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                        type: string
                      namespace:
                        description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                        type: string
                      resourceVersion:
                        description: 'Specific resourceVersion to which this reference
                          is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                        type: string
                      uid:
                        description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                        type: string
                    type: object
                required:
                - deletionPolicy
                - driver
                - source
                - volumeSnapshotRef
                type: object
              status:
                description: status represents the current information of a snapshot.
                properties:
                  creationTime:
                    description: creationTime is the timestamp when the point-in-time
                      snapshot is taken by the underlying storage system. In dynamic snapshot
                      creation case, this field will be filled in by the CSI snapshotter
                      sidecar with the "creation_time" value returned from CSI "CreateSnapshot"
                      gRPC call. For a pre-existing snapshot, this field will be filled
                      with the "creation_time" value returned from the CSI "ListSnapshots"
                      gRPC call if the driver supports it. If not specified, it indicates
                      the creation time is unknown. The format of this field is a Unix
                      nanoseconds time encoded as an int64. On Unix, the command `date
                      +%s%N` returns the current time in nanoseconds since 1970-01-01
                      00:00:00 UTC.
                    format: int64
                    type: integer
                  error:
                    description: error is the last observed error during snapshot creation,
                      if any. Upon success after retry, this error field will be cleared.
                    properties:
                      message:
                        description: 'message is a string detailing the encountered error
                          during snapshot creation if specified. NOTE: message may be
                          logged, and it should not contain sensitive information.'
                        type: string
                      time:
                        description: time is the timestamp when the error was encountered.
                        format: date-time
                        type: string
                    type: object
                  readyToUse:
                    description: readyToUse indicates if a snapshot is ready to be used
                      to restore a volume. In dynamic snapshot creation case, this field
                      will be filled in by the CSI snapshotter sidecar with the "ready_to_use"
                      value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing
                      snapshot, this field will be filled with the "ready_to_use" value
                      returned from the CSI "ListSnapshots" gRPC call if the driver supports
                      it, otherwise, this field will be set to "True". If not specified,
                      it means the readiness of a snapshot is unknown.
                    type: boolean
                  restoreSize:
                    description: restoreSize represents the complete size of the snapshot
                      in bytes. In dynamic snapshot creation case, this field will be
                      filled in by the CSI snapshotter sidecar with the "size_bytes" value
                      returned from CSI "CreateSnapshot" gRPC call. For a pre-existing
                      snapshot, this field will be filled with the "size_bytes" value
                      returned from the CSI "ListSnapshots" gRPC call if the driver supports
                      it. When restoring a volume from this snapshot, the size of the
                      volume MUST NOT be smaller than the restoreSize if it is specified,
                      otherwise the restoration will fail. If not specified, it indicates
                      that the size is unknown.
                    format: int64
                    minimum: 0
                    type: integer
                  snapshotHandle:
                    description: snapshotHandle is the CSI "snapshot_id" of a snapshot
                      on the underlying storage system. If not specified, it indicates
                      that dynamic snapshot creation has either failed or it is still
                      in progress.
                    type: string
                type: object
            required:
            - spec
            type: object
        served: true
        storage: false
        subresources:
          status: {}
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []
    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        api-approved.kubernetes.io: https://github.com/kubernetes-csi/external-snapshotter/pull/419
        controller-gen.kubebuilder.io/version: v0.4.0
      creationTimestamp: null
      name: volumesnapshots.snapshot.storage.k8s.io
    spec:
      group: snapshot.storage.k8s.io
      names:
        kind: VolumeSnapshot
        listKind: VolumeSnapshotList
        plural: volumesnapshots
        shortNames:
        - vs
        singular: volumesnapshot
      scope: Namespaced
      versions:
      - additionalPrinterColumns:
        - description: Indicates if the snapshot is ready to be used to restore a volume.
          jsonPath: .status.readyToUse
          name: ReadyToUse
          type: boolean
        - description: If a new snapshot needs to be created, this contains the name of
            the source PVC from which this snapshot was (or will be) created.
          jsonPath: .spec.source.persistentVolumeClaimName
          name: SourcePVC
          type: string
        - description: If a snapshot already exists, this contains the name of the existing
            VolumeSnapshotContent object representing the existing snapshot.
          jsonPath: .spec.source.volumeSnapshotContentName
          name: SourceSnapshotContent
          type: string
        - description: Represents the minimum size of volume required to rehydrate from
            this snapshot.
          jsonPath: .status.restoreSize
          name: RestoreSize
          type: string
        - description: The name of the VolumeSnapshotClass requested by the VolumeSnapshot.
          jsonPath: .spec.volumeSnapshotClassName
          name: SnapshotClass
          type: string
        - description: Name of the VolumeSnapshotContent object to which the VolumeSnapshot
            object intends to bind to. Please note that verification of binding actually
            requires checking both VolumeSnapshot and VolumeSnapshotContent to ensure
            both are pointing at each other. Binding MUST be verified prior to usage of
            this object.
          jsonPath: .status.boundVolumeSnapshotContentName
          name: SnapshotContent
          type: string
        - description: Timestamp when the point-in-time snapshot was taken by the underlying
            storage system.
          jsonPath: .status.creationTime
          name: CreationTime
          type: date
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
        name: v1
        schema:
          openAPIV3Schema:
            description: VolumeSnapshot is a user's request for either creating a point-in-time
              snapshot of a persistent volume, or binding to a pre-existing snapshot.
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              spec:
                description: 'spec defines the desired characteristics of a snapshot requested
                  by a user. More info: https://kubernetes.io/docs/concepts/storage/volume-snapshots#volumesnapshots
                  Required.'
                properties:
                  source:
                    description: source specifies where a snapshot will be created from.
                      This field is immutable after creation. Required.
                    oneOf:
                    - required:
                      - persistentVolumeClaimName
                    - required:
                      - volumeSnapshotContentName
                    properties:
                      persistentVolumeClaimName:
                        description: persistentVolumeClaimName specifies the name of the
                          PersistentVolumeClaim object representing the volume from which
                          a snapshot should be created. This PVC is assumed to be in the
                          same namespace as the VolumeSnapshot object. This field should
                          be set if the snapshot does not exists, and needs to be created.
                          This field is immutable.
                        type: string
                      volumeSnapshotContentName:
                        description: volumeSnapshotContentName specifies the name of a
                          pre-existing VolumeSnapshotContent object representing an existing
                          volume snapshot. This field should be set if the snapshot already
                          exists and only needs a representation in Kubernetes. This field
                          is immutable.
                        type: string
                    type: object
                  volumeSnapshotClassName:
                    description: 'VolumeSnapshotClassName is the name of the VolumeSnapshotClass
                      requested by the VolumeSnapshot. VolumeSnapshotClassName may be
                      left nil to indicate that the default SnapshotClass should be used.
                      A given cluster may have multiple default Volume SnapshotClasses:
                      one default per CSI Driver. If a VolumeSnapshot does not specify
                      a SnapshotClass, VolumeSnapshotSource will be checked to figure
                      out what the associated CSI Driver is, and the default VolumeSnapshotClass
                      associated with that CSI Driver will be used. If more than one VolumeSnapshotClass
                      exist for a given CSI Driver and more than one have been marked
                      as default, CreateSnapshot will fail and generate an event. Empty
                      string is not allowed for this field.'
                    type: string
                required:
                - source
                type: object
              status:
                description: status represents the current information of a snapshot.
                  Consumers must verify binding between VolumeSnapshot and VolumeSnapshotContent
                  objects is successful (by validating that both VolumeSnapshot and VolumeSnapshotContent
                  point at each other) before using this object.
                properties:
                  boundVolumeSnapshotContentName:
                    description: 'boundVolumeSnapshotContentName is the name of the VolumeSnapshotContent
                      object to which this VolumeSnapshot object intends to bind to. If
                      not specified, it indicates that the VolumeSnapshot object has not
                      been successfully bound to a VolumeSnapshotContent object yet. NOTE:
                      To avoid possible security issues, consumers must verify binding
                      between VolumeSnapshot and VolumeSnapshotContent objects is successful
                      (by validating that both VolumeSnapshot and VolumeSnapshotContent
                      point at each other) before using this object.'
                    type: string
                  creationTime:
                    description: creationTime is the timestamp when the point-in-time
                      snapshot is taken by the underlying storage system. In dynamic snapshot
                      creation case, this field will be filled in by the snapshot controller
                      with the "creation_time" value returned from CSI "CreateSnapshot"
                      gRPC call. For a pre-existing snapshot, this field will be filled
                      with the "creation_time" value returned from the CSI "ListSnapshots"
                      gRPC call if the driver supports it. If not specified, it may indicate
                      that the creation time of the snapshot is unknown.
                    format: date-time
                    type: string
                  error:
                    description: error is the last observed error during snapshot creation,
                      if any. This field could be helpful to upper level controllers(i.e.,
                      application controller) to decide whether they should continue on
                      waiting for the snapshot to be created based on the type of error
                      reported. The snapshot controller will keep retrying when an error
                      occurrs during the snapshot creation. Upon success, this error field
                      will be cleared.
                    properties:
                      message:
                        description: 'message is a string detailing the encountered error
                          during snapshot creation if specified. NOTE: message may be
                          logged, and it should not contain sensitive information.'
                        type: string
                      time:
                        description: time is the timestamp when the error was encountered.
                        format: date-time
                        type: string
                    type: object
                  readyToUse:
                    description: readyToUse indicates if the snapshot is ready to be used
                      to restore a volume. In dynamic snapshot creation case, this field
                      will be filled in by the snapshot controller with the "ready_to_use"
                      value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing
                      snapshot, this field will be filled with the "ready_to_use" value
                      returned from the CSI "ListSnapshots" gRPC call if the driver supports
                      it, otherwise, this field will be set to "True". If not specified,
                      it means the readiness of a snapshot is unknown.
                    type: boolean
                  restoreSize:
                    description: restoreSize represents the minimum size of volume required
                      to create a volume from this snapshot. In dynamic snapshot creation
                      case, this field will be filled in by the snapshot controller with
                      the "size_bytes" value returned from CSI "CreateSnapshot" gRPC call.
                      For a pre-existing snapshot, this field will be filled with the
                      "size_bytes" value returned from the CSI "ListSnapshots" gRPC call
                      if the driver supports it. When restoring a volume from this snapshot,
                      the size of the volume MUST NOT be smaller than the restoreSize
                      if it is specified, otherwise the restoration will fail. If not
                      specified, it indicates that the size is unknown.
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    type: string
                    x-kubernetes-int-or-string: true
                type: object
            required:
            - spec
            type: object
        served: true
        storage: true
        subresources:
          status: {}
      - additionalPrinterColumns:
        - description: Indicates if the snapshot is ready to be used to restore a volume.
          jsonPath: .status.readyToUse
          name: ReadyToUse
          type: boolean
        - description: If a new snapshot needs to be created, this contains the name of
            the source PVC from which this snapshot was (or will be) created.
          jsonPath: .spec.source.persistentVolumeClaimName
          name: SourcePVC
          type: string
        - description: If a snapshot already exists, this contains the name of the existing
            VolumeSnapshotContent object representing the existing snapshot.
          jsonPath: .spec.source.volumeSnapshotContentName
          name: SourceSnapshotContent
          type: string
        - description: Represents the minimum size of volume required to rehydrate from
            this snapshot.
          jsonPath: .status.restoreSize
          name: RestoreSize
          type: string
        - description: The name of the VolumeSnapshotClass requested by the VolumeSnapshot.
          jsonPath: .spec.volumeSnapshotClassName
          name: SnapshotClass
          type: string
        - description: Name of the VolumeSnapshotContent object to which the VolumeSnapshot
            object intends to bind to. Please note that verification of binding actually
            requires checking both VolumeSnapshot and VolumeSnapshotContent to ensure
            both are pointing at each other. Binding MUST be verified prior to usage of
            this object.
          jsonPath: .status.boundVolumeSnapshotContentName
          name: SnapshotContent
          type: string
        - description: Timestamp when the point-in-time snapshot was taken by the underlying
            storage system.
          jsonPath: .status.creationTime
          name: CreationTime
          type: date
        - jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
        deprecated: true
        deprecationWarning: snapshot.storage.k8s.io/v1beta1 VolumeSnapshot is deprecated;
          use snapshot.storage.k8s.io/v1 VolumeSnapshot
        name: v1beta1
        schema:
          openAPIV3Schema:
            description: VolumeSnapshot is a user's request for either creating a point-in-time
              snapshot of a persistent volume, or binding to a pre-existing snapshot.
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              spec:
                description: 'spec defines the desired characteristics of a snapshot requested
                  by a user. More info: https://kubernetes.io/docs/concepts/storage/volume-snapshots#volumesnapshots
                  Required.'
                properties:
                  source:
                    description: source specifies where a snapshot will be created from.
                      This field is immutable after creation. Required.
                    properties:
                      persistentVolumeClaimName:
                        description: persistentVolumeClaimName specifies the name of the
                          PersistentVolumeClaim object representing the volume from which
                          a snapshot should be created. This PVC is assumed to be in the
                          same namespace as the VolumeSnapshot object. This field should
                          be set if the snapshot does not exists, and needs to be created.
                          This field is immutable.
                        type: string
                      volumeSnapshotContentName:
                        description: volumeSnapshotContentName specifies the name of a
                          pre-existing VolumeSnapshotContent object representing an existing
                          volume snapshot. This field should be set if the snapshot already
                          exists and only needs a representation in Kubernetes. This field
                          is immutable.
                        type: string
                    type: object
                  volumeSnapshotClassName:
                    description: 'VolumeSnapshotClassName is the name of the VolumeSnapshotClass
                      requested by the VolumeSnapshot. VolumeSnapshotClassName may be
                      left nil to indicate that the default SnapshotClass should be used.
                      A given cluster may have multiple default Volume SnapshotClasses:
                      one default per CSI Driver. If a VolumeSnapshot does not specify
                      a SnapshotClass, VolumeSnapshotSource will be checked to figure
                      out what the associated CSI Driver is, and the default VolumeSnapshotClass
                      associated with that CSI Driver will be used. If more than one VolumeSnapshotClass
                      exist for a given CSI Driver and more than one have been marked
                      as default, CreateSnapshot will fail and generate an event. Empty
                      string is not allowed for this field.'
                    type: string
                required:
                - source
                type: object
              status:
                description: status represents the current information of a snapshot.
                  Consumers must verify binding between VolumeSnapshot and VolumeSnapshotContent
                  objects is successful (by validating that both VolumeSnapshot and VolumeSnapshotContent
                  point at each other) before using this object.
                properties:
                  boundVolumeSnapshotContentName:
                    description: 'boundVolumeSnapshotContentName is the name of the VolumeSnapshotContent
                      object to which this VolumeSnapshot object intends to bind to. If
                      not specified, it indicates that the VolumeSnapshot object has not
                      been successfully bound to a VolumeSnapshotContent object yet. NOTE:
                      To avoid possible security issues, consumers must verify binding
                      between VolumeSnapshot and VolumeSnapshotContent objects is successful
                      (by validating that both VolumeSnapshot and VolumeSnapshotContent
                      point at each other) before using this object.'
                    type: string
                  creationTime:
                    description: creationTime is the timestamp when the point-in-time
                      snapshot is taken by the underlying storage system. In dynamic snapshot
                      creation case, this field will be filled in by the snapshot controller
                      with the "creation_time" value returned from CSI "CreateSnapshot"
                      gRPC call. For a pre-existing snapshot, this field will be filled
                      with the "creation_time" value returned from the CSI "ListSnapshots"
                      gRPC call if the driver supports it. If not specified, it may indicate
                      that the creation time of the snapshot is unknown.
                    format: date-time
                    type: string
                  error:
                    description: error is the last observed error during snapshot creation,
                      if any. This field could be helpful to upper level controllers(i.e.,
                      application controller) to decide whether they should continue on
                      waiting for the snapshot to be created based on the type of error
                      reported. The snapshot controller will keep retrying when an error
                      occurrs during the snapshot creation. Upon success, this error field
                      will be cleared.
                    properties:
                      message:
                        description: 'message is a string detailing the encountered error
                          during snapshot creation if specified. NOTE: message may be
                          logged, and it should not contain sensitive information.'
                        type: string
                      time:
                        description: time is the timestamp when the error was encountered.
                        format: date-time
                        type: string
                    type: object
                  readyToUse:
                    description: readyToUse indicates if the snapshot is ready to be used
                      to restore a volume. In dynamic snapshot creation case, this field
                      will be filled in by the snapshot controller with the "ready_to_use"
                      value returned from CSI "CreateSnapshot" gRPC call. For a pre-existing
                      snapshot, this field will be filled with the "ready_to_use" value
                      returned from the CSI "ListSnapshots" gRPC call if the driver supports
                      it, otherwise, this field will be set to "True". If not specified,
                      it means the readiness of a snapshot is unknown.
                    type: boolean
                  restoreSize:
                    description: restoreSize represents the minimum size of volume required
                      to create a volume from this snapshot. In dynamic snapshot creation
                      case, this field will be filled in by the snapshot controller with
                      the "size_bytes" value returned from CSI "CreateSnapshot" gRPC call.
                      For a pre-existing snapshot, this field will be filled with the
                      "size_bytes" value returned from the CSI "ListSnapshots" gRPC call
                      if the driver supports it. When restoring a volume from this snapshot,
                      the size of the volume MUST NOT be smaller than the restoreSize
                      if it is specified, otherwise the restoration will fail. If not
                      specified, it indicates that the size is unknown.
                    pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                    type: string
                    x-kubernetes-int-or-string: true
                type: object
            required:
            - spec
            type: object
        served: true
        storage: false
        subresources:
          status: {}
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: snapshot-controller
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      name: snapshot-controller-runner
    rules:
    - apiGroups:
      - ""
      resources:
      - persistentvolumes
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - ""
      resources:
      - persistentvolumeclaims
      verbs:
      - get
      - list
      - watch
      - update
    - apiGroups:
      - storage.k8s.io
      resources:
      - storageclasses
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - ""
      resources:
      - events
      verbs:
      - list
      - watch
      - create
      - update
      - patch
    - apiGroups:
      - snapshot.storage.k8s.io
      resources:
      - volumesnapshotclasses
      verbs:
      - get
      - list
      - watch
    - apiGroups:
      - snapshot.storage.k8s.io
      resources:
      - volumesnapshotcontents
      verbs:
      - create
      - get
      - list
      - watch
      - update
      - delete
      - patch
    - apiGroups:
      - snapshot.storage.k8s.io
      resources:
      - volumesnapshotcontents/status
      verbs:
      - patch
    - apiGroups:
      - snapshot.storage.k8s.io
      resources:
      - volumesnapshots
      verbs:
      - get
      - list
      - watch
      - update
      - patch
    - apiGroups:
      - snapshot.storage.k8s.io
      resources:
      - volumesnapshots/status
      verbs:
      - update
      - patch
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      name: snapshot-controller-role
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: snapshot-controller-runner
    subjects:
    - kind: ServiceAccount
      name: snapshot-controller
      namespace: kube-system
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: Role
    metadata:
      name: snapshot-controller-leaderelection
      namespace: kube-system
    rules:
    - apiGroups:
      - coordination.k8s.io
      resources:
      - leases
      verbs:
      - get
      - watch
      - list
      - delete
      - update
      - create
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: RoleBinding
    metadata:
      name: snapshot-controller-leaderelection
      namespace: kube-system
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: snapshot-controller-leaderelection
    subjects:
    - kind: ServiceAccount
      name: snapshot-controller
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: snapshot-controller
      namespace: kube-system
    spec:
      minReadySeconds: 15
      replicas: 2
      selector:
        matchLabels:
          app: snapshot-controller
      strategy:
        rollingUpdate:
          maxSurge: 0
          maxUnavailable: 1
        type: RollingUpdate
      template:
        metadata:
          labels:
            app: snapshot-controller
        spec:
          containers:
          - args:
            - --v=5
            - --leader-election=true
            image: gcr.io/k8s-staging-sig-storage/snapshot-controller:v5.0.0
            imagePullPolicy: IfNotPresent
            name: snapshot-controller
          nodeSelector:
            kubernetes.io/os: linux
            node-role.kubernetes.io/control-plane: ""
          serviceAccount: snapshot-controller
          tolerations:
          - key: CriticalAddonsOnly
            operator: Exists
          - effect: NoExecute
            operator: Exists
            tolerationSeconds: 300
          - effect: NoSchedule
            key: node-role.kubernetes.io/master
            operator: Exists
kind: ConfigMap
metadata:
  name: aws-ebs-csi-egoode-molex-kommander
  namespace: default
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  labels:
    konvoy.d2iq.io/cluster-name: egoode-molex-kommander
  name: cluster-autoscaler-egoode-molex-kommander
  namespace: default
spec:
  clusterSelector:
    matchLabels:
      konvoy.d2iq.io/autoscaler: cluster-api
      konvoy.d2iq.io/cluster-name: egoode-molex-kommander
  resources:
  - kind: ConfigMap
    name: cluster-autoscaler-egoode-molex-kommander
  strategy: ApplyAlways
---
apiVersion: v1
data:
  cluster-autoscaler-configmap.yaml: |
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: cluster-autoscaler
      namespace: kube-system
      labels:
        app: cluster-autoscaler
    spec:
      selector:
        matchLabels:
          app: cluster-autoscaler
      replicas: 1
      template:
        metadata:
          labels:
            app: cluster-autoscaler
        spec:
          initContainers:
          - image: bitnami/kubectl:1.22.8
            name: cluster-autoscaler-verify
            command:
            - sh
            - "-c"
            - |
              /bin/bash <<'EOF'
              set -o nounset
              set -o pipefail

              SLEEP_DURATION="60s"
              CRDS_LIST="crd/machinedeployments.cluster.x-k8s.io crd/machinepools.cluster.x-k8s.io crds/clusters.cluster.x-k8s.io"

              echo "Checking if the CRDs exist: ${CRDS_LIST}"
              while true; do
                kubectl get ${CRDS_LIST}
                RET=$?
                if [ "${RET}" -eq 0 ]; then
                  echo "CRDs exist, checking if they're Established."
                  kubectl wait --for=condition=established --timeout=0 ${CRDS_LIST}
                  RET=$?
                  if [ "${RET}" -eq 0 ]; then
                    echo "Sucess! CRDs Ready!"
                    exit 0
                  fi
                fi
                echo "Following CRDs not found/ready ${CRDS_LIST}, sleeping for ${SLEEP_DURATION}"
                sleep ${SLEEP_DURATION}
              done
              exit 1
              EOF
          containers:
          - image: us.gcr.io/k8s-artifacts-prod/autoscaling/cluster-autoscaler:v1.23.0
            name: cluster-autoscaler
            command:
            - /cluster-autoscaler
            args:
            - --cloud-provider=clusterapi
            - -v5
          serviceAccountName: cluster-autoscaler
          terminationGracePeriodSeconds: 10
          tolerations:
          - effect: NoSchedule
            key: node-role.kubernetes.io/master
    ---
    kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: cluster-autoscaler-workload
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: cluster-autoscaler-workload
    subjects:
    - kind: ServiceAccount
      name: cluster-autoscaler
      namespace: kube-system
    ---
    kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: cluster-autoscaler-management
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: cluster-autoscaler-management
    subjects:
    - kind: ServiceAccount
      name: cluster-autoscaler
      namespace: kube-system
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      name: cluster-autoscaler
      namespace: kube-system
    ---
    kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: cluster-autoscaler-workload
    rules:
      - apiGroups:
        - ""
        resources:
        - namespaces
        - persistentvolumeclaims
        - persistentvolumes
        - pods
        - replicationcontrollers
        - services
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - ""
        resources:
        - nodes
        verbs:
        - get
        - list
        - update
        - watch
      - apiGroups:
        - ""
        resources:
        - pods/eviction
        verbs:
        - create
      - apiGroups:
        - policy
        resources:
        - poddisruptionbudgets
        verbs:
        - list
        - watch
      - apiGroups:
        - storage.k8s.io
        resources:
        - csinodes
        - storageclasses
        - csidrivers
        - csistoragecapacities
        verbs:
        - get
        - list
        - watch
      - apiGroups:
        - batch
        resources:
        - jobs
        verbs:
        - list
        - watch
      - apiGroups:
        - apps
        resources:
        - daemonsets
        - replicasets
        - statefulsets
        verbs:
        - list
        - watch
      - apiGroups:
        - ""
        resources:
        - events
        verbs:
        - create
        - patch
      - apiGroups:
        - ""
        resources:
        - configmaps
        verbs:
        - create
        - delete
        - get
        - update
      - apiGroups:
        - coordination.k8s.io
        resources:
        - leases
        verbs:
        - create
        - get
        - update
      - apiGroups:
        - apiextensions.k8s.io
        resources:
        - customresourcedefinitions
        verbs:
        - get
        - list
        - watch
    ---
    kind: ClusterRole
    apiVersion: rbac.authorization.k8s.io/v1
    metadata:
      name: cluster-autoscaler-management
    rules:
      - apiGroups:
        - cluster.x-k8s.io
        resources:
        - machinedeployments
        - machinedeployments/scale
        - machines
        - machinesets
        verbs:
        - get
        - list
        - update
        - watch
kind: ConfigMap
metadata:
  name: cluster-autoscaler-egoode-molex-kommander
  namespace: default
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  labels:
    konvoy.d2iq.io/cluster-name: egoode-molex-kommander
  name: node-feature-discovery-egoode-molex-kommander
  namespace: default
spec:
  clusterSelector:
    matchLabels:
      konvoy.d2iq.io/cluster-name: egoode-molex-kommander
  resources:
  - kind: ConfigMap
    name: node-feature-discovery-egoode-molex-kommander
  strategy: ApplyAlways
---
apiVersion: v1
data:
  node-feature-discovery.yaml: |
    apiVersion: v1
    kind: Namespace
    metadata:
      creationTimestamp: null
      name: node-feature-discovery
    spec: {}
    status: {}
    ---
    apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        app.kubernetes.io/instance: node-feature-discovery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/version: v0.10.1
        helm.sh/chart: node-feature-discovery-0.10.1
      name: node-feature-discovery
      namespace: node-feature-discovery
    ---
    apiVersion: v1
    data:
      nfd-worker.conf: |-
        sources:
          pci:
            deviceLabelFields:
              - "class"
              - "vendor"
    kind: ConfigMap
    metadata:
      labels:
        app.kubernetes.io/instance: node-feature-discovery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/version: v0.10.1
        helm.sh/chart: node-feature-discovery-0.10.1
      name: node-feature-discovery-worker-conf
      namespace: node-feature-discovery
    ---
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        controller-gen.kubebuilder.io/version: v0.7.0
      creationTimestamp: null
      name: nodefeaturerules.nfd.k8s-sigs.io
    spec:
      group: nfd.k8s-sigs.io
      names:
        kind: NodeFeatureRule
        listKind: NodeFeatureRuleList
        plural: nodefeaturerules
        singular: nodefeaturerule
      scope: Cluster
      versions:
      - name: v1alpha1
        schema:
          openAPIV3Schema:
            description: NodeFeatureRule resource specifies a configuration for feature-based
              customization of node objects, such as node labeling.
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: NodeFeatureRuleSpec describes a NodeFeatureRule.
                properties:
                  rules:
                    description: Rules is a list of node customization rules.
                    items:
                      description: Rule defines a rule for node customization such as
                        labeling.
                      properties:
                        labels:
                          additionalProperties:
                            type: string
                          description: Labels to create if the rule matches.
                          type: object
                        labelsTemplate:
                          description: LabelsTemplate specifies a template to expand for
                            dynamically generating multiple labels. Data (after template
                            expansion) must be keys with an optional value (<key>[=<value>])
                            separated by newlines.
                          type: string
                        matchAny:
                          description: MatchAny specifies a list of matchers one of which
                            must match.
                          items:
                            description: MatchAnyElem specifies one sub-matcher of MatchAny.
                            properties:
                              matchFeatures:
                                description: MatchFeatures specifies a set of matcher
                                  terms all of which must match.
                                items:
                                  description: FeatureMatcherTerm defines requirements
                                    against one feature set. All requirements (specified
                                    as MatchExpressions) are evaluated against each element
                                    in the feature set.
                                  properties:
                                    feature:
                                      type: string
                                    matchExpressions:
                                      additionalProperties:
                                        description: "MatchExpression specifies an expression
                                          to evaluate against a set of input values. It
                                          contains an operator that is applied when matching
                                          the input and an array of values that the operator
                                          evaluates the input against. \n NB: CreateMatchExpression
                                          or MustCreateMatchExpression() should be used
                                          for     creating new instances. NB: Validate()
                                          must be called if Op or Value fields are modified
                                          or if a new     instance is created from scratch
                                          without using the helper functions."
                                        properties:
                                          op:
                                            description: Op is the operator to be applied.
                                            enum:
                                            - In
                                            - NotIn
                                            - InRegexp
                                            - Exists
                                            - DoesNotExist
                                            - Gt
                                            - Lt
                                            - GtLt
                                            - IsTrue
                                            - IsFalse
                                            type: string
                                          value:
                                            description: Value is the list of values that
                                              the operand evaluates the input against.
                                              Value should be empty if the operator is
                                              Exists, DoesNotExist, IsTrue or IsFalse.
                                              Value should contain exactly one element
                                              if the operator is Gt or Lt and exactly
                                              two elements if the operator is GtLt. In
                                              other cases Value should contain at least
                                              one element.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - op
                                        type: object
                                      description: MatchExpressionSet contains a set of
                                        MatchExpressions, each of which is evaluated against
                                        a set of input values.
                                      type: object
                                  required:
                                  - feature
                                  - matchExpressions
                                  type: object
                                type: array
                            required:
                            - matchFeatures
                            type: object
                          type: array
                        matchFeatures:
                          description: MatchFeatures specifies a set of matcher terms
                            all of which must match.
                          items:
                            description: FeatureMatcherTerm defines requirements against
                              one feature set. All requirements (specified as MatchExpressions)
                              are evaluated against each element in the feature set.
                            properties:
                              feature:
                                type: string
                              matchExpressions:
                                additionalProperties:
                                  description: "MatchExpression specifies an expression
                                    to evaluate against a set of input values. It contains
                                    an operator that is applied when matching the input
                                    and an array of values that the operator evaluates
                                    the input against. \n NB: CreateMatchExpression or
                                    MustCreateMatchExpression() should be used for     creating
                                    new instances. NB: Validate() must be called if Op
                                    or Value fields are modified or if a new     instance
                                    is created from scratch without using the helper functions."
                                  properties:
                                    op:
                                      description: Op is the operator to be applied.
                                      enum:
                                      - In
                                      - NotIn
                                      - InRegexp
                                      - Exists
                                      - DoesNotExist
                                      - Gt
                                      - Lt
                                      - GtLt
                                      - IsTrue
                                      - IsFalse
                                      type: string
                                    value:
                                      description: Value is the list of values that the
                                        operand evaluates the input against. Value should
                                        be empty if the operator is Exists, DoesNotExist,
                                        IsTrue or IsFalse. Value should contain exactly
                                        one element if the operator is Gt or Lt and exactly
                                        two elements if the operator is GtLt. In other
                                        cases Value should contain at least one element.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - op
                                  type: object
                                description: MatchExpressionSet contains a set of MatchExpressions,
                                  each of which is evaluated against a set of input values.
                                type: object
                            required:
                            - feature
                            - matchExpressions
                            type: object
                          type: array
                        name:
                          description: Name of the rule.
                          type: string
                        vars:
                          additionalProperties:
                            type: string
                          description: Vars is the variables to store if the rule matches.
                            Variables do not directly inflict any changes in the node
                            object. However, they can be referenced from other rules enabling
                            more complex rule hierarchies, without exposing intermediary
                            output values as labels.
                          type: object
                        varsTemplate:
                          description: VarsTemplate specifies a template to expand for
                            dynamically generating multiple variables. Data (after template
                            expansion) must be keys with an optional value (<key>[=<value>])
                            separated by newlines.
                          type: string
                      required:
                      - name
                      type: object
                    type: array
                required:
                - rules
                type: object
            required:
            - spec
            type: object
        served: true
        storage: true
    status:
      acceptedNames:
        kind: ""
        plural: ""
      conditions: []
      storedVersions: []
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRole
    metadata:
      labels:
        app.kubernetes.io/instance: node-feature-discovery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/version: v0.10.1
        helm.sh/chart: node-feature-discovery-0.10.1
      name: node-feature-discovery
    rules:
    - apiGroups:
      - ""
      resources:
      - nodes
      verbs:
      - get
      - patch
      - update
      - list
    - apiGroups:
      - nfd.k8s-sigs.io
      resources:
      - nodefeaturerules
      verbs:
      - get
      - list
      - watch
    ---
    apiVersion: rbac.authorization.k8s.io/v1
    kind: ClusterRoleBinding
    metadata:
      labels:
        app.kubernetes.io/instance: node-feature-discovery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/version: v0.10.1
        helm.sh/chart: node-feature-discovery-0.10.1
      name: node-feature-discovery
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: node-feature-discovery
    subjects:
    - kind: ServiceAccount
      name: node-feature-discovery
      namespace: node-feature-discovery
    ---
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/instance: node-feature-discovery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/version: v0.10.1
        helm.sh/chart: node-feature-discovery-0.10.1
        role: master
      name: node-feature-discovery-master
      namespace: node-feature-discovery
    spec:
      ports:
      - name: grpc
        port: 8080
        protocol: TCP
        targetPort: grpc
      selector:
        app.kubernetes.io/instance: node-feature-discovery
        app.kubernetes.io/name: node-feature-discovery
      type: ClusterIP
    ---
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      labels:
        app.kubernetes.io/instance: node-feature-discovery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/version: v0.10.1
        helm.sh/chart: node-feature-discovery-0.10.1
        role: worker
      name: node-feature-discovery-worker
      namespace: node-feature-discovery
    spec:
      selector:
        matchLabels:
          app.kubernetes.io/instance: node-feature-discovery
          app.kubernetes.io/name: node-feature-discovery
          role: worker
      template:
        metadata:
          annotations: {}
          labels:
            app.kubernetes.io/instance: node-feature-discovery
            app.kubernetes.io/name: node-feature-discovery
            role: worker
        spec:
          containers:
          - args:
            - --server=node-feature-discovery-master:8080
            command:
            - nfd-worker
            env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            image: k8s.gcr.io/nfd/node-feature-discovery:v0.10.1
            imagePullPolicy: IfNotPresent
            name: worker
            resources: {}
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: true
              runAsNonRoot: true
            volumeMounts:
            - mountPath: /host-boot
              name: host-boot
              readOnly: true
            - mountPath: /host-etc/os-release
              name: host-os-release
              readOnly: true
            - mountPath: /host-sys
              name: host-sys
              readOnly: true
            - mountPath: /host-usr/lib
              name: host-usr-lib
              readOnly: true
            - mountPath: /etc/kubernetes/node-feature-discovery/source.d/
              name: source-d
              readOnly: true
            - mountPath: /etc/kubernetes/node-feature-discovery/features.d/
              name: features-d
              readOnly: true
            - mountPath: /etc/kubernetes/node-feature-discovery
              name: nfd-worker-conf
              readOnly: true
          dnsPolicy: ClusterFirstWithHostNet
          securityContext: {}
          volumes:
          - hostPath:
              path: /boot
            name: host-boot
          - hostPath:
              path: /etc/os-release
            name: host-os-release
          - hostPath:
              path: /sys
            name: host-sys
          - hostPath:
              path: /usr/lib
            name: host-usr-lib
          - hostPath:
              path: /etc/kubernetes/node-feature-discovery/source.d/
            name: source-d
          - hostPath:
              path: /etc/kubernetes/node-feature-discovery/features.d/
            name: features-d
          - configMap:
              items:
              - key: nfd-worker.conf
                path: nfd-worker.conf
              name: node-feature-discovery-worker-conf
            name: nfd-worker-conf
    ---
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app.kubernetes.io/instance: node-feature-discovery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: node-feature-discovery
        app.kubernetes.io/version: v0.10.1
        helm.sh/chart: node-feature-discovery-0.10.1
        role: master
      name: node-feature-discovery-master
      namespace: node-feature-discovery
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/instance: node-feature-discovery
          app.kubernetes.io/name: node-feature-discovery
          role: master
      template:
        metadata:
          annotations: {}
          labels:
            app.kubernetes.io/instance: node-feature-discovery
            app.kubernetes.io/name: node-feature-discovery
            role: master
        spec:
          affinity:
            nodeAffinity:
              preferredDuringSchedulingIgnoredDuringExecution:
              - preference:
                  matchExpressions:
                  - key: node-role.kubernetes.io/master
                    operator: In
                    values:
                    - ""
                weight: 1
              - preference:
                  matchExpressions:
                  - key: node-role.kubernetes.io/control-plane
                    operator: In
                    values:
                    - ""
                weight: 1
          containers:
          - args:
            - --extra-label-ns=nvidia.com,beta.amd.com,amd.com
            - -featurerules-controller=true
            command:
            - nfd-master
            env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            image: k8s.gcr.io/nfd/node-feature-discovery:v0.10.1
            imagePullPolicy: IfNotPresent
            livenessProbe:
              exec:
                command:
                - /usr/bin/grpc_health_probe
                - -addr=:8080
              initialDelaySeconds: 10
              periodSeconds: 10
            name: master
            ports:
            - containerPort: 8080
              name: grpc
            readinessProbe:
              exec:
                command:
                - /usr/bin/grpc_health_probe
                - -addr=:8080
              failureThreshold: 10
              initialDelaySeconds: 5
              periodSeconds: 10
            resources: {}
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: true
              runAsNonRoot: true
          securityContext: {}
          serviceAccountName: node-feature-discovery
          tolerations:
          - effect: NoSchedule
            key: node-role.kubernetes.io/master
            operator: Equal
            value: ""
          - effect: NoSchedule
            key: node-role.kubernetes.io/control-plane
            operator: Equal
            value: ""
kind: ConfigMap
metadata:
  name: node-feature-discovery-egoode-molex-kommander
  namespace: default
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  labels:
    konvoy.d2iq.io/cluster-name: egoode-molex-kommander
  name: nvidia-feature-discovery-egoode-molex-kommander
  namespace: default
spec:
  clusterSelector:
    matchLabels:
      konvoy.d2iq.io/cluster-name: egoode-molex-kommander
  resources:
  - kind: ConfigMap
    name: nvidia-feature-discovery-egoode-molex-kommander
  strategy: ApplyAlways
---
apiVersion: v1
data:
  nvidia-feature-discovery.yaml: |
    apiVersion: v1
    kind: Namespace
    metadata:
      creationTimestamp: null
      name: node-feature-discovery
    spec: {}
    status: {}
    ---
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      labels:
        app.kubernetes.io/instance: nvidia-feature-discovery
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: gpu-feature-discovery
        app.kubernetes.io/version: 0.4.1
        helm.sh/chart: gpu-feature-discovery-0.4.1
      name: nvidia-feature-discovery-gpu-feature-discovery
      namespace: node-feature-discovery
    spec:
      selector:
        matchLabels:
          app.kubernetes.io/instance: nvidia-feature-discovery
          app.kubernetes.io/name: gpu-feature-discovery
      template:
        metadata:
          labels:
            app.kubernetes.io/instance: nvidia-feature-discovery
            app.kubernetes.io/name: gpu-feature-discovery
        spec:
          containers:
          - env:
            - name: GFD_FAIL_ON_INIT_ERROR
              value: "true"
            - name: GFD_MIG_STRATEGY
              value: none
            - name: GFD_NO_TIMESTAMP
              value: "false"
            - name: GFD_SLEEP_INTERVAL
              value: 60s
            image: nvcr.io/nvidia/gpu-feature-discovery:v0.4.1
            imagePullPolicy: IfNotPresent
            name: gpu-feature-discovery
            securityContext:
              privileged: true
            volumeMounts:
            - mountPath: /etc/kubernetes/node-feature-discovery/features.d
              name: output-dir
            - mountPath: /sys/class/dmi/id/product_name
              name: dmi-product-name
          nodeSelector:
            feature.node.kubernetes.io/pci-0302_10de.present: "true"
          priorityClassName: system-node-critical
          securityContext: {}
          volumes:
          - hostPath:
              path: /etc/kubernetes/node-feature-discovery/features.d
            name: output-dir
          - hostPath:
              path: /sys/class/dmi/id/product_name
            name: dmi-product-name
      updateStrategy:
        type: RollingUpdate
kind: ConfigMap
metadata:
  name: nvidia-feature-discovery-egoode-molex-kommander
  namespace: default

## Let's encrypt stuffs

---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  labels:
    konvoy.d2iq.io/cluster-name: egoode-molex-kommander
  name: lets-encrypt-cluster-issuer
  namespace: default
spec:
  clusterSelector:
    matchLabels:
      konvoy.d2iq.io/cluster-name: egoode-molex-kommander
  resources:
  - kind: ConfigMap
    name: cert-mgr-cluster-issuer-crd
  strategy: ApplyAlways
---
apiVersion: v1
data:
  custom-resources.yaml: |
    apiVersion: apiextensions.k8s.io/v1
    kind: CustomResourceDefinition
    metadata:
      annotations:
        cert-manager.clusterctl.cluster.x-k8s.io/version: v1.5.3
        cert-manager.io/inject-ca-from-secret: cert-manager/cert-manager-webhook-ca
      creationTimestamp: "2022-04-05T20:47:18Z"
      generation: 2
      labels:
        app: cert-manager
        app.kubernetes.io/instance: cert-manager
        app.kubernetes.io/name: cert-manager
        app.kubernetes.io/version: v1.5.3
        clusterctl.cluster.x-k8s.io: ""
        clusterctl.cluster.x-k8s.io/core: cert-manager
      name: clusterissuers.cert-manager.io
      resourceVersion: "715"
      uid: cfc69efe-cf25-4ac5-acd0-e139ed6a7a27
    spec:
      conversion:
        strategy: Webhook
        webhook:
          clientConfig:
            caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ3ekNDQVVpZ0F3SUJBZ0lSQUtra1RiRnkyQk1RRk1qaWM1dnhPUTB3Q2dZSUtvWkl6ajBFQXdNd0lqRWcKTUI0R0ExVUVBeE1YWTJWeWRDMXRZVzVoWjJWeUxYZGxZbWh2YjJzdFkyRXdIaGNOTWpJd05EQTFNakEwTnpJegpXaGNOTWpNd05EQTFNakEwTnpJeldqQWlNU0F3SGdZRFZRUURFeGRqWlhKMExXMWhibUZuWlhJdGQyVmlhRzl2CmF5MWpZVEIyTUJBR0J5cUdTTTQ5QWdFR0JTdUJCQUFpQTJJQUJBYmJzQmQrOFZsc0RNU0FzWkd3TVZaOE8rYWUKK0YzMUpGckp6MVhMaVU3TDBxSUdYblJEbFBXYkhMRUkrcW5XRCtLNkUwMUwrcHp3djc0V0VVbHpZUmxLbVdyNApMdnRnWG9jeTVXRlllN3dxZEFsaUFtc1c3c3M5d1FmM1YxemhJcU5DTUVBd0RnWURWUjBQQVFIL0JBUURBZ0trCk1BOEdBMVVkRXdFQi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZPenh3SjFpWkRqbTF0NVF6ZEFZZ1pBbWN3WCsKTUFvR0NDcUdTTTQ5QkFNREEya0FNR1lDTVFDRnpXbkJ4UytwU3lCOFZZU1BWN0xlZ2tQT0llcWlkb3pFV0QxbAoveGczZnNDR1N4TUp1V08wMjZRNXAyQStxZEFDTVFDaEs2alRvendLeXMrV2ZBQkZVM2x0STVURDB1Wk5oMjFsCjhqV1RSUG82cURhMDVTTFJBeFpZckRIaElmTjdGczA9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
            service:
              name: cert-manager-webhook
              namespace: cert-manager
              path: /convert
              port: 443
          conversionReviewVersions:
          - v1
          - v1beta1
      group: cert-manager.io
      names:
        categories:
        - cert-manager
        kind: ClusterIssuer
        listKind: ClusterIssuerList
        plural: clusterissuers
        singular: clusterissuer
      scope: Cluster
      versions:
      - additionalPrinterColumns:
        - jsonPath: .status.conditions[?(@.type=="Ready")].status
          name: Ready
          type: string
        - jsonPath: .status.conditions[?(@.type=="Ready")].message
          name: Status
          priority: 1
          type: string
        - description: CreationTimestamp is a timestamp representing the server time when
            this object was created. It is not guaranteed to be set in happens-before
            order across separate operations. Clients may not set this value. It is represented
            in RFC3339 form and is in UTC.
          jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
        name: v1alpha2
        schema:
          openAPIV3Schema:
            description: A ClusterIssuer represents a certificate issuing authority which
              can be referenced as part of `issuerRef` fields. It is similar to an Issuer,
              however it is cluster-scoped and therefore can be referenced by resources
              that exist in *any* namespace, not just the same namespace as the referent.
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: Desired state of the ClusterIssuer resource.
                properties:
                  acme:
                    description: ACME configures this issuer to communicate with a RFC8555
                      (ACME) server to obtain signed x509 certificates.
                    properties:
                      disableAccountKeyGeneration:
                        description: Enables or disables generating a new ACME account
                          key. If true, the Issuer resource will *not* request a new account
                          but will expect the account key to be supplied via an existing
                          secret. If false, the cert-manager system will generate a new
                          ACME account key for the Issuer. Defaults to false.
                        type: boolean
                      email:
                        description: Email is the email address to be associated with
                          the ACME account. This field is optional, but it is strongly
                          recommended to be set. It will be used to contact you in case
                          of issues with your account or certificates, including expiry
                          notification emails. This field may be updated after the account
                          is initially registered.
                        type: string
                      enableDurationFeature:
                        description: Enables requesting a Not After date on certificates
                          that matches the duration of the certificate. This is not supported
                          by all ACME servers like Let's Encrypt. If set to true when
                          the ACME server does not support it it will create an error
                          on the Order. Defaults to false.
                        type: boolean
                      externalAccountBinding:
                        description: ExternalAccountBinding is a reference to a CA external
                          account of the ACME server. If set, upon registration cert-manager
                          will attempt to associate the given external account credentials
                          with the registered ACME account.
                        properties:
                          keyAlgorithm:
                            description: 'Deprecated: keyAlgorithm field exists for historical
                              compatibility reasons and should not be used. The algorithm
                              is now hardcoded to HS256 in golang/x/crypto/acme.'
                            enum:
                            - HS256
                            - HS384
                            - HS512
                            type: string
                          keyID:
                            description: keyID is the ID of the CA key that the External
                              Account is bound to.
                            type: string
                          keySecretRef:
                            description: keySecretRef is a Secret Key Selector referencing
                              a data item in a Kubernetes Secret which holds the symmetric
                              MAC key of the External Account Binding. The `key` is the
                              index string that is paired with the key data in the Secret
                              and should not be confused with the key data itself, or
                              indeed with the External Account Binding keyID above. The
                              secret key stored in the Secret **must** be un-padded, base64
                              URL encoded data.
                            properties:
                              key:
                                description: The key of the entry in the Secret resource's
                                  `data` field to be used. Some instances of this field
                                  may be defaulted, in others it may be required.
                                type: string
                              name:
                                description: 'Name of the resource being referred to.
                                  More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                            required:
                            - name
                            type: object
                        required:
                        - keyID
                        - keySecretRef
                        type: object
                      preferredChain:
                        description: 'PreferredChain is the chain to use if the ACME server
                          outputs multiple. PreferredChain is no guarantee that this one
                          gets delivered by the ACME endpoint. For example, for Let''s
                          Encrypt''s DST crosssign you would use: "DST Root CA X3" or
                          "ISRG Root X1" for the newer Let''s Encrypt root CA. This value
                          picks the first certificate bundle in the ACME alternative chains
                          that has a certificate with this value as its issuer''s CN'
                        maxLength: 64
                        type: string
                      privateKeySecretRef:
                        description: PrivateKey is the name of a Kubernetes Secret resource
                          that will be used to store the automatically generated ACME
                          account private key. Optionally, a `key` may be specified to
                          select a specific entry within the named Secret resource. If
                          `key` is not specified, a default of `tls.key` will be used.
                        properties:
                          key:
                            description: The key of the entry in the Secret resource's
                              `data` field to be used. Some instances of this field may
                              be defaulted, in others it may be required.
                            type: string
                          name:
                            description: 'Name of the resource being referred to. More
                              info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                        required:
                        - name
                        type: object
                      server:
                        description: 'Server is the URL used to access the ACME server''s
                          ''directory'' endpoint. For example, for Let''s Encrypt''s staging
                          endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory".
                          Only ACME v2 endpoints (i.e. RFC 8555) are supported.'
                        type: string
                      skipTLSVerify:
                        description: Enables or disables validation of the ACME server
                          TLS certificate. If true, requests to the ACME server will not
                          have their TLS certificate validated (i.e. insecure connections
                          will be allowed). Only enable this option in development environments.
                          The cert-manager system installed roots will be used to verify
                          connections to the ACME server if this is false. Defaults to
                          false.
                        type: boolean
                      solvers:
                        description: 'Solvers is a list of challenge solvers that will
                          be used to solve ACME challenges for the matching domains. Solver
                          configurations must be provided in order to obtain certificates
                          from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/'
                        items:
                          description: Configures an issuer to solve challenges using
                            the specified options. Only one of HTTP01 or DNS01 may be
                            provided.
                          properties:
                            dns01:
                              description: Configures cert-manager to attempt to complete
                                authorizations by performing the DNS01 challenge flow.
                              properties:
                                acmedns:
                                  description: Use the 'ACME DNS' (https://github.com/joohoi/acme-dns)
                                    API to manage DNS01 challenge records.
                                  properties:
                                    accountSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    host:
                                      type: string
                                  required:
                                  - accountSecretRef
                                  - host
                                  type: object
                                akamai:
                                  description: Use the Akamai DNS zone management API
                                    to manage DNS01 challenge records.
                                  properties:
                                    accessTokenSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    clientSecretSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    clientTokenSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    serviceConsumerDomain:
                                      type: string
                                  required:
                                  - accessTokenSecretRef
                                  - clientSecretSecretRef
                                  - clientTokenSecretRef
                                  - serviceConsumerDomain
                                  type: object
                                azuredns:
                                  description: Use the Microsoft Azure DNS API to manage
                                    DNS01 challenge records.
                                  properties:
                                    clientID:
                                      description: if both this and ClientSecret are left
                                        unset MSI will be used
                                      type: string
                                    clientSecretSecretRef:
                                      description: if both this and ClientID are left
                                        unset MSI will be used
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    environment:
                                      enum:
                                      - AzurePublicCloud
                                      - AzureChinaCloud
                                      - AzureGermanCloud
                                      - AzureUSGovernmentCloud
                                      type: string
                                    hostedZoneName:
                                      type: string
                                    resourceGroupName:
                                      type: string
                                    subscriptionID:
                                      type: string
                                    tenantID:
                                      description: when specifying ClientID and ClientSecret
                                        then this field is also needed
                                      type: string
                                  required:
                                  - resourceGroupName
                                  - subscriptionID
                                  type: object
                                clouddns:
                                  description: Use the Google Cloud DNS API to manage
                                    DNS01 challenge records.
                                  properties:
                                    hostedZoneName:
                                      description: HostedZoneName is an optional field
                                        that tells cert-manager in which Cloud DNS zone
                                        the challenge record has to be created. If left
                                        empty cert-manager will automatically choose a
                                        zone.
                                      type: string
                                    project:
                                      type: string
                                    serviceAccountSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                  required:
                                  - project
                                  type: object
                                cloudflare:
                                  description: Use the Cloudflare API to manage DNS01
                                    challenge records.
                                  properties:
                                    apiKeySecretRef:
                                      description: 'API key to use to authenticate with
                                        Cloudflare. Note: using an API token to authenticate
                                        is now the recommended method as it allows greater
                                        control of permissions.'
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    apiTokenSecretRef:
                                      description: API token used to authenticate with
                                        Cloudflare.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    email:
                                      description: Email of the account, only required
                                        when using API key based authentication.
                                      type: string
                                  type: object
                                cnameStrategy:
                                  description: CNAMEStrategy configures how the DNS01
                                    provider should handle CNAME records when found in
                                    DNS zones.
                                  enum:
                                  - None
                                  - Follow
                                  type: string
                                digitalocean:
                                  description: Use the DigitalOcean DNS API to manage
                                    DNS01 challenge records.
                                  properties:
                                    tokenSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                  required:
                                  - tokenSecretRef
                                  type: object
                                rfc2136:
                                  description: Use RFC2136 ("Dynamic Updates in the Domain
                                    Name System") (https://datatracker.ietf.org/doc/rfc2136/)
                                    to manage DNS01 challenge records.
                                  properties:
                                    nameserver:
                                      description: The IP address or hostname of an authoritative
                                        DNS server supporting RFC2136 in the form host:port.
                                        If the host is an IPv6 address it must be enclosed
                                        in square brackets (e.g [2001:db8::1]) ; port
                                        is optional. This field is required.
                                      type: string
                                    tsigAlgorithm:
                                      description: 'The TSIG Algorithm configured in the
                                        DNS supporting RFC2136. Used only when ``tsigSecretSecretRef``
                                        and ``tsigKeyName`` are defined. Supported values
                                        are (case-insensitive): ``HMACMD5`` (default),
                                        ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.'
                                      type: string
                                    tsigKeyName:
                                      description: The TSIG Key name configured in the
                                        DNS. If ``tsigSecretSecretRef`` is defined, this
                                        field is required.
                                      type: string
                                    tsigSecretSecretRef:
                                      description: The name of the secret containing the
                                        TSIG value. If ``tsigKeyName`` is defined, this
                                        field is required.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                  required:
                                  - nameserver
                                  type: object
                                route53:
                                  description: Use the AWS Route53 API to manage DNS01
                                    challenge records.
                                  properties:
                                    accessKeyID:
                                      description: 'The AccessKeyID is used for authentication.
                                        If not set we fall-back to using env vars, shared
                                        credentials file or AWS Instance metadata see:
                                        https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials'
                                      type: string
                                    hostedZoneID:
                                      description: If set, the provider will manage only
                                        this zone in Route53 and will not do an lookup
                                        using the route53:ListHostedZonesByName api call.
                                      type: string
                                    region:
                                      description: Always set the region when using AccessKeyID
                                        and SecretAccessKey
                                      type: string
                                    role:
                                      description: Role is a Role ARN which the Route53
                                        provider will assume using either the explicit
                                        credentials AccessKeyID/SecretAccessKey or the
                                        inferred credentials from environment variables,
                                        shared credentials file or AWS Instance metadata
                                      type: string
                                    secretAccessKeySecretRef:
                                      description: The SecretAccessKey is used for authentication.
                                        If not set we fall-back to using env vars, shared
                                        credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                  required:
                                  - region
                                  type: object
                                webhook:
                                  description: Configure an external webhook based DNS01
                                    challenge solver to manage DNS01 challenge records.
                                  properties:
                                    config:
                                      description: Additional configuration that should
                                        be passed to the webhook apiserver when challenges
                                        are processed. This can contain arbitrary JSON
                                        data. Secret values should not be specified in
                                        this stanza. If secret values are needed (e.g.
                                        credentials for a DNS service), you should use
                                        a SecretKeySelector to reference a Secret resource.
                                        For details on the schema of this field, consult
                                        the webhook provider implementation's documentation.
                                      x-kubernetes-preserve-unknown-fields: true
                                    groupName:
                                      description: The API group name that should be used
                                        when POSTing ChallengePayload resources to the
                                        webhook apiserver. This should be the same as
                                        the GroupName specified in the webhook provider
                                        implementation.
                                      type: string
                                    solverName:
                                      description: The name of the solver to use, as defined
                                        in the webhook provider implementation. This will
                                        typically be the name of the provider, e.g. 'cloudflare'.
                                      type: string
                                  required:
                                  - groupName
                                  - solverName
                                  type: object
                              type: object
                            http01:
                              description: Configures cert-manager to attempt to complete
                                authorizations by performing the HTTP01 challenge flow.
                                It is not possible to obtain certificates for wildcard
                                domain names (e.g. `*.example.com`) using the HTTP01 challenge
                                mechanism.
                              properties:
                                gatewayHTTPRoute:
                                  description: The Gateway API is a sig-network community
                                    API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/).
                                    The Gateway solver will create HTTPRoutes with the
                                    specified labels in the same namespace as the challenge.
                                    This solver is experimental, and fields / behaviour
                                    may change in the future.
                                  properties:
                                    labels:
                                      additionalProperties:
                                        type: string
                                      description: The labels that cert-manager will use
                                        when creating the temporary HTTPRoute needed for
                                        solving the HTTP-01 challenge. These labels must
                                        match the label selector of at least one Gateway.
                                      type: object
                                    serviceType:
                                      description: Optional service type for Kubernetes
                                        solver service. Supported values are NodePort
                                        or ClusterIP. If unset, defaults to NodePort.
                                      type: string
                                  type: object
                                ingress:
                                  description: The ingress based HTTP01 challenge solver
                                    will solve challenges by creating or modifying Ingress
                                    resources in order to route requests for '/.well-known/acme-challenge/XYZ'
                                    to 'challenge solver' pods that are provisioned by
                                    cert-manager for each Challenge to be completed.
                                  properties:
                                    class:
                                      description: The ingress class to use when creating
                                        Ingress resources to solve ACME challenges that
                                        use this challenge solver. Only one of 'class'
                                        or 'name' may be specified.
                                      type: string
                                    ingressTemplate:
                                      description: Optional ingress template used to configure
                                        the ACME challenge solver ingress used for HTTP01
                                        challenges
                                      properties:
                                        metadata:
                                          description: ObjectMeta overrides for the ingress
                                            used to solve HTTP01 challenges. Only the
                                            'labels' and 'annotations' fields may be set.
                                            If labels or annotations overlap with in-built
                                            values, the values here will override the
                                            in-built values.
                                          properties:
                                            annotations:
                                              additionalProperties:
                                                type: string
                                              description: Annotations that should be
                                                added to the created ACME HTTP01 solver
                                                ingress.
                                              type: object
                                            labels:
                                              additionalProperties:
                                                type: string
                                              description: Labels that should be added
                                                to the created ACME HTTP01 solver ingress.
                                              type: object
                                          type: object
                                      type: object
                                    name:
                                      description: The name of the ingress resource that
                                        should have ACME challenge solving routes inserted
                                        into it in order to solve HTTP01 challenges. This
                                        is typically used in conjunction with ingress
                                        controllers like ingress-gce, which maintains
                                        a 1:1 mapping between external IPs and ingress
                                        resources.
                                      type: string
                                    podTemplate:
                                      description: Optional pod template used to configure
                                        the ACME challenge solver pods used for HTTP01
                                        challenges.
                                      properties:
                                        metadata:
                                          description: ObjectMeta overrides for the pod
                                            used to solve HTTP01 challenges. Only the
                                            'labels' and 'annotations' fields may be set.
                                            If labels or annotations overlap with in-built
                                            values, the values here will override the
                                            in-built values.
                                          properties:
                                            annotations:
                                              additionalProperties:
                                                type: string
                                              description: Annotations that should be
                                                added to the create ACME HTTP01 solver
                                                pods.
                                              type: object
                                            labels:
                                              additionalProperties:
                                                type: string
                                              description: Labels that should be added
                                                to the created ACME HTTP01 solver pods.
                                              type: object
                                          type: object
                                        spec:
                                          description: PodSpec defines overrides for the
                                            HTTP01 challenge solver pod. Only the 'priorityClassName',
                                            'nodeSelector', 'affinity', 'serviceAccountName'
                                            and 'tolerations' fields are supported currently.
                                            All other fields will be ignored.
                                          properties:
                                            affinity:
                                              description: If specified, the pod's scheduling
                                                constraints
                                              properties:
                                                nodeAffinity:
                                                  description: Describes node affinity
                                                    scheduling rules for the pod.
                                                  properties:
                                                    preferredDuringSchedulingIgnoredDuringExecution:
                                                      description: The scheduler will
                                                        prefer to schedule pods to nodes
                                                        that satisfy the affinity expressions
                                                        specified by this field, but it
                                                        may choose a node that violates
                                                        one or more of the expressions.
                                                        The node that is most preferred
                                                        is the one with the greatest sum
                                                        of weights, i.e. for each node
                                                        that meets all of the scheduling
                                                        requirements (resource request,
                                                        requiredDuringScheduling affinity
                                                        expressions, etc.), compute a
                                                        sum by iterating through the elements
                                                        of this field and adding "weight"
                                                        to the sum if the node matches
                                                        the corresponding matchExpressions;
                                                        the node(s) with the highest sum
                                                        are the most preferred.
                                                      items:
                                                        description: An empty preferred
                                                          scheduling term matches all
                                                          objects with implicit weight
                                                          0 (i.e. it's a no-op). A null
                                                          preferred scheduling term matches
                                                          no objects (i.e. is also a no-op).
                                                        properties:
                                                          preference:
                                                            description: A node selector
                                                              term, associated with the
                                                              corresponding weight.
                                                            properties:
                                                              matchExpressions:
                                                                description: A list of
                                                                  node selector requirements
                                                                  by node's labels.
                                                                items:
                                                                  description: A node
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: The
                                                                        label key that
                                                                        the selector applies
                                                                        to.
                                                                      type: string
                                                                    operator:
                                                                      description: Represents
                                                                        a key's relationship
                                                                        to a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists, DoesNotExist.
                                                                        Gt, and Lt.
                                                                      type: string
                                                                    values:
                                                                      description: An
                                                                        array of string
                                                                        values. If the
                                                                        operator is In
                                                                        or NotIn, the
                                                                        values array must
                                                                        be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        If the operator
                                                                        is Gt or Lt, the
                                                                        values array must
                                                                        have a single
                                                                        element, which
                                                                        will be interpreted
                                                                        as an integer.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchFields:
                                                                description: A list of
                                                                  node selector requirements
                                                                  by node's fields.
                                                                items:
                                                                  description: A node
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: The
                                                                        label key that
                                                                        the selector applies
                                                                        to.
                                                                      type: string
                                                                    operator:
                                                                      description: Represents
                                                                        a key's relationship
                                                                        to a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists, DoesNotExist.
                                                                        Gt, and Lt.
                                                                      type: string
                                                                    values:
                                                                      description: An
                                                                        array of string
                                                                        values. If the
                                                                        operator is In
                                                                        or NotIn, the
                                                                        values array must
                                                                        be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        If the operator
                                                                        is Gt or Lt, the
                                                                        values array must
                                                                        have a single
                                                                        element, which
                                                                        will be interpreted
                                                                        as an integer.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                            type: object
                                                          weight:
                                                            description: Weight associated
                                                              with matching the corresponding
                                                              nodeSelectorTerm, in the
                                                              range 1-100.
                                                            format: int32
                                                            type: integer
                                                        required:
                                                        - preference
                                                        - weight
                                                        type: object
                                                      type: array
                                                    requiredDuringSchedulingIgnoredDuringExecution:
                                                      description: If the affinity requirements
                                                        specified by this field are not
                                                        met at scheduling time, the pod
                                                        will not be scheduled onto the
                                                        node. If the affinity requirements
                                                        specified by this field cease
                                                        to be met at some point during
                                                        pod execution (e.g. due to an
                                                        update), the system may or may
                                                        not try to eventually evict the
                                                        pod from its node.
                                                      properties:
                                                        nodeSelectorTerms:
                                                          description: Required. A list
                                                            of node selector terms. The
                                                            terms are ORed.
                                                          items:
                                                            description: A null or empty
                                                              node selector term matches
                                                              no objects. The requirements
                                                              of them are ANDed. The TopologySelectorTerm
                                                              type implements a subset
                                                              of the NodeSelectorTerm.
                                                            properties:
                                                              matchExpressions:
                                                                description: A list of
                                                                  node selector requirements
                                                                  by node's labels.
                                                                items:
                                                                  description: A node
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: The
                                                                        label key that
                                                                        the selector applies
                                                                        to.
                                                                      type: string
                                                                    operator:
                                                                      description: Represents
                                                                        a key's relationship
                                                                        to a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists, DoesNotExist.
                                                                        Gt, and Lt.
                                                                      type: string
                                                                    values:
                                                                      description: An
                                                                        array of string
                                                                        values. If the
                                                                        operator is In
                                                                        or NotIn, the
                                                                        values array must
                                                                        be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        If the operator
                                                                        is Gt or Lt, the
                                                                        values array must
                                                                        have a single
                                                                        element, which
                                                                        will be interpreted
                                                                        as an integer.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchFields:
                                                                description: A list of
                                                                  node selector requirements
                                                                  by node's fields.
                                                                items:
                                                                  description: A node
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: The
                                                                        label key that
                                                                        the selector applies
                                                                        to.
                                                                      type: string
                                                                    operator:
                                                                      description: Represents
                                                                        a key's relationship
                                                                        to a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists, DoesNotExist.
                                                                        Gt, and Lt.
                                                                      type: string
                                                                    values:
                                                                      description: An
                                                                        array of string
                                                                        values. If the
                                                                        operator is In
                                                                        or NotIn, the
                                                                        values array must
                                                                        be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        If the operator
                                                                        is Gt or Lt, the
                                                                        values array must
                                                                        have a single
                                                                        element, which
                                                                        will be interpreted
                                                                        as an integer.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                            type: object
                                                          type: array
                                                      required:
                                                      - nodeSelectorTerms
                                                      type: object
                                                  type: object
                                                podAffinity:
                                                  description: Describes pod affinity
                                                    scheduling rules (e.g. co-locate this
                                                    pod in the same node, zone, etc. as
                                                    some other pod(s)).
                                                  properties:
                                                    preferredDuringSchedulingIgnoredDuringExecution:
                                                      description: The scheduler will
                                                        prefer to schedule pods to nodes
                                                        that satisfy the affinity expressions
                                                        specified by this field, but it
                                                        may choose a node that violates
                                                        one or more of the expressions.
                                                        The node that is most preferred
                                                        is the one with the greatest sum
                                                        of weights, i.e. for each node
                                                        that meets all of the scheduling
                                                        requirements (resource request,
                                                        requiredDuringScheduling affinity
                                                        expressions, etc.), compute a
                                                        sum by iterating through the elements
                                                        of this field and adding "weight"
                                                        to the sum if the node has pods
                                                        which matches the corresponding
                                                        podAffinityTerm; the node(s) with
                                                        the highest sum are the most preferred.
                                                      items:
                                                        description: The weights of all
                                                          of the matched WeightedPodAffinityTerm
                                                          fields are added per-node to
                                                          find the most preferred node(s)
                                                        properties:
                                                          podAffinityTerm:
                                                            description: Required. A pod
                                                              affinity term, associated
                                                              with the corresponding weight.
                                                            properties:
                                                              labelSelector:
                                                                description: A label query
                                                                  over a set of resources,
                                                                  in this case pods.
                                                                properties:
                                                                  matchExpressions:
                                                                    description: matchExpressions
                                                                      is a list of label
                                                                      selector requirements.
                                                                      The requirements
                                                                      are ANDed.
                                                                    items:
                                                                      description: A label
                                                                        selector requirement
                                                                        is a selector
                                                                        that contains
                                                                        values, a key,
                                                                        and an operator
                                                                        that relates the
                                                                        key and values.
                                                                      properties:
                                                                        key:
                                                                          description: key
                                                                            is the label
                                                                            key that the
                                                                            selector applies
                                                                            to.
                                                                          type: string
                                                                        operator:
                                                                          description: operator
                                                                            represents
                                                                            a key's relationship
                                                                            to a set of
                                                                            values. Valid
                                                                            operators
                                                                            are In, NotIn,
                                                                            Exists and
                                                                            DoesNotExist.
                                                                          type: string
                                                                        values:
                                                                          description: values
                                                                            is an array
                                                                            of string
                                                                            values. If
                                                                            the operator
                                                                            is In or NotIn,
                                                                            the values
                                                                            array must
                                                                            be non-empty.
                                                                            If the operator
                                                                            is Exists
                                                                            or DoesNotExist,
                                                                            the values
                                                                            array must
                                                                            be empty.
                                                                            This array
                                                                            is replaced
                                                                            during a strategic
                                                                            merge patch.
                                                                          items:
                                                                            type: string
                                                                          type: array
                                                                      required:
                                                                      - key
                                                                      - operator
                                                                      type: object
                                                                    type: array
                                                                  matchLabels:
                                                                    additionalProperties:
                                                                      type: string
                                                                    description: matchLabels
                                                                      is a map of {key,value}
                                                                      pairs. A single
                                                                      {key,value} in the
                                                                      matchLabels map
                                                                      is equivalent to
                                                                      an element of matchExpressions,
                                                                      whose key field
                                                                      is "key", the operator
                                                                      is "In", and the
                                                                      values array contains
                                                                      only "value". The
                                                                      requirements are
                                                                      ANDed.
                                                                    type: object
                                                                type: object
                                                              namespaceSelector:
                                                                description: A label query
                                                                  over the set of namespaces
                                                                  that the term applies
                                                                  to. The term is applied
                                                                  to the union of the
                                                                  namespaces selected
                                                                  by this field and the
                                                                  ones listed in the namespaces
                                                                  field. null selector
                                                                  and null or empty namespaces
                                                                  list means "this pod's
                                                                  namespace". An empty
                                                                  selector ({}) matches
                                                                  all namespaces. This
                                                                  field is alpha-level
                                                                  and is only honored
                                                                  when PodAffinityNamespaceSelector
                                                                  feature is enabled.
                                                                properties:
                                                                  matchExpressions:
                                                                    description: matchExpressions
                                                                      is a list of label
                                                                      selector requirements.
                                                                      The requirements
                                                                      are ANDed.
                                                                    items:
                                                                      description: A label
                                                                        selector requirement
                                                                        is a selector
                                                                        that contains
                                                                        values, a key,
                                                                        and an operator
                                                                        that relates the
                                                                        key and values.
                                                                      properties:
                                                                        key:
                                                                          description: key
                                                                            is the label
                                                                            key that the
                                                                            selector applies
                                                                            to.
                                                                          type: string
                                                                        operator:
                                                                          description: operator
                                                                            represents
                                                                            a key's relationship
                                                                            to a set of
                                                                            values. Valid
                                                                            operators
                                                                            are In, NotIn,
                                                                            Exists and
                                                                            DoesNotExist.
                                                                          type: string
                                                                        values:
                                                                          description: values
                                                                            is an array
                                                                            of string
                                                                            values. If
                                                                            the operator
                                                                            is In or NotIn,
                                                                            the values
                                                                            array must
                                                                            be non-empty.
                                                                            If the operator
                                                                            is Exists
                                                                            or DoesNotExist,
                                                                            the values
                                                                            array must
                                                                            be empty.
                                                                            This array
                                                                            is replaced
                                                                            during a strategic
                                                                            merge patch.
                                                                          items:
                                                                            type: string
                                                                          type: array
                                                                      required:
                                                                      - key
                                                                      - operator
                                                                      type: object
                                                                    type: array
                                                                  matchLabels:
                                                                    additionalProperties:
                                                                      type: string
                                                                    description: matchLabels
                                                                      is a map of {key,value}
                                                                      pairs. A single
                                                                      {key,value} in the
                                                                      matchLabels map
                                                                      is equivalent to
                                                                      an element of matchExpressions,
                                                                      whose key field
                                                                      is "key", the operator
                                                                      is "In", and the
                                                                      values array contains
                                                                      only "value". The
                                                                      requirements are
                                                                      ANDed.
                                                                    type: object
                                                                type: object
                                                              namespaces:
                                                                description: namespaces
                                                                  specifies a static list
                                                                  of namespace names that
                                                                  the term applies to.
                                                                  The term is applied
                                                                  to the union of the
                                                                  namespaces listed in
                                                                  this field and the ones
                                                                  selected by namespaceSelector.
                                                                  null or empty namespaces
                                                                  list and null namespaceSelector
                                                                  means "this pod's namespace"
                                                                items:
                                                                  type: string
                                                                type: array
                                                              topologyKey:
                                                                description: This pod
                                                                  should be co-located
                                                                  (affinity) or not co-located
                                                                  (anti-affinity) with
                                                                  the pods matching the
                                                                  labelSelector in the
                                                                  specified namespaces,
                                                                  where co-located is
                                                                  defined as running on
                                                                  a node whose value of
                                                                  the label with key topologyKey
                                                                  matches that of any
                                                                  node on which any of
                                                                  the selected pods is
                                                                  running. Empty topologyKey
                                                                  is not allowed.
                                                                type: string
                                                            required:
                                                            - topologyKey
                                                            type: object
                                                          weight:
                                                            description: weight associated
                                                              with matching the corresponding
                                                              podAffinityTerm, in the
                                                              range 1-100.
                                                            format: int32
                                                            type: integer
                                                        required:
                                                        - podAffinityTerm
                                                        - weight
                                                        type: object
                                                      type: array
                                                    requiredDuringSchedulingIgnoredDuringExecution:
                                                      description: If the affinity requirements
                                                        specified by this field are not
                                                        met at scheduling time, the pod
                                                        will not be scheduled onto the
                                                        node. If the affinity requirements
                                                        specified by this field cease
                                                        to be met at some point during
                                                        pod execution (e.g. due to a pod
                                                        label update), the system may
                                                        or may not try to eventually evict
                                                        the pod from its node. When there
                                                        are multiple elements, the lists
                                                        of nodes corresponding to each
                                                        podAffinityTerm are intersected,
                                                        i.e. all terms must be satisfied.
                                                      items:
                                                        description: Defines a set of
                                                          pods (namely those matching
                                                          the labelSelector relative to
                                                          the given namespace(s)) that
                                                          this pod should be co-located
                                                          (affinity) or not co-located
                                                          (anti-affinity) with, where
                                                          co-located is defined as running
                                                          on a node whose value of the
                                                          label with key <topologyKey>
                                                          matches that of any node on
                                                          which a pod of the set of pods
                                                          is running
                                                        properties:
                                                          labelSelector:
                                                            description: A label query
                                                              over a set of resources,
                                                              in this case pods.
                                                            properties:
                                                              matchExpressions:
                                                                description: matchExpressions
                                                                  is a list of label selector
                                                                  requirements. The requirements
                                                                  are ANDed.
                                                                items:
                                                                  description: A label
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: key
                                                                        is the label key
                                                                        that the selector
                                                                        applies to.
                                                                      type: string
                                                                    operator:
                                                                      description: operator
                                                                        represents a key's
                                                                        relationship to
                                                                        a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists and DoesNotExist.
                                                                      type: string
                                                                    values:
                                                                      description: values
                                                                        is an array of
                                                                        string values.
                                                                        If the operator
                                                                        is In or NotIn,
                                                                        the values array
                                                                        must be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchLabels:
                                                                additionalProperties:
                                                                  type: string
                                                                description: matchLabels
                                                                  is a map of {key,value}
                                                                  pairs. A single {key,value}
                                                                  in the matchLabels map
                                                                  is equivalent to an
                                                                  element of matchExpressions,
                                                                  whose key field is "key",
                                                                  the operator is "In",
                                                                  and the values array
                                                                  contains only "value".
                                                                  The requirements are
                                                                  ANDed.
                                                                type: object
                                                            type: object
                                                          namespaceSelector:
                                                            description: A label query
                                                              over the set of namespaces
                                                              that the term applies to.
                                                              The term is applied to the
                                                              union of the namespaces
                                                              selected by this field and
                                                              the ones listed in the namespaces
                                                              field. null selector and
                                                              null or empty namespaces
                                                              list means "this pod's namespace".
                                                              An empty selector ({}) matches
                                                              all namespaces. This field
                                                              is alpha-level and is only
                                                              honored when PodAffinityNamespaceSelector
                                                              feature is enabled.
                                                            properties:
                                                              matchExpressions:
                                                                description: matchExpressions
                                                                  is a list of label selector
                                                                  requirements. The requirements
                                                                  are ANDed.
                                                                items:
                                                                  description: A label
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: key
                                                                        is the label key
                                                                        that the selector
                                                                        applies to.
                                                                      type: string
                                                                    operator:
                                                                      description: operator
                                                                        represents a key's
                                                                        relationship to
                                                                        a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists and DoesNotExist.
                                                                      type: string
                                                                    values:
                                                                      description: values
                                                                        is an array of
                                                                        string values.
                                                                        If the operator
                                                                        is In or NotIn,
                                                                        the values array
                                                                        must be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchLabels:
                                                                additionalProperties:
                                                                  type: string
                                                                description: matchLabels
                                                                  is a map of {key,value}
                                                                  pairs. A single {key,value}
                                                                  in the matchLabels map
                                                                  is equivalent to an
                                                                  element of matchExpressions,
                                                                  whose key field is "key",
                                                                  the operator is "In",
                                                                  and the values array
                                                                  contains only "value".
                                                                  The requirements are
                                                                  ANDed.
                                                                type: object
                                                            type: object
                                                          namespaces:
                                                            description: namespaces specifies
                                                              a static list of namespace
                                                              names that the term applies
                                                              to. The term is applied
                                                              to the union of the namespaces
                                                              listed in this field and
                                                              the ones selected by namespaceSelector.
                                                              null or empty namespaces
                                                              list and null namespaceSelector
                                                              means "this pod's namespace"
                                                            items:
                                                              type: string
                                                            type: array
                                                          topologyKey:
                                                            description: This pod should
                                                              be co-located (affinity)
                                                              or not co-located (anti-affinity)
                                                              with the pods matching the
                                                              labelSelector in the specified
                                                              namespaces, where co-located
                                                              is defined as running on
                                                              a node whose value of the
                                                              label with key topologyKey
                                                              matches that of any node
                                                              on which any of the selected
                                                              pods is running. Empty topologyKey
                                                              is not allowed.
                                                            type: string
                                                        required:
                                                        - topologyKey
                                                        type: object
                                                      type: array
                                                  type: object
                                                podAntiAffinity:
                                                  description: Describes pod anti-affinity
                                                    scheduling rules (e.g. avoid putting
                                                    this pod in the same node, zone, etc.
                                                    as some other pod(s)).
                                                  properties:
                                                    preferredDuringSchedulingIgnoredDuringExecution:
                                                      description: The scheduler will
                                                        prefer to schedule pods to nodes
                                                        that satisfy the anti-affinity
                                                        expressions specified by this
                                                        field, but it may choose a node
                                                        that violates one or more of the
                                                        expressions. The node that is
                                                        most preferred is the one with
                                                        the greatest sum of weights, i.e.
                                                        for each node that meets all of
                                                        the scheduling requirements (resource
                                                        request, requiredDuringScheduling
                                                        anti-affinity expressions, etc.),
                                                        compute a sum by iterating through
                                                        the elements of this field and
                                                        adding "weight" to the sum if
                                                        the node has pods which matches
                                                        the corresponding podAffinityTerm;
                                                        the node(s) with the highest sum
                                                        are the most preferred.
                                                      items:
                                                        description: The weights of all
                                                          of the matched WeightedPodAffinityTerm
                                                          fields are added per-node to
                                                          find the most preferred node(s)
                                                        properties:
                                                          podAffinityTerm:
                                                            description: Required. A pod
                                                              affinity term, associated
                                                              with the corresponding weight.
                                                            properties:
                                                              labelSelector:
                                                                description: A label query
                                                                  over a set of resources,
                                                                  in this case pods.
                                                                properties:
                                                                  matchExpressions:
                                                                    description: matchExpressions
                                                                      is a list of label
                                                                      selector requirements.
                                                                      The requirements
                                                                      are ANDed.
                                                                    items:
                                                                      description: A label
                                                                        selector requirement
                                                                        is a selector
                                                                        that contains
                                                                        values, a key,
                                                                        and an operator
                                                                        that relates the
                                                                        key and values.
                                                                      properties:
                                                                        key:
                                                                          description: key
                                                                            is the label
                                                                            key that the
                                                                            selector applies
                                                                            to.
                                                                          type: string
                                                                        operator:
                                                                          description: operator
                                                                            represents
                                                                            a key's relationship
                                                                            to a set of
                                                                            values. Valid
                                                                            operators
                                                                            are In, NotIn,
                                                                            Exists and
                                                                            DoesNotExist.
                                                                          type: string
                                                                        values:
                                                                          description: values
                                                                            is an array
                                                                            of string
                                                                            values. If
                                                                            the operator
                                                                            is In or NotIn,
                                                                            the values
                                                                            array must
                                                                            be non-empty.
                                                                            If the operator
                                                                            is Exists
                                                                            or DoesNotExist,
                                                                            the values
                                                                            array must
                                                                            be empty.
                                                                            This array
                                                                            is replaced
                                                                            during a strategic
                                                                            merge patch.
                                                                          items:
                                                                            type: string
                                                                          type: array
                                                                      required:
                                                                      - key
                                                                      - operator
                                                                      type: object
                                                                    type: array
                                                                  matchLabels:
                                                                    additionalProperties:
                                                                      type: string
                                                                    description: matchLabels
                                                                      is a map of {key,value}
                                                                      pairs. A single
                                                                      {key,value} in the
                                                                      matchLabels map
                                                                      is equivalent to
                                                                      an element of matchExpressions,
                                                                      whose key field
                                                                      is "key", the operator
                                                                      is "In", and the
                                                                      values array contains
                                                                      only "value". The
                                                                      requirements are
                                                                      ANDed.
                                                                    type: object
                                                                type: object
                                                              namespaceSelector:
                                                                description: A label query
                                                                  over the set of namespaces
                                                                  that the term applies
                                                                  to. The term is applied
                                                                  to the union of the
                                                                  namespaces selected
                                                                  by this field and the
                                                                  ones listed in the namespaces
                                                                  field. null selector
                                                                  and null or empty namespaces
                                                                  list means "this pod's
                                                                  namespace". An empty
                                                                  selector ({}) matches
                                                                  all namespaces. This
                                                                  field is alpha-level
                                                                  and is only honored
                                                                  when PodAffinityNamespaceSelector
                                                                  feature is enabled.
                                                                properties:
                                                                  matchExpressions:
                                                                    description: matchExpressions
                                                                      is a list of label
                                                                      selector requirements.
                                                                      The requirements
                                                                      are ANDed.
                                                                    items:
                                                                      description: A label
                                                                        selector requirement
                                                                        is a selector
                                                                        that contains
                                                                        values, a key,
                                                                        and an operator
                                                                        that relates the
                                                                        key and values.
                                                                      properties:
                                                                        key:
                                                                          description: key
                                                                            is the label
                                                                            key that the
                                                                            selector applies
                                                                            to.
                                                                          type: string
                                                                        operator:
                                                                          description: operator
                                                                            represents
                                                                            a key's relationship
                                                                            to a set of
                                                                            values. Valid
                                                                            operators
                                                                            are In, NotIn,
                                                                            Exists and
                                                                            DoesNotExist.
                                                                          type: string
                                                                        values:
                                                                          description: values
                                                                            is an array
                                                                            of string
                                                                            values. If
                                                                            the operator
                                                                            is In or NotIn,
                                                                            the values
                                                                            array must
                                                                            be non-empty.
                                                                            If the operator
                                                                            is Exists
                                                                            or DoesNotExist,
                                                                            the values
                                                                            array must
                                                                            be empty.
                                                                            This array
                                                                            is replaced
                                                                            during a strategic
                                                                            merge patch.
                                                                          items:
                                                                            type: string
                                                                          type: array
                                                                      required:
                                                                      - key
                                                                      - operator
                                                                      type: object
                                                                    type: array
                                                                  matchLabels:
                                                                    additionalProperties:
                                                                      type: string
                                                                    description: matchLabels
                                                                      is a map of {key,value}
                                                                      pairs. A single
                                                                      {key,value} in the
                                                                      matchLabels map
                                                                      is equivalent to
                                                                      an element of matchExpressions,
                                                                      whose key field
                                                                      is "key", the operator
                                                                      is "In", and the
                                                                      values array contains
                                                                      only "value". The
                                                                      requirements are
                                                                      ANDed.
                                                                    type: object
                                                                type: object
                                                              namespaces:
                                                                description: namespaces
                                                                  specifies a static list
                                                                  of namespace names that
                                                                  the term applies to.
                                                                  The term is applied
                                                                  to the union of the
                                                                  namespaces listed in
                                                                  this field and the ones
                                                                  selected by namespaceSelector.
                                                                  null or empty namespaces
                                                                  list and null namespaceSelector
                                                                  means "this pod's namespace"
                                                                items:
                                                                  type: string
                                                                type: array
                                                              topologyKey:
                                                                description: This pod
                                                                  should be co-located
                                                                  (affinity) or not co-located
                                                                  (anti-affinity) with
                                                                  the pods matching the
                                                                  labelSelector in the
                                                                  specified namespaces,
                                                                  where co-located is
                                                                  defined as running on
                                                                  a node whose value of
                                                                  the label with key topologyKey
                                                                  matches that of any
                                                                  node on which any of
                                                                  the selected pods is
                                                                  running. Empty topologyKey
                                                                  is not allowed.
                                                                type: string
                                                            required:
                                                            - topologyKey
                                                            type: object
                                                          weight:
                                                            description: weight associated
                                                              with matching the corresponding
                                                              podAffinityTerm, in the
                                                              range 1-100.
                                                            format: int32
                                                            type: integer
                                                        required:
                                                        - podAffinityTerm
                                                        - weight
                                                        type: object
                                                      type: array
                                                    requiredDuringSchedulingIgnoredDuringExecution:
                                                      description: If the anti-affinity
                                                        requirements specified by this
                                                        field are not met at scheduling
                                                        time, the pod will not be scheduled
                                                        onto the node. If the anti-affinity
                                                        requirements specified by this
                                                        field cease to be met at some
                                                        point during pod execution (e.g.
                                                        due to a pod label update), the
                                                        system may or may not try to eventually
                                                        evict the pod from its node. When
                                                        there are multiple elements, the
                                                        lists of nodes corresponding to
                                                        each podAffinityTerm are intersected,
                                                        i.e. all terms must be satisfied.
                                                      items:
                                                        description: Defines a set of
                                                          pods (namely those matching
                                                          the labelSelector relative to
                                                          the given namespace(s)) that
                                                          this pod should be co-located
                                                          (affinity) or not co-located
                                                          (anti-affinity) with, where
                                                          co-located is defined as running
                                                          on a node whose value of the
                                                          label with key <topologyKey>
                                                          matches that of any node on
                                                          which a pod of the set of pods
                                                          is running
                                                        properties:
                                                          labelSelector:
                                                            description: A label query
                                                              over a set of resources,
                                                              in this case pods.
                                                            properties:
                                                              matchExpressions:
                                                                description: matchExpressions
                                                                  is a list of label selector
                                                                  requirements. The requirements
                                                                  are ANDed.
                                                                items:
                                                                  description: A label
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: key
                                                                        is the label key
                                                                        that the selector
                                                                        applies to.
                                                                      type: string
                                                                    operator:
                                                                      description: operator
                                                                        represents a key's
                                                                        relationship to
                                                                        a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists and DoesNotExist.
                                                                      type: string
                                                                    values:
                                                                      description: values
                                                                        is an array of
                                                                        string values.
                                                                        If the operator
                                                                        is In or NotIn,
                                                                        the values array
                                                                        must be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchLabels:
                                                                additionalProperties:
                                                                  type: string
                                                                description: matchLabels
                                                                  is a map of {key,value}
                                                                  pairs. A single {key,value}
                                                                  in the matchLabels map
                                                                  is equivalent to an
                                                                  element of matchExpressions,
                                                                  whose key field is "key",
                                                                  the operator is "In",
                                                                  and the values array
                                                                  contains only "value".
                                                                  The requirements are
                                                                  ANDed.
                                                                type: object
                                                            type: object
                                                          namespaceSelector:
                                                            description: A label query
                                                              over the set of namespaces
                                                              that the term applies to.
                                                              The term is applied to the
                                                              union of the namespaces
                                                              selected by this field and
                                                              the ones listed in the namespaces
                                                              field. null selector and
                                                              null or empty namespaces
                                                              list means "this pod's namespace".
                                                              An empty selector ({}) matches
                                                              all namespaces. This field
                                                              is alpha-level and is only
                                                              honored when PodAffinityNamespaceSelector
                                                              feature is enabled.
                                                            properties:
                                                              matchExpressions:
                                                                description: matchExpressions
                                                                  is a list of label selector
                                                                  requirements. The requirements
                                                                  are ANDed.
                                                                items:
                                                                  description: A label
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: key
                                                                        is the label key
                                                                        that the selector
                                                                        applies to.
                                                                      type: string
                                                                    operator:
                                                                      description: operator
                                                                        represents a key's
                                                                        relationship to
                                                                        a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists and DoesNotExist.
                                                                      type: string
                                                                    values:
                                                                      description: values
                                                                        is an array of
                                                                        string values.
                                                                        If the operator
                                                                        is In or NotIn,
                                                                        the values array
                                                                        must be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchLabels:
                                                                additionalProperties:
                                                                  type: string
                                                                description: matchLabels
                                                                  is a map of {key,value}
                                                                  pairs. A single {key,value}
                                                                  in the matchLabels map
                                                                  is equivalent to an
                                                                  element of matchExpressions,
                                                                  whose key field is "key",
                                                                  the operator is "In",
                                                                  and the values array
                                                                  contains only "value".
                                                                  The requirements are
                                                                  ANDed.
                                                                type: object
                                                            type: object
                                                          namespaces:
                                                            description: namespaces specifies
                                                              a static list of namespace
                                                              names that the term applies
                                                              to. The term is applied
                                                              to the union of the namespaces
                                                              listed in this field and
                                                              the ones selected by namespaceSelector.
                                                              null or empty namespaces
                                                              list and null namespaceSelector
                                                              means "this pod's namespace"
                                                            items:
                                                              type: string
                                                            type: array
                                                          topologyKey:
                                                            description: This pod should
                                                              be co-located (affinity)
                                                              or not co-located (anti-affinity)
                                                              with the pods matching the
                                                              labelSelector in the specified
                                                              namespaces, where co-located
                                                              is defined as running on
                                                              a node whose value of the
                                                              label with key topologyKey
                                                              matches that of any node
                                                              on which any of the selected
                                                              pods is running. Empty topologyKey
                                                              is not allowed.
                                                            type: string
                                                        required:
                                                        - topologyKey
                                                        type: object
                                                      type: array
                                                  type: object
                                              type: object
                                            nodeSelector:
                                              additionalProperties:
                                                type: string
                                              description: 'NodeSelector is a selector
                                                which must be true for the pod to fit
                                                on a node. Selector which must match a
                                                node''s labels for the pod to be scheduled
                                                on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
                                              type: object
                                            priorityClassName:
                                              description: If specified, the pod's priorityClassName.
                                              type: string
                                            serviceAccountName:
                                              description: If specified, the pod's service
                                                account
                                              type: string
                                            tolerations:
                                              description: If specified, the pod's tolerations.
                                              items:
                                                description: The pod this Toleration is
                                                  attached to tolerates any taint that
                                                  matches the triple <key,value,effect>
                                                  using the matching operator <operator>.
                                                properties:
                                                  effect:
                                                    description: Effect indicates the
                                                      taint effect to match. Empty means
                                                      match all taint effects. When specified,
                                                      allowed values are NoSchedule, PreferNoSchedule
                                                      and NoExecute.
                                                    type: string
                                                  key:
                                                    description: Key is the taint key
                                                      that the toleration applies to.
                                                      Empty means match all taint keys.
                                                      If the key is empty, operator must
                                                      be Exists; this combination means
                                                      to match all values and all keys.
                                                    type: string
                                                  operator:
                                                    description: Operator represents a
                                                      key's relationship to the value.
                                                      Valid operators are Exists and Equal.
                                                      Defaults to Equal. Exists is equivalent
                                                      to wildcard for value, so that a
                                                      pod can tolerate all taints of a
                                                      particular category.
                                                    type: string
                                                  tolerationSeconds:
                                                    description: TolerationSeconds represents
                                                      the period of time the toleration
                                                      (which must be of effect NoExecute,
                                                      otherwise this field is ignored)
                                                      tolerates the taint. By default,
                                                      it is not set, which means tolerate
                                                      the taint forever (do not evict).
                                                      Zero and negative values will be
                                                      treated as 0 (evict immediately)
                                                      by the system.
                                                    format: int64
                                                    type: integer
                                                  value:
                                                    description: Value is the taint value
                                                      the toleration matches to. If the
                                                      operator is Exists, the value should
                                                      be empty, otherwise just a regular
                                                      string.
                                                    type: string
                                                type: object
                                              type: array
                                          type: object
                                      type: object
                                    serviceType:
                                      description: Optional service type for Kubernetes
                                        solver service. Supported values are NodePort
                                        or ClusterIP. If unset, defaults to NodePort.
                                      type: string
                                  type: object
                              type: object
                            selector:
                              description: Selector selects a set of DNSNames on the Certificate
                                resource that should be solved using this challenge solver.
                                If not specified, the solver will be treated as the 'default'
                                solver with the lowest priority, i.e. if any other solver
                                has a more specific match, it will be used instead.
                              properties:
                                dnsNames:
                                  description: List of DNSNames that this solver will
                                    be used to solve. If specified and a match is found,
                                    a dnsNames selector will take precedence over a dnsZones
                                    selector. If multiple solvers match with the same
                                    dnsNames value, the solver with the most matching
                                    labels in matchLabels will be selected. If neither
                                    has more matches, the solver defined earlier in the
                                    list will be selected.
                                  items:
                                    type: string
                                  type: array
                                dnsZones:
                                  description: List of DNSZones that this solver will
                                    be used to solve. The most specific DNS zone match
                                    specified here will take precedence over other DNS
                                    zone matches, so a solver specifying sys.example.com
                                    will be selected over one specifying example.com for
                                    the domain www.sys.example.com. If multiple solvers
                                    match with the same dnsZones value, the solver with
                                    the most matching labels in matchLabels will be selected.
                                    If neither has more matches, the solver defined earlier
                                    in the list will be selected.
                                  items:
                                    type: string
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: A label selector that is used to refine
                                    the set of certificate's that this challenge solver
                                    will apply to.
                                  type: object
                              type: object
                          type: object
                        type: array
                    required:
                    - privateKeySecretRef
                    - server
                    type: object
                  ca:
                    description: CA configures this issuer to sign certificates using
                      a signing CA keypair stored in a Secret resource. This is used to
                      build internal PKIs that are managed by cert-manager.
                    properties:
                      crlDistributionPoints:
                        description: The CRL distribution points is an X.509 v3 certificate
                          extension which identifies the location of the CRL from which
                          the revocation of this certificate can be checked. If not set,
                          certificates will be issued without distribution points set.
                        items:
                          type: string
                        type: array
                      ocspServers:
                        description: The OCSP server list is an X.509 v3 extension that
                          defines a list of URLs of OCSP responders. The OCSP responders
                          can be queried for the revocation status of an issued certificate.
                          If not set, the certificate will be issued with no OCSP servers
                          set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
                        items:
                          type: string
                        type: array
                      secretName:
                        description: SecretName is the name of the secret used to sign
                          Certificates issued by this Issuer.
                        type: string
                    required:
                    - secretName
                    type: object
                  selfSigned:
                    description: SelfSigned configures this issuer to 'self sign' certificates
                      using the private key used to create the CertificateRequest object.
                    properties:
                      crlDistributionPoints:
                        description: The CRL distribution points is an X.509 v3 certificate
                          extension which identifies the location of the CRL from which
                          the revocation of this certificate can be checked. If not set
                          certificate will be issued without CDP. Values are strings.
                        items:
                          type: string
                        type: array
                    type: object
                  vault:
                    description: Vault configures this issuer to sign certificates using
                      a HashiCorp Vault PKI backend.
                    properties:
                      auth:
                        description: Auth configures how cert-manager authenticates with
                          the Vault server.
                        properties:
                          appRole:
                            description: AppRole authenticates with Vault using the App
                              Role auth mechanism, with the role and secret stored in
                              a Kubernetes Secret resource.
                            properties:
                              path:
                                description: 'Path where the App Role authentication backend
                                  is mounted in Vault, e.g: "approle"'
                                type: string
                              roleId:
                                description: RoleID configured in the App Role authentication
                                  backend when setting up the authentication backend in
                                  Vault.
                                type: string
                              secretRef:
                                description: Reference to a key in a Secret that contains
                                  the App Role secret used to authenticate with Vault.
                                  The `key` field must be specified and denotes which
                                  entry within the Secret resource is used as the app
                                  role secret.
                                properties:
                                  key:
                                    description: The key of the entry in the Secret resource's
                                      `data` field to be used. Some instances of this
                                      field may be defaulted, in others it may be required.
                                    type: string
                                  name:
                                    description: 'Name of the resource being referred
                                      to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                    type: string
                                required:
                                - name
                                type: object
                            required:
                            - path
                            - roleId
                            - secretRef
                            type: object
                          kubernetes:
                            description: Kubernetes authenticates with Vault by passing
                              the ServiceAccount token stored in the named Secret resource
                              to the Vault server.
                            properties:
                              mountPath:
                                description: The Vault mountPath here is the mount path
                                  to use when authenticating with Vault. For example,
                                  setting a value to `/v1/auth/foo`, will use the path
                                  `/v1/auth/foo/login` to authenticate with Vault. If
                                  unspecified, the default value "/v1/auth/kubernetes"
                                  will be used.
                                type: string
                              role:
                                description: A required field containing the Vault Role
                                  to assume. A Role binds a Kubernetes ServiceAccount
                                  with a set of Vault policies.
                                type: string
                              secretRef:
                                description: The required Secret field containing a Kubernetes
                                  ServiceAccount JWT used for authenticating with Vault.
                                  Use of 'ambient credentials' is not supported.
                                properties:
                                  key:
                                    description: The key of the entry in the Secret resource's
                                      `data` field to be used. Some instances of this
                                      field may be defaulted, in others it may be required.
                                    type: string
                                  name:
                                    description: 'Name of the resource being referred
                                      to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                    type: string
                                required:
                                - name
                                type: object
                            required:
                            - role
                            - secretRef
                            type: object
                          tokenSecretRef:
                            description: TokenSecretRef authenticates with Vault by presenting
                              a token.
                            properties:
                              key:
                                description: The key of the entry in the Secret resource's
                                  `data` field to be used. Some instances of this field
                                  may be defaulted, in others it may be required.
                                type: string
                              name:
                                description: 'Name of the resource being referred to.
                                  More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                            required:
                            - name
                            type: object
                        type: object
                      caBundle:
                        description: PEM-encoded CA bundle (base64-encoded) used to validate
                          Vault server certificate. Only used if the Server URL is using
                          HTTPS protocol. This parameter is ignored for plain HTTP protocol
                          connection. If not set the system root certificates are used
                          to validate the TLS connection.
                        format: byte
                        type: string
                      namespace:
                        description: 'Name of the vault namespace. Namespaces is a set
                          of features within Vault Enterprise that allows Vault environments
                          to support Secure Multi-tenancy. e.g: "ns1" More about namespaces
                          can be found here https://www.vaultproject.io/docs/enterprise/namespaces'
                        type: string
                      path:
                        description: 'Path is the mount path of the Vault PKI backend''s
                          `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".'
                        type: string
                      server:
                        description: 'Server is the connection address for the Vault server,
                          e.g: "https://vault.example.com:8200".'
                        type: string
                    required:
                    - auth
                    - path
                    - server
                    type: object
                  venafi:
                    description: Venafi configures this issuer to sign certificates using
                      a Venafi TPP or Venafi Cloud policy zone.
                    properties:
                      cloud:
                        description: Cloud specifies the Venafi cloud configuration settings.
                          Only one of TPP or Cloud may be specified.
                        properties:
                          apiTokenSecretRef:
                            description: APITokenSecretRef is a secret key selector for
                              the Venafi Cloud API token.
                            properties:
                              key:
                                description: The key of the entry in the Secret resource's
                                  `data` field to be used. Some instances of this field
                                  may be defaulted, in others it may be required.
                                type: string
                              name:
                                description: 'Name of the resource being referred to.
                                  More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                            required:
                            - name
                            type: object
                          url:
                            description: URL is the base URL for Venafi Cloud. Defaults
                              to "https://api.venafi.cloud/v1".
                            type: string
                        required:
                        - apiTokenSecretRef
                        type: object
                      tpp:
                        description: TPP specifies Trust Protection Platform configuration
                          settings. Only one of TPP or Cloud may be specified.
                        properties:
                          caBundle:
                            description: CABundle is a PEM encoded TLS certificate to
                              use to verify connections to the TPP instance. If specified,
                              system roots will not be used and the issuing CA for the
                              TPP instance must be verifiable using the provided root.
                              If not specified, the connection will be verified using
                              the cert-manager system root certificates.
                            format: byte
                            type: string
                          credentialsRef:
                            description: CredentialsRef is a reference to a Secret containing
                              the username and password for the TPP server. The secret
                              must contain two keys, 'username' and 'password'.
                            properties:
                              name:
                                description: 'Name of the resource being referred to.
                                  More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                            required:
                            - name
                            type: object
                          url:
                            description: 'URL is the base URL for the vedsdk endpoint
                              of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".'
                            type: string
                        required:
                        - credentialsRef
                        - url
                        type: object
                      zone:
                        description: Zone is the Venafi Policy Zone to use for this issuer.
                          All requests made to the Venafi platform will be restricted
                          by the named zone policy. This field is required.
                        type: string
                    required:
                    - zone
                    type: object
                type: object
              status:
                description: Status of the ClusterIssuer. This is set and managed automatically.
                properties:
                  acme:
                    description: ACME specific status options. This field should only
                      be set if the Issuer is configured to use an ACME server to issue
                      certificates.
                    properties:
                      lastRegisteredEmail:
                        description: LastRegisteredEmail is the email associated with
                          the latest registered ACME account, in order to track changes
                          made to registered account associated with the  Issuer
                        type: string
                      uri:
                        description: URI is the unique account identifier, which can also
                          be used to retrieve account details from the CA
                        type: string
                    type: object
                  conditions:
                    description: List of status conditions to indicate the status of a
                      CertificateRequest. Known condition types are `Ready`.
                    items:
                      description: IssuerCondition contains condition information for
                        an Issuer.
                      properties:
                        lastTransitionTime:
                          description: LastTransitionTime is the timestamp corresponding
                            to the last status change of this condition.
                          format: date-time
                          type: string
                        message:
                          description: Message is a human readable description of the
                            details of the last transition, complementing reason.
                          type: string
                        observedGeneration:
                          description: If set, this represents the .metadata.generation
                            that the condition was set based upon. For instance, if .metadata.generation
                            is currently 12, but the .status.condition[x].observedGeneration
                            is 9, the condition is out of date with respect to the current
                            state of the Issuer.
                          format: int64
                          type: integer
                        reason:
                          description: Reason is a brief machine readable explanation
                            for the condition's last transition.
                          type: string
                        status:
                          description: Status of the condition, one of (`True`, `False`,
                            `Unknown`).
                          enum:
                          - "True"
                          - "False"
                          - Unknown
                          type: string
                        type:
                          description: Type of the condition, known values are (`Ready`).
                          type: string
                      required:
                      - status
                      - type
                      type: object
                    type: array
                type: object
            type: object
        served: true
        storage: false
        subresources:
          status: {}
      - additionalPrinterColumns:
        - jsonPath: .status.conditions[?(@.type=="Ready")].status
          name: Ready
          type: string
        - jsonPath: .status.conditions[?(@.type=="Ready")].message
          name: Status
          priority: 1
          type: string
        - description: CreationTimestamp is a timestamp representing the server time when
            this object was created. It is not guaranteed to be set in happens-before
            order across separate operations. Clients may not set this value. It is represented
            in RFC3339 form and is in UTC.
          jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
        name: v1alpha3
        schema:
          openAPIV3Schema:
            description: A ClusterIssuer represents a certificate issuing authority which
              can be referenced as part of `issuerRef` fields. It is similar to an Issuer,
              however it is cluster-scoped and therefore can be referenced by resources
              that exist in *any* namespace, not just the same namespace as the referent.
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: Desired state of the ClusterIssuer resource.
                properties:
                  acme:
                    description: ACME configures this issuer to communicate with a RFC8555
                      (ACME) server to obtain signed x509 certificates.
                    properties:
                      disableAccountKeyGeneration:
                        description: Enables or disables generating a new ACME account
                          key. If true, the Issuer resource will *not* request a new account
                          but will expect the account key to be supplied via an existing
                          secret. If false, the cert-manager system will generate a new
                          ACME account key for the Issuer. Defaults to false.
                        type: boolean
                      email:
                        description: Email is the email address to be associated with
                          the ACME account. This field is optional, but it is strongly
                          recommended to be set. It will be used to contact you in case
                          of issues with your account or certificates, including expiry
                          notification emails. This field may be updated after the account
                          is initially registered.
                        type: string
                      enableDurationFeature:
                        description: Enables requesting a Not After date on certificates
                          that matches the duration of the certificate. This is not supported
                          by all ACME servers like Let's Encrypt. If set to true when
                          the ACME server does not support it it will create an error
                          on the Order. Defaults to false.
                        type: boolean
                      externalAccountBinding:
                        description: ExternalAccountBinding is a reference to a CA external
                          account of the ACME server. If set, upon registration cert-manager
                          will attempt to associate the given external account credentials
                          with the registered ACME account.
                        properties:
                          keyAlgorithm:
                            description: 'Deprecated: keyAlgorithm field exists for historical
                              compatibility reasons and should not be used. The algorithm
                              is now hardcoded to HS256 in golang/x/crypto/acme.'
                            enum:
                            - HS256
                            - HS384
                            - HS512
                            type: string
                          keyID:
                            description: keyID is the ID of the CA key that the External
                              Account is bound to.
                            type: string
                          keySecretRef:
                            description: keySecretRef is a Secret Key Selector referencing
                              a data item in a Kubernetes Secret which holds the symmetric
                              MAC key of the External Account Binding. The `key` is the
                              index string that is paired with the key data in the Secret
                              and should not be confused with the key data itself, or
                              indeed with the External Account Binding keyID above. The
                              secret key stored in the Secret **must** be un-padded, base64
                              URL encoded data.
                            properties:
                              key:
                                description: The key of the entry in the Secret resource's
                                  `data` field to be used. Some instances of this field
                                  may be defaulted, in others it may be required.
                                type: string
                              name:
                                description: 'Name of the resource being referred to.
                                  More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                            required:
                            - name
                            type: object
                        required:
                        - keyID
                        - keySecretRef
                        type: object
                      preferredChain:
                        description: 'PreferredChain is the chain to use if the ACME server
                          outputs multiple. PreferredChain is no guarantee that this one
                          gets delivered by the ACME endpoint. For example, for Let''s
                          Encrypt''s DST crosssign you would use: "DST Root CA X3" or
                          "ISRG Root X1" for the newer Let''s Encrypt root CA. This value
                          picks the first certificate bundle in the ACME alternative chains
                          that has a certificate with this value as its issuer''s CN'
                        maxLength: 64
                        type: string
                      privateKeySecretRef:
                        description: PrivateKey is the name of a Kubernetes Secret resource
                          that will be used to store the automatically generated ACME
                          account private key. Optionally, a `key` may be specified to
                          select a specific entry within the named Secret resource. If
                          `key` is not specified, a default of `tls.key` will be used.
                        properties:
                          key:
                            description: The key of the entry in the Secret resource's
                              `data` field to be used. Some instances of this field may
                              be defaulted, in others it may be required.
                            type: string
                          name:
                            description: 'Name of the resource being referred to. More
                              info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                        required:
                        - name
                        type: object
                      server:
                        description: 'Server is the URL used to access the ACME server''s
                          ''directory'' endpoint. For example, for Let''s Encrypt''s staging
                          endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory".
                          Only ACME v2 endpoints (i.e. RFC 8555) are supported.'
                        type: string
                      skipTLSVerify:
                        description: Enables or disables validation of the ACME server
                          TLS certificate. If true, requests to the ACME server will not
                          have their TLS certificate validated (i.e. insecure connections
                          will be allowed). Only enable this option in development environments.
                          The cert-manager system installed roots will be used to verify
                          connections to the ACME server if this is false. Defaults to
                          false.
                        type: boolean
                      solvers:
                        description: 'Solvers is a list of challenge solvers that will
                          be used to solve ACME challenges for the matching domains. Solver
                          configurations must be provided in order to obtain certificates
                          from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/'
                        items:
                          description: Configures an issuer to solve challenges using
                            the specified options. Only one of HTTP01 or DNS01 may be
                            provided.
                          properties:
                            dns01:
                              description: Configures cert-manager to attempt to complete
                                authorizations by performing the DNS01 challenge flow.
                              properties:
                                acmedns:
                                  description: Use the 'ACME DNS' (https://github.com/joohoi/acme-dns)
                                    API to manage DNS01 challenge records.
                                  properties:
                                    accountSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    host:
                                      type: string
                                  required:
                                  - accountSecretRef
                                  - host
                                  type: object
                                akamai:
                                  description: Use the Akamai DNS zone management API
                                    to manage DNS01 challenge records.
                                  properties:
                                    accessTokenSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    clientSecretSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    clientTokenSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    serviceConsumerDomain:
                                      type: string
                                  required:
                                  - accessTokenSecretRef
                                  - clientSecretSecretRef
                                  - clientTokenSecretRef
                                  - serviceConsumerDomain
                                  type: object
                                azuredns:
                                  description: Use the Microsoft Azure DNS API to manage
                                    DNS01 challenge records.
                                  properties:
                                    clientID:
                                      description: if both this and ClientSecret are left
                                        unset MSI will be used
                                      type: string
                                    clientSecretSecretRef:
                                      description: if both this and ClientID are left
                                        unset MSI will be used
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    environment:
                                      enum:
                                      - AzurePublicCloud
                                      - AzureChinaCloud
                                      - AzureGermanCloud
                                      - AzureUSGovernmentCloud
                                      type: string
                                    hostedZoneName:
                                      type: string
                                    resourceGroupName:
                                      type: string
                                    subscriptionID:
                                      type: string
                                    tenantID:
                                      description: when specifying ClientID and ClientSecret
                                        then this field is also needed
                                      type: string
                                  required:
                                  - resourceGroupName
                                  - subscriptionID
                                  type: object
                                clouddns:
                                  description: Use the Google Cloud DNS API to manage
                                    DNS01 challenge records.
                                  properties:
                                    hostedZoneName:
                                      description: HostedZoneName is an optional field
                                        that tells cert-manager in which Cloud DNS zone
                                        the challenge record has to be created. If left
                                        empty cert-manager will automatically choose a
                                        zone.
                                      type: string
                                    project:
                                      type: string
                                    serviceAccountSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                  required:
                                  - project
                                  type: object
                                cloudflare:
                                  description: Use the Cloudflare API to manage DNS01
                                    challenge records.
                                  properties:
                                    apiKeySecretRef:
                                      description: 'API key to use to authenticate with
                                        Cloudflare. Note: using an API token to authenticate
                                        is now the recommended method as it allows greater
                                        control of permissions.'
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    apiTokenSecretRef:
                                      description: API token used to authenticate with
                                        Cloudflare.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    email:
                                      description: Email of the account, only required
                                        when using API key based authentication.
                                      type: string
                                  type: object
                                cnameStrategy:
                                  description: CNAMEStrategy configures how the DNS01
                                    provider should handle CNAME records when found in
                                    DNS zones.
                                  enum:
                                  - None
                                  - Follow
                                  type: string
                                digitalocean:
                                  description: Use the DigitalOcean DNS API to manage
                                    DNS01 challenge records.
                                  properties:
                                    tokenSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                  required:
                                  - tokenSecretRef
                                  type: object
                                rfc2136:
                                  description: Use RFC2136 ("Dynamic Updates in the Domain
                                    Name System") (https://datatracker.ietf.org/doc/rfc2136/)
                                    to manage DNS01 challenge records.
                                  properties:
                                    nameserver:
                                      description: The IP address or hostname of an authoritative
                                        DNS server supporting RFC2136 in the form host:port.
                                        If the host is an IPv6 address it must be enclosed
                                        in square brackets (e.g [2001:db8::1]) ; port
                                        is optional. This field is required.
                                      type: string
                                    tsigAlgorithm:
                                      description: 'The TSIG Algorithm configured in the
                                        DNS supporting RFC2136. Used only when ``tsigSecretSecretRef``
                                        and ``tsigKeyName`` are defined. Supported values
                                        are (case-insensitive): ``HMACMD5`` (default),
                                        ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.'
                                      type: string
                                    tsigKeyName:
                                      description: The TSIG Key name configured in the
                                        DNS. If ``tsigSecretSecretRef`` is defined, this
                                        field is required.
                                      type: string
                                    tsigSecretSecretRef:
                                      description: The name of the secret containing the
                                        TSIG value. If ``tsigKeyName`` is defined, this
                                        field is required.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                  required:
                                  - nameserver
                                  type: object
                                route53:
                                  description: Use the AWS Route53 API to manage DNS01
                                    challenge records.
                                  properties:
                                    accessKeyID:
                                      description: 'The AccessKeyID is used for authentication.
                                        If not set we fall-back to using env vars, shared
                                        credentials file or AWS Instance metadata see:
                                        https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials'
                                      type: string
                                    hostedZoneID:
                                      description: If set, the provider will manage only
                                        this zone in Route53 and will not do an lookup
                                        using the route53:ListHostedZonesByName api call.
                                      type: string
                                    region:
                                      description: Always set the region when using AccessKeyID
                                        and SecretAccessKey
                                      type: string
                                    role:
                                      description: Role is a Role ARN which the Route53
                                        provider will assume using either the explicit
                                        credentials AccessKeyID/SecretAccessKey or the
                                        inferred credentials from environment variables,
                                        shared credentials file or AWS Instance metadata
                                      type: string
                                    secretAccessKeySecretRef:
                                      description: The SecretAccessKey is used for authentication.
                                        If not set we fall-back to using env vars, shared
                                        credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                  required:
                                  - region
                                  type: object
                                webhook:
                                  description: Configure an external webhook based DNS01
                                    challenge solver to manage DNS01 challenge records.
                                  properties:
                                    config:
                                      description: Additional configuration that should
                                        be passed to the webhook apiserver when challenges
                                        are processed. This can contain arbitrary JSON
                                        data. Secret values should not be specified in
                                        this stanza. If secret values are needed (e.g.
                                        credentials for a DNS service), you should use
                                        a SecretKeySelector to reference a Secret resource.
                                        For details on the schema of this field, consult
                                        the webhook provider implementation's documentation.
                                      x-kubernetes-preserve-unknown-fields: true
                                    groupName:
                                      description: The API group name that should be used
                                        when POSTing ChallengePayload resources to the
                                        webhook apiserver. This should be the same as
                                        the GroupName specified in the webhook provider
                                        implementation.
                                      type: string
                                    solverName:
                                      description: The name of the solver to use, as defined
                                        in the webhook provider implementation. This will
                                        typically be the name of the provider, e.g. 'cloudflare'.
                                      type: string
                                  required:
                                  - groupName
                                  - solverName
                                  type: object
                              type: object
                            http01:
                              description: Configures cert-manager to attempt to complete
                                authorizations by performing the HTTP01 challenge flow.
                                It is not possible to obtain certificates for wildcard
                                domain names (e.g. `*.example.com`) using the HTTP01 challenge
                                mechanism.
                              properties:
                                gatewayHTTPRoute:
                                  description: The Gateway API is a sig-network community
                                    API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/).
                                    The Gateway solver will create HTTPRoutes with the
                                    specified labels in the same namespace as the challenge.
                                    This solver is experimental, and fields / behaviour
                                    may change in the future.
                                  properties:
                                    labels:
                                      additionalProperties:
                                        type: string
                                      description: The labels that cert-manager will use
                                        when creating the temporary HTTPRoute needed for
                                        solving the HTTP-01 challenge. These labels must
                                        match the label selector of at least one Gateway.
                                      type: object
                                    serviceType:
                                      description: Optional service type for Kubernetes
                                        solver service. Supported values are NodePort
                                        or ClusterIP. If unset, defaults to NodePort.
                                      type: string
                                  type: object
                                ingress:
                                  description: The ingress based HTTP01 challenge solver
                                    will solve challenges by creating or modifying Ingress
                                    resources in order to route requests for '/.well-known/acme-challenge/XYZ'
                                    to 'challenge solver' pods that are provisioned by
                                    cert-manager for each Challenge to be completed.
                                  properties:
                                    class:
                                      description: The ingress class to use when creating
                                        Ingress resources to solve ACME challenges that
                                        use this challenge solver. Only one of 'class'
                                        or 'name' may be specified.
                                      type: string
                                    ingressTemplate:
                                      description: Optional ingress template used to configure
                                        the ACME challenge solver ingress used for HTTP01
                                        challenges
                                      properties:
                                        metadata:
                                          description: ObjectMeta overrides for the ingress
                                            used to solve HTTP01 challenges. Only the
                                            'labels' and 'annotations' fields may be set.
                                            If labels or annotations overlap with in-built
                                            values, the values here will override the
                                            in-built values.
                                          properties:
                                            annotations:
                                              additionalProperties:
                                                type: string
                                              description: Annotations that should be
                                                added to the created ACME HTTP01 solver
                                                ingress.
                                              type: object
                                            labels:
                                              additionalProperties:
                                                type: string
                                              description: Labels that should be added
                                                to the created ACME HTTP01 solver ingress.
                                              type: object
                                          type: object
                                      type: object
                                    name:
                                      description: The name of the ingress resource that
                                        should have ACME challenge solving routes inserted
                                        into it in order to solve HTTP01 challenges. This
                                        is typically used in conjunction with ingress
                                        controllers like ingress-gce, which maintains
                                        a 1:1 mapping between external IPs and ingress
                                        resources.
                                      type: string
                                    podTemplate:
                                      description: Optional pod template used to configure
                                        the ACME challenge solver pods used for HTTP01
                                        challenges.
                                      properties:
                                        metadata:
                                          description: ObjectMeta overrides for the pod
                                            used to solve HTTP01 challenges. Only the
                                            'labels' and 'annotations' fields may be set.
                                            If labels or annotations overlap with in-built
                                            values, the values here will override the
                                            in-built values.
                                          properties:
                                            annotations:
                                              additionalProperties:
                                                type: string
                                              description: Annotations that should be
                                                added to the create ACME HTTP01 solver
                                                pods.
                                              type: object
                                            labels:
                                              additionalProperties:
                                                type: string
                                              description: Labels that should be added
                                                to the created ACME HTTP01 solver pods.
                                              type: object
                                          type: object
                                        spec:
                                          description: PodSpec defines overrides for the
                                            HTTP01 challenge solver pod. Only the 'priorityClassName',
                                            'nodeSelector', 'affinity', 'serviceAccountName'
                                            and 'tolerations' fields are supported currently.
                                            All other fields will be ignored.
                                          properties:
                                            affinity:
                                              description: If specified, the pod's scheduling
                                                constraints
                                              properties:
                                                nodeAffinity:
                                                  description: Describes node affinity
                                                    scheduling rules for the pod.
                                                  properties:
                                                    preferredDuringSchedulingIgnoredDuringExecution:
                                                      description: The scheduler will
                                                        prefer to schedule pods to nodes
                                                        that satisfy the affinity expressions
                                                        specified by this field, but it
                                                        may choose a node that violates
                                                        one or more of the expressions.
                                                        The node that is most preferred
                                                        is the one with the greatest sum
                                                        of weights, i.e. for each node
                                                        that meets all of the scheduling
                                                        requirements (resource request,
                                                        requiredDuringScheduling affinity
                                                        expressions, etc.), compute a
                                                        sum by iterating through the elements
                                                        of this field and adding "weight"
                                                        to the sum if the node matches
                                                        the corresponding matchExpressions;
                                                        the node(s) with the highest sum
                                                        are the most preferred.
                                                      items:
                                                        description: An empty preferred
                                                          scheduling term matches all
                                                          objects with implicit weight
                                                          0 (i.e. it's a no-op). A null
                                                          preferred scheduling term matches
                                                          no objects (i.e. is also a no-op).
                                                        properties:
                                                          preference:
                                                            description: A node selector
                                                              term, associated with the
                                                              corresponding weight.
                                                            properties:
                                                              matchExpressions:
                                                                description: A list of
                                                                  node selector requirements
                                                                  by node's labels.
                                                                items:
                                                                  description: A node
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: The
                                                                        label key that
                                                                        the selector applies
                                                                        to.
                                                                      type: string
                                                                    operator:
                                                                      description: Represents
                                                                        a key's relationship
                                                                        to a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists, DoesNotExist.
                                                                        Gt, and Lt.
                                                                      type: string
                                                                    values:
                                                                      description: An
                                                                        array of string
                                                                        values. If the
                                                                        operator is In
                                                                        or NotIn, the
                                                                        values array must
                                                                        be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        If the operator
                                                                        is Gt or Lt, the
                                                                        values array must
                                                                        have a single
                                                                        element, which
                                                                        will be interpreted
                                                                        as an integer.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchFields:
                                                                description: A list of
                                                                  node selector requirements
                                                                  by node's fields.
                                                                items:
                                                                  description: A node
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: The
                                                                        label key that
                                                                        the selector applies
                                                                        to.
                                                                      type: string
                                                                    operator:
                                                                      description: Represents
                                                                        a key's relationship
                                                                        to a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists, DoesNotExist.
                                                                        Gt, and Lt.
                                                                      type: string
                                                                    values:
                                                                      description: An
                                                                        array of string
                                                                        values. If the
                                                                        operator is In
                                                                        or NotIn, the
                                                                        values array must
                                                                        be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        If the operator
                                                                        is Gt or Lt, the
                                                                        values array must
                                                                        have a single
                                                                        element, which
                                                                        will be interpreted
                                                                        as an integer.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                            type: object
                                                          weight:
                                                            description: Weight associated
                                                              with matching the corresponding
                                                              nodeSelectorTerm, in the
                                                              range 1-100.
                                                            format: int32
                                                            type: integer
                                                        required:
                                                        - preference
                                                        - weight
                                                        type: object
                                                      type: array
                                                    requiredDuringSchedulingIgnoredDuringExecution:
                                                      description: If the affinity requirements
                                                        specified by this field are not
                                                        met at scheduling time, the pod
                                                        will not be scheduled onto the
                                                        node. If the affinity requirements
                                                        specified by this field cease
                                                        to be met at some point during
                                                        pod execution (e.g. due to an
                                                        update), the system may or may
                                                        not try to eventually evict the
                                                        pod from its node.
                                                      properties:
                                                        nodeSelectorTerms:
                                                          description: Required. A list
                                                            of node selector terms. The
                                                            terms are ORed.
                                                          items:
                                                            description: A null or empty
                                                              node selector term matches
                                                              no objects. The requirements
                                                              of them are ANDed. The TopologySelectorTerm
                                                              type implements a subset
                                                              of the NodeSelectorTerm.
                                                            properties:
                                                              matchExpressions:
                                                                description: A list of
                                                                  node selector requirements
                                                                  by node's labels.
                                                                items:
                                                                  description: A node
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: The
                                                                        label key that
                                                                        the selector applies
                                                                        to.
                                                                      type: string
                                                                    operator:
                                                                      description: Represents
                                                                        a key's relationship
                                                                        to a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists, DoesNotExist.
                                                                        Gt, and Lt.
                                                                      type: string
                                                                    values:
                                                                      description: An
                                                                        array of string
                                                                        values. If the
                                                                        operator is In
                                                                        or NotIn, the
                                                                        values array must
                                                                        be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        If the operator
                                                                        is Gt or Lt, the
                                                                        values array must
                                                                        have a single
                                                                        element, which
                                                                        will be interpreted
                                                                        as an integer.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchFields:
                                                                description: A list of
                                                                  node selector requirements
                                                                  by node's fields.
                                                                items:
                                                                  description: A node
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: The
                                                                        label key that
                                                                        the selector applies
                                                                        to.
                                                                      type: string
                                                                    operator:
                                                                      description: Represents
                                                                        a key's relationship
                                                                        to a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists, DoesNotExist.
                                                                        Gt, and Lt.
                                                                      type: string
                                                                    values:
                                                                      description: An
                                                                        array of string
                                                                        values. If the
                                                                        operator is In
                                                                        or NotIn, the
                                                                        values array must
                                                                        be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        If the operator
                                                                        is Gt or Lt, the
                                                                        values array must
                                                                        have a single
                                                                        element, which
                                                                        will be interpreted
                                                                        as an integer.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                            type: object
                                                          type: array
                                                      required:
                                                      - nodeSelectorTerms
                                                      type: object
                                                  type: object
                                                podAffinity:
                                                  description: Describes pod affinity
                                                    scheduling rules (e.g. co-locate this
                                                    pod in the same node, zone, etc. as
                                                    some other pod(s)).
                                                  properties:
                                                    preferredDuringSchedulingIgnoredDuringExecution:
                                                      description: The scheduler will
                                                        prefer to schedule pods to nodes
                                                        that satisfy the affinity expressions
                                                        specified by this field, but it
                                                        may choose a node that violates
                                                        one or more of the expressions.
                                                        The node that is most preferred
                                                        is the one with the greatest sum
                                                        of weights, i.e. for each node
                                                        that meets all of the scheduling
                                                        requirements (resource request,
                                                        requiredDuringScheduling affinity
                                                        expressions, etc.), compute a
                                                        sum by iterating through the elements
                                                        of this field and adding "weight"
                                                        to the sum if the node has pods
                                                        which matches the corresponding
                                                        podAffinityTerm; the node(s) with
                                                        the highest sum are the most preferred.
                                                      items:
                                                        description: The weights of all
                                                          of the matched WeightedPodAffinityTerm
                                                          fields are added per-node to
                                                          find the most preferred node(s)
                                                        properties:
                                                          podAffinityTerm:
                                                            description: Required. A pod
                                                              affinity term, associated
                                                              with the corresponding weight.
                                                            properties:
                                                              labelSelector:
                                                                description: A label query
                                                                  over a set of resources,
                                                                  in this case pods.
                                                                properties:
                                                                  matchExpressions:
                                                                    description: matchExpressions
                                                                      is a list of label
                                                                      selector requirements.
                                                                      The requirements
                                                                      are ANDed.
                                                                    items:
                                                                      description: A label
                                                                        selector requirement
                                                                        is a selector
                                                                        that contains
                                                                        values, a key,
                                                                        and an operator
                                                                        that relates the
                                                                        key and values.
                                                                      properties:
                                                                        key:
                                                                          description: key
                                                                            is the label
                                                                            key that the
                                                                            selector applies
                                                                            to.
                                                                          type: string
                                                                        operator:
                                                                          description: operator
                                                                            represents
                                                                            a key's relationship
                                                                            to a set of
                                                                            values. Valid
                                                                            operators
                                                                            are In, NotIn,
                                                                            Exists and
                                                                            DoesNotExist.
                                                                          type: string
                                                                        values:
                                                                          description: values
                                                                            is an array
                                                                            of string
                                                                            values. If
                                                                            the operator
                                                                            is In or NotIn,
                                                                            the values
                                                                            array must
                                                                            be non-empty.
                                                                            If the operator
                                                                            is Exists
                                                                            or DoesNotExist,
                                                                            the values
                                                                            array must
                                                                            be empty.
                                                                            This array
                                                                            is replaced
                                                                            during a strategic
                                                                            merge patch.
                                                                          items:
                                                                            type: string
                                                                          type: array
                                                                      required:
                                                                      - key
                                                                      - operator
                                                                      type: object
                                                                    type: array
                                                                  matchLabels:
                                                                    additionalProperties:
                                                                      type: string
                                                                    description: matchLabels
                                                                      is a map of {key,value}
                                                                      pairs. A single
                                                                      {key,value} in the
                                                                      matchLabels map
                                                                      is equivalent to
                                                                      an element of matchExpressions,
                                                                      whose key field
                                                                      is "key", the operator
                                                                      is "In", and the
                                                                      values array contains
                                                                      only "value". The
                                                                      requirements are
                                                                      ANDed.
                                                                    type: object
                                                                type: object
                                                              namespaceSelector:
                                                                description: A label query
                                                                  over the set of namespaces
                                                                  that the term applies
                                                                  to. The term is applied
                                                                  to the union of the
                                                                  namespaces selected
                                                                  by this field and the
                                                                  ones listed in the namespaces
                                                                  field. null selector
                                                                  and null or empty namespaces
                                                                  list means "this pod's
                                                                  namespace". An empty
                                                                  selector ({}) matches
                                                                  all namespaces. This
                                                                  field is alpha-level
                                                                  and is only honored
                                                                  when PodAffinityNamespaceSelector
                                                                  feature is enabled.
                                                                properties:
                                                                  matchExpressions:
                                                                    description: matchExpressions
                                                                      is a list of label
                                                                      selector requirements.
                                                                      The requirements
                                                                      are ANDed.
                                                                    items:
                                                                      description: A label
                                                                        selector requirement
                                                                        is a selector
                                                                        that contains
                                                                        values, a key,
                                                                        and an operator
                                                                        that relates the
                                                                        key and values.
                                                                      properties:
                                                                        key:
                                                                          description: key
                                                                            is the label
                                                                            key that the
                                                                            selector applies
                                                                            to.
                                                                          type: string
                                                                        operator:
                                                                          description: operator
                                                                            represents
                                                                            a key's relationship
                                                                            to a set of
                                                                            values. Valid
                                                                            operators
                                                                            are In, NotIn,
                                                                            Exists and
                                                                            DoesNotExist.
                                                                          type: string
                                                                        values:
                                                                          description: values
                                                                            is an array
                                                                            of string
                                                                            values. If
                                                                            the operator
                                                                            is In or NotIn,
                                                                            the values
                                                                            array must
                                                                            be non-empty.
                                                                            If the operator
                                                                            is Exists
                                                                            or DoesNotExist,
                                                                            the values
                                                                            array must
                                                                            be empty.
                                                                            This array
                                                                            is replaced
                                                                            during a strategic
                                                                            merge patch.
                                                                          items:
                                                                            type: string
                                                                          type: array
                                                                      required:
                                                                      - key
                                                                      - operator
                                                                      type: object
                                                                    type: array
                                                                  matchLabels:
                                                                    additionalProperties:
                                                                      type: string
                                                                    description: matchLabels
                                                                      is a map of {key,value}
                                                                      pairs. A single
                                                                      {key,value} in the
                                                                      matchLabels map
                                                                      is equivalent to
                                                                      an element of matchExpressions,
                                                                      whose key field
                                                                      is "key", the operator
                                                                      is "In", and the
                                                                      values array contains
                                                                      only "value". The
                                                                      requirements are
                                                                      ANDed.
                                                                    type: object
                                                                type: object
                                                              namespaces:
                                                                description: namespaces
                                                                  specifies a static list
                                                                  of namespace names that
                                                                  the term applies to.
                                                                  The term is applied
                                                                  to the union of the
                                                                  namespaces listed in
                                                                  this field and the ones
                                                                  selected by namespaceSelector.
                                                                  null or empty namespaces
                                                                  list and null namespaceSelector
                                                                  means "this pod's namespace"
                                                                items:
                                                                  type: string
                                                                type: array
                                                              topologyKey:
                                                                description: This pod
                                                                  should be co-located
                                                                  (affinity) or not co-located
                                                                  (anti-affinity) with
                                                                  the pods matching the
                                                                  labelSelector in the
                                                                  specified namespaces,
                                                                  where co-located is
                                                                  defined as running on
                                                                  a node whose value of
                                                                  the label with key topologyKey
                                                                  matches that of any
                                                                  node on which any of
                                                                  the selected pods is
                                                                  running. Empty topologyKey
                                                                  is not allowed.
                                                                type: string
                                                            required:
                                                            - topologyKey
                                                            type: object
                                                          weight:
                                                            description: weight associated
                                                              with matching the corresponding
                                                              podAffinityTerm, in the
                                                              range 1-100.
                                                            format: int32
                                                            type: integer
                                                        required:
                                                        - podAffinityTerm
                                                        - weight
                                                        type: object
                                                      type: array
                                                    requiredDuringSchedulingIgnoredDuringExecution:
                                                      description: If the affinity requirements
                                                        specified by this field are not
                                                        met at scheduling time, the pod
                                                        will not be scheduled onto the
                                                        node. If the affinity requirements
                                                        specified by this field cease
                                                        to be met at some point during
                                                        pod execution (e.g. due to a pod
                                                        label update), the system may
                                                        or may not try to eventually evict
                                                        the pod from its node. When there
                                                        are multiple elements, the lists
                                                        of nodes corresponding to each
                                                        podAffinityTerm are intersected,
                                                        i.e. all terms must be satisfied.
                                                      items:
                                                        description: Defines a set of
                                                          pods (namely those matching
                                                          the labelSelector relative to
                                                          the given namespace(s)) that
                                                          this pod should be co-located
                                                          (affinity) or not co-located
                                                          (anti-affinity) with, where
                                                          co-located is defined as running
                                                          on a node whose value of the
                                                          label with key <topologyKey>
                                                          matches that of any node on
                                                          which a pod of the set of pods
                                                          is running
                                                        properties:
                                                          labelSelector:
                                                            description: A label query
                                                              over a set of resources,
                                                              in this case pods.
                                                            properties:
                                                              matchExpressions:
                                                                description: matchExpressions
                                                                  is a list of label selector
                                                                  requirements. The requirements
                                                                  are ANDed.
                                                                items:
                                                                  description: A label
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: key
                                                                        is the label key
                                                                        that the selector
                                                                        applies to.
                                                                      type: string
                                                                    operator:
                                                                      description: operator
                                                                        represents a key's
                                                                        relationship to
                                                                        a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists and DoesNotExist.
                                                                      type: string
                                                                    values:
                                                                      description: values
                                                                        is an array of
                                                                        string values.
                                                                        If the operator
                                                                        is In or NotIn,
                                                                        the values array
                                                                        must be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchLabels:
                                                                additionalProperties:
                                                                  type: string
                                                                description: matchLabels
                                                                  is a map of {key,value}
                                                                  pairs. A single {key,value}
                                                                  in the matchLabels map
                                                                  is equivalent to an
                                                                  element of matchExpressions,
                                                                  whose key field is "key",
                                                                  the operator is "In",
                                                                  and the values array
                                                                  contains only "value".
                                                                  The requirements are
                                                                  ANDed.
                                                                type: object
                                                            type: object
                                                          namespaceSelector:
                                                            description: A label query
                                                              over the set of namespaces
                                                              that the term applies to.
                                                              The term is applied to the
                                                              union of the namespaces
                                                              selected by this field and
                                                              the ones listed in the namespaces
                                                              field. null selector and
                                                              null or empty namespaces
                                                              list means "this pod's namespace".
                                                              An empty selector ({}) matches
                                                              all namespaces. This field
                                                              is alpha-level and is only
                                                              honored when PodAffinityNamespaceSelector
                                                              feature is enabled.
                                                            properties:
                                                              matchExpressions:
                                                                description: matchExpressions
                                                                  is a list of label selector
                                                                  requirements. The requirements
                                                                  are ANDed.
                                                                items:
                                                                  description: A label
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: key
                                                                        is the label key
                                                                        that the selector
                                                                        applies to.
                                                                      type: string
                                                                    operator:
                                                                      description: operator
                                                                        represents a key's
                                                                        relationship to
                                                                        a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists and DoesNotExist.
                                                                      type: string
                                                                    values:
                                                                      description: values
                                                                        is an array of
                                                                        string values.
                                                                        If the operator
                                                                        is In or NotIn,
                                                                        the values array
                                                                        must be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchLabels:
                                                                additionalProperties:
                                                                  type: string
                                                                description: matchLabels
                                                                  is a map of {key,value}
                                                                  pairs. A single {key,value}
                                                                  in the matchLabels map
                                                                  is equivalent to an
                                                                  element of matchExpressions,
                                                                  whose key field is "key",
                                                                  the operator is "In",
                                                                  and the values array
                                                                  contains only "value".
                                                                  The requirements are
                                                                  ANDed.
                                                                type: object
                                                            type: object
                                                          namespaces:
                                                            description: namespaces specifies
                                                              a static list of namespace
                                                              names that the term applies
                                                              to. The term is applied
                                                              to the union of the namespaces
                                                              listed in this field and
                                                              the ones selected by namespaceSelector.
                                                              null or empty namespaces
                                                              list and null namespaceSelector
                                                              means "this pod's namespace"
                                                            items:
                                                              type: string
                                                            type: array
                                                          topologyKey:
                                                            description: This pod should
                                                              be co-located (affinity)
                                                              or not co-located (anti-affinity)
                                                              with the pods matching the
                                                              labelSelector in the specified
                                                              namespaces, where co-located
                                                              is defined as running on
                                                              a node whose value of the
                                                              label with key topologyKey
                                                              matches that of any node
                                                              on which any of the selected
                                                              pods is running. Empty topologyKey
                                                              is not allowed.
                                                            type: string
                                                        required:
                                                        - topologyKey
                                                        type: object
                                                      type: array
                                                  type: object
                                                podAntiAffinity:
                                                  description: Describes pod anti-affinity
                                                    scheduling rules (e.g. avoid putting
                                                    this pod in the same node, zone, etc.
                                                    as some other pod(s)).
                                                  properties:
                                                    preferredDuringSchedulingIgnoredDuringExecution:
                                                      description: The scheduler will
                                                        prefer to schedule pods to nodes
                                                        that satisfy the anti-affinity
                                                        expressions specified by this
                                                        field, but it may choose a node
                                                        that violates one or more of the
                                                        expressions. The node that is
                                                        most preferred is the one with
                                                        the greatest sum of weights, i.e.
                                                        for each node that meets all of
                                                        the scheduling requirements (resource
                                                        request, requiredDuringScheduling
                                                        anti-affinity expressions, etc.),
                                                        compute a sum by iterating through
                                                        the elements of this field and
                                                        adding "weight" to the sum if
                                                        the node has pods which matches
                                                        the corresponding podAffinityTerm;
                                                        the node(s) with the highest sum
                                                        are the most preferred.
                                                      items:
                                                        description: The weights of all
                                                          of the matched WeightedPodAffinityTerm
                                                          fields are added per-node to
                                                          find the most preferred node(s)
                                                        properties:
                                                          podAffinityTerm:
                                                            description: Required. A pod
                                                              affinity term, associated
                                                              with the corresponding weight.
                                                            properties:
                                                              labelSelector:
                                                                description: A label query
                                                                  over a set of resources,
                                                                  in this case pods.
                                                                properties:
                                                                  matchExpressions:
                                                                    description: matchExpressions
                                                                      is a list of label
                                                                      selector requirements.
                                                                      The requirements
                                                                      are ANDed.
                                                                    items:
                                                                      description: A label
                                                                        selector requirement
                                                                        is a selector
                                                                        that contains
                                                                        values, a key,
                                                                        and an operator
                                                                        that relates the
                                                                        key and values.
                                                                      properties:
                                                                        key:
                                                                          description: key
                                                                            is the label
                                                                            key that the
                                                                            selector applies
                                                                            to.
                                                                          type: string
                                                                        operator:
                                                                          description: operator
                                                                            represents
                                                                            a key's relationship
                                                                            to a set of
                                                                            values. Valid
                                                                            operators
                                                                            are In, NotIn,
                                                                            Exists and
                                                                            DoesNotExist.
                                                                          type: string
                                                                        values:
                                                                          description: values
                                                                            is an array
                                                                            of string
                                                                            values. If
                                                                            the operator
                                                                            is In or NotIn,
                                                                            the values
                                                                            array must
                                                                            be non-empty.
                                                                            If the operator
                                                                            is Exists
                                                                            or DoesNotExist,
                                                                            the values
                                                                            array must
                                                                            be empty.
                                                                            This array
                                                                            is replaced
                                                                            during a strategic
                                                                            merge patch.
                                                                          items:
                                                                            type: string
                                                                          type: array
                                                                      required:
                                                                      - key
                                                                      - operator
                                                                      type: object
                                                                    type: array
                                                                  matchLabels:
                                                                    additionalProperties:
                                                                      type: string
                                                                    description: matchLabels
                                                                      is a map of {key,value}
                                                                      pairs. A single
                                                                      {key,value} in the
                                                                      matchLabels map
                                                                      is equivalent to
                                                                      an element of matchExpressions,
                                                                      whose key field
                                                                      is "key", the operator
                                                                      is "In", and the
                                                                      values array contains
                                                                      only "value". The
                                                                      requirements are
                                                                      ANDed.
                                                                    type: object
                                                                type: object
                                                              namespaceSelector:
                                                                description: A label query
                                                                  over the set of namespaces
                                                                  that the term applies
                                                                  to. The term is applied
                                                                  to the union of the
                                                                  namespaces selected
                                                                  by this field and the
                                                                  ones listed in the namespaces
                                                                  field. null selector
                                                                  and null or empty namespaces
                                                                  list means "this pod's
                                                                  namespace". An empty
                                                                  selector ({}) matches
                                                                  all namespaces. This
                                                                  field is alpha-level
                                                                  and is only honored
                                                                  when PodAffinityNamespaceSelector
                                                                  feature is enabled.
                                                                properties:
                                                                  matchExpressions:
                                                                    description: matchExpressions
                                                                      is a list of label
                                                                      selector requirements.
                                                                      The requirements
                                                                      are ANDed.
                                                                    items:
                                                                      description: A label
                                                                        selector requirement
                                                                        is a selector
                                                                        that contains
                                                                        values, a key,
                                                                        and an operator
                                                                        that relates the
                                                                        key and values.
                                                                      properties:
                                                                        key:
                                                                          description: key
                                                                            is the label
                                                                            key that the
                                                                            selector applies
                                                                            to.
                                                                          type: string
                                                                        operator:
                                                                          description: operator
                                                                            represents
                                                                            a key's relationship
                                                                            to a set of
                                                                            values. Valid
                                                                            operators
                                                                            are In, NotIn,
                                                                            Exists and
                                                                            DoesNotExist.
                                                                          type: string
                                                                        values:
                                                                          description: values
                                                                            is an array
                                                                            of string
                                                                            values. If
                                                                            the operator
                                                                            is In or NotIn,
                                                                            the values
                                                                            array must
                                                                            be non-empty.
                                                                            If the operator
                                                                            is Exists
                                                                            or DoesNotExist,
                                                                            the values
                                                                            array must
                                                                            be empty.
                                                                            This array
                                                                            is replaced
                                                                            during a strategic
                                                                            merge patch.
                                                                          items:
                                                                            type: string
                                                                          type: array
                                                                      required:
                                                                      - key
                                                                      - operator
                                                                      type: object
                                                                    type: array
                                                                  matchLabels:
                                                                    additionalProperties:
                                                                      type: string
                                                                    description: matchLabels
                                                                      is a map of {key,value}
                                                                      pairs. A single
                                                                      {key,value} in the
                                                                      matchLabels map
                                                                      is equivalent to
                                                                      an element of matchExpressions,
                                                                      whose key field
                                                                      is "key", the operator
                                                                      is "In", and the
                                                                      values array contains
                                                                      only "value". The
                                                                      requirements are
                                                                      ANDed.
                                                                    type: object
                                                                type: object
                                                              namespaces:
                                                                description: namespaces
                                                                  specifies a static list
                                                                  of namespace names that
                                                                  the term applies to.
                                                                  The term is applied
                                                                  to the union of the
                                                                  namespaces listed in
                                                                  this field and the ones
                                                                  selected by namespaceSelector.
                                                                  null or empty namespaces
                                                                  list and null namespaceSelector
                                                                  means "this pod's namespace"
                                                                items:
                                                                  type: string
                                                                type: array
                                                              topologyKey:
                                                                description: This pod
                                                                  should be co-located
                                                                  (affinity) or not co-located
                                                                  (anti-affinity) with
                                                                  the pods matching the
                                                                  labelSelector in the
                                                                  specified namespaces,
                                                                  where co-located is
                                                                  defined as running on
                                                                  a node whose value of
                                                                  the label with key topologyKey
                                                                  matches that of any
                                                                  node on which any of
                                                                  the selected pods is
                                                                  running. Empty topologyKey
                                                                  is not allowed.
                                                                type: string
                                                            required:
                                                            - topologyKey
                                                            type: object
                                                          weight:
                                                            description: weight associated
                                                              with matching the corresponding
                                                              podAffinityTerm, in the
                                                              range 1-100.
                                                            format: int32
                                                            type: integer
                                                        required:
                                                        - podAffinityTerm
                                                        - weight
                                                        type: object
                                                      type: array
                                                    requiredDuringSchedulingIgnoredDuringExecution:
                                                      description: If the anti-affinity
                                                        requirements specified by this
                                                        field are not met at scheduling
                                                        time, the pod will not be scheduled
                                                        onto the node. If the anti-affinity
                                                        requirements specified by this
                                                        field cease to be met at some
                                                        point during pod execution (e.g.
                                                        due to a pod label update), the
                                                        system may or may not try to eventually
                                                        evict the pod from its node. When
                                                        there are multiple elements, the
                                                        lists of nodes corresponding to
                                                        each podAffinityTerm are intersected,
                                                        i.e. all terms must be satisfied.
                                                      items:
                                                        description: Defines a set of
                                                          pods (namely those matching
                                                          the labelSelector relative to
                                                          the given namespace(s)) that
                                                          this pod should be co-located
                                                          (affinity) or not co-located
                                                          (anti-affinity) with, where
                                                          co-located is defined as running
                                                          on a node whose value of the
                                                          label with key <topologyKey>
                                                          matches that of any node on
                                                          which a pod of the set of pods
                                                          is running
                                                        properties:
                                                          labelSelector:
                                                            description: A label query
                                                              over a set of resources,
                                                              in this case pods.
                                                            properties:
                                                              matchExpressions:
                                                                description: matchExpressions
                                                                  is a list of label selector
                                                                  requirements. The requirements
                                                                  are ANDed.
                                                                items:
                                                                  description: A label
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: key
                                                                        is the label key
                                                                        that the selector
                                                                        applies to.
                                                                      type: string
                                                                    operator:
                                                                      description: operator
                                                                        represents a key's
                                                                        relationship to
                                                                        a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists and DoesNotExist.
                                                                      type: string
                                                                    values:
                                                                      description: values
                                                                        is an array of
                                                                        string values.
                                                                        If the operator
                                                                        is In or NotIn,
                                                                        the values array
                                                                        must be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchLabels:
                                                                additionalProperties:
                                                                  type: string
                                                                description: matchLabels
                                                                  is a map of {key,value}
                                                                  pairs. A single {key,value}
                                                                  in the matchLabels map
                                                                  is equivalent to an
                                                                  element of matchExpressions,
                                                                  whose key field is "key",
                                                                  the operator is "In",
                                                                  and the values array
                                                                  contains only "value".
                                                                  The requirements are
                                                                  ANDed.
                                                                type: object
                                                            type: object
                                                          namespaceSelector:
                                                            description: A label query
                                                              over the set of namespaces
                                                              that the term applies to.
                                                              The term is applied to the
                                                              union of the namespaces
                                                              selected by this field and
                                                              the ones listed in the namespaces
                                                              field. null selector and
                                                              null or empty namespaces
                                                              list means "this pod's namespace".
                                                              An empty selector ({}) matches
                                                              all namespaces. This field
                                                              is alpha-level and is only
                                                              honored when PodAffinityNamespaceSelector
                                                              feature is enabled.
                                                            properties:
                                                              matchExpressions:
                                                                description: matchExpressions
                                                                  is a list of label selector
                                                                  requirements. The requirements
                                                                  are ANDed.
                                                                items:
                                                                  description: A label
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: key
                                                                        is the label key
                                                                        that the selector
                                                                        applies to.
                                                                      type: string
                                                                    operator:
                                                                      description: operator
                                                                        represents a key's
                                                                        relationship to
                                                                        a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists and DoesNotExist.
                                                                      type: string
                                                                    values:
                                                                      description: values
                                                                        is an array of
                                                                        string values.
                                                                        If the operator
                                                                        is In or NotIn,
                                                                        the values array
                                                                        must be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchLabels:
                                                                additionalProperties:
                                                                  type: string
                                                                description: matchLabels
                                                                  is a map of {key,value}
                                                                  pairs. A single {key,value}
                                                                  in the matchLabels map
                                                                  is equivalent to an
                                                                  element of matchExpressions,
                                                                  whose key field is "key",
                                                                  the operator is "In",
                                                                  and the values array
                                                                  contains only "value".
                                                                  The requirements are
                                                                  ANDed.
                                                                type: object
                                                            type: object
                                                          namespaces:
                                                            description: namespaces specifies
                                                              a static list of namespace
                                                              names that the term applies
                                                              to. The term is applied
                                                              to the union of the namespaces
                                                              listed in this field and
                                                              the ones selected by namespaceSelector.
                                                              null or empty namespaces
                                                              list and null namespaceSelector
                                                              means "this pod's namespace"
                                                            items:
                                                              type: string
                                                            type: array
                                                          topologyKey:
                                                            description: This pod should
                                                              be co-located (affinity)
                                                              or not co-located (anti-affinity)
                                                              with the pods matching the
                                                              labelSelector in the specified
                                                              namespaces, where co-located
                                                              is defined as running on
                                                              a node whose value of the
                                                              label with key topologyKey
                                                              matches that of any node
                                                              on which any of the selected
                                                              pods is running. Empty topologyKey
                                                              is not allowed.
                                                            type: string
                                                        required:
                                                        - topologyKey
                                                        type: object
                                                      type: array
                                                  type: object
                                              type: object
                                            nodeSelector:
                                              additionalProperties:
                                                type: string
                                              description: 'NodeSelector is a selector
                                                which must be true for the pod to fit
                                                on a node. Selector which must match a
                                                node''s labels for the pod to be scheduled
                                                on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
                                              type: object
                                            priorityClassName:
                                              description: If specified, the pod's priorityClassName.
                                              type: string
                                            serviceAccountName:
                                              description: If specified, the pod's service
                                                account
                                              type: string
                                            tolerations:
                                              description: If specified, the pod's tolerations.
                                              items:
                                                description: The pod this Toleration is
                                                  attached to tolerates any taint that
                                                  matches the triple <key,value,effect>
                                                  using the matching operator <operator>.
                                                properties:
                                                  effect:
                                                    description: Effect indicates the
                                                      taint effect to match. Empty means
                                                      match all taint effects. When specified,
                                                      allowed values are NoSchedule, PreferNoSchedule
                                                      and NoExecute.
                                                    type: string
                                                  key:
                                                    description: Key is the taint key
                                                      that the toleration applies to.
                                                      Empty means match all taint keys.
                                                      If the key is empty, operator must
                                                      be Exists; this combination means
                                                      to match all values and all keys.
                                                    type: string
                                                  operator:
                                                    description: Operator represents a
                                                      key's relationship to the value.
                                                      Valid operators are Exists and Equal.
                                                      Defaults to Equal. Exists is equivalent
                                                      to wildcard for value, so that a
                                                      pod can tolerate all taints of a
                                                      particular category.
                                                    type: string
                                                  tolerationSeconds:
                                                    description: TolerationSeconds represents
                                                      the period of time the toleration
                                                      (which must be of effect NoExecute,
                                                      otherwise this field is ignored)
                                                      tolerates the taint. By default,
                                                      it is not set, which means tolerate
                                                      the taint forever (do not evict).
                                                      Zero and negative values will be
                                                      treated as 0 (evict immediately)
                                                      by the system.
                                                    format: int64
                                                    type: integer
                                                  value:
                                                    description: Value is the taint value
                                                      the toleration matches to. If the
                                                      operator is Exists, the value should
                                                      be empty, otherwise just a regular
                                                      string.
                                                    type: string
                                                type: object
                                              type: array
                                          type: object
                                      type: object
                                    serviceType:
                                      description: Optional service type for Kubernetes
                                        solver service. Supported values are NodePort
                                        or ClusterIP. If unset, defaults to NodePort.
                                      type: string
                                  type: object
                              type: object
                            selector:
                              description: Selector selects a set of DNSNames on the Certificate
                                resource that should be solved using this challenge solver.
                                If not specified, the solver will be treated as the 'default'
                                solver with the lowest priority, i.e. if any other solver
                                has a more specific match, it will be used instead.
                              properties:
                                dnsNames:
                                  description: List of DNSNames that this solver will
                                    be used to solve. If specified and a match is found,
                                    a dnsNames selector will take precedence over a dnsZones
                                    selector. If multiple solvers match with the same
                                    dnsNames value, the solver with the most matching
                                    labels in matchLabels will be selected. If neither
                                    has more matches, the solver defined earlier in the
                                    list will be selected.
                                  items:
                                    type: string
                                  type: array
                                dnsZones:
                                  description: List of DNSZones that this solver will
                                    be used to solve. The most specific DNS zone match
                                    specified here will take precedence over other DNS
                                    zone matches, so a solver specifying sys.example.com
                                    will be selected over one specifying example.com for
                                    the domain www.sys.example.com. If multiple solvers
                                    match with the same dnsZones value, the solver with
                                    the most matching labels in matchLabels will be selected.
                                    If neither has more matches, the solver defined earlier
                                    in the list will be selected.
                                  items:
                                    type: string
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: A label selector that is used to refine
                                    the set of certificate's that this challenge solver
                                    will apply to.
                                  type: object
                              type: object
                          type: object
                        type: array
                    required:
                    - privateKeySecretRef
                    - server
                    type: object
                  ca:
                    description: CA configures this issuer to sign certificates using
                      a signing CA keypair stored in a Secret resource. This is used to
                      build internal PKIs that are managed by cert-manager.
                    properties:
                      crlDistributionPoints:
                        description: The CRL distribution points is an X.509 v3 certificate
                          extension which identifies the location of the CRL from which
                          the revocation of this certificate can be checked. If not set,
                          certificates will be issued without distribution points set.
                        items:
                          type: string
                        type: array
                      ocspServers:
                        description: The OCSP server list is an X.509 v3 extension that
                          defines a list of URLs of OCSP responders. The OCSP responders
                          can be queried for the revocation status of an issued certificate.
                          If not set, the certificate will be issued with no OCSP servers
                          set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
                        items:
                          type: string
                        type: array
                      secretName:
                        description: SecretName is the name of the secret used to sign
                          Certificates issued by this Issuer.
                        type: string
                    required:
                    - secretName
                    type: object
                  selfSigned:
                    description: SelfSigned configures this issuer to 'self sign' certificates
                      using the private key used to create the CertificateRequest object.
                    properties:
                      crlDistributionPoints:
                        description: The CRL distribution points is an X.509 v3 certificate
                          extension which identifies the location of the CRL from which
                          the revocation of this certificate can be checked. If not set
                          certificate will be issued without CDP. Values are strings.
                        items:
                          type: string
                        type: array
                    type: object
                  vault:
                    description: Vault configures this issuer to sign certificates using
                      a HashiCorp Vault PKI backend.
                    properties:
                      auth:
                        description: Auth configures how cert-manager authenticates with
                          the Vault server.
                        properties:
                          appRole:
                            description: AppRole authenticates with Vault using the App
                              Role auth mechanism, with the role and secret stored in
                              a Kubernetes Secret resource.
                            properties:
                              path:
                                description: 'Path where the App Role authentication backend
                                  is mounted in Vault, e.g: "approle"'
                                type: string
                              roleId:
                                description: RoleID configured in the App Role authentication
                                  backend when setting up the authentication backend in
                                  Vault.
                                type: string
                              secretRef:
                                description: Reference to a key in a Secret that contains
                                  the App Role secret used to authenticate with Vault.
                                  The `key` field must be specified and denotes which
                                  entry within the Secret resource is used as the app
                                  role secret.
                                properties:
                                  key:
                                    description: The key of the entry in the Secret resource's
                                      `data` field to be used. Some instances of this
                                      field may be defaulted, in others it may be required.
                                    type: string
                                  name:
                                    description: 'Name of the resource being referred
                                      to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                    type: string
                                required:
                                - name
                                type: object
                            required:
                            - path
                            - roleId
                            - secretRef
                            type: object
                          kubernetes:
                            description: Kubernetes authenticates with Vault by passing
                              the ServiceAccount token stored in the named Secret resource
                              to the Vault server.
                            properties:
                              mountPath:
                                description: The Vault mountPath here is the mount path
                                  to use when authenticating with Vault. For example,
                                  setting a value to `/v1/auth/foo`, will use the path
                                  `/v1/auth/foo/login` to authenticate with Vault. If
                                  unspecified, the default value "/v1/auth/kubernetes"
                                  will be used.
                                type: string
                              role:
                                description: A required field containing the Vault Role
                                  to assume. A Role binds a Kubernetes ServiceAccount
                                  with a set of Vault policies.
                                type: string
                              secretRef:
                                description: The required Secret field containing a Kubernetes
                                  ServiceAccount JWT used for authenticating with Vault.
                                  Use of 'ambient credentials' is not supported.
                                properties:
                                  key:
                                    description: The key of the entry in the Secret resource's
                                      `data` field to be used. Some instances of this
                                      field may be defaulted, in others it may be required.
                                    type: string
                                  name:
                                    description: 'Name of the resource being referred
                                      to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                    type: string
                                required:
                                - name
                                type: object
                            required:
                            - role
                            - secretRef
                            type: object
                          tokenSecretRef:
                            description: TokenSecretRef authenticates with Vault by presenting
                              a token.
                            properties:
                              key:
                                description: The key of the entry in the Secret resource's
                                  `data` field to be used. Some instances of this field
                                  may be defaulted, in others it may be required.
                                type: string
                              name:
                                description: 'Name of the resource being referred to.
                                  More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                            required:
                            - name
                            type: object
                        type: object
                      caBundle:
                        description: PEM-encoded CA bundle (base64-encoded) used to validate
                          Vault server certificate. Only used if the Server URL is using
                          HTTPS protocol. This parameter is ignored for plain HTTP protocol
                          connection. If not set the system root certificates are used
                          to validate the TLS connection.
                        format: byte
                        type: string
                      namespace:
                        description: 'Name of the vault namespace. Namespaces is a set
                          of features within Vault Enterprise that allows Vault environments
                          to support Secure Multi-tenancy. e.g: "ns1" More about namespaces
                          can be found here https://www.vaultproject.io/docs/enterprise/namespaces'
                        type: string
                      path:
                        description: 'Path is the mount path of the Vault PKI backend''s
                          `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".'
                        type: string
                      server:
                        description: 'Server is the connection address for the Vault server,
                          e.g: "https://vault.example.com:8200".'
                        type: string
                    required:
                    - auth
                    - path
                    - server
                    type: object
                  venafi:
                    description: Venafi configures this issuer to sign certificates using
                      a Venafi TPP or Venafi Cloud policy zone.
                    properties:
                      cloud:
                        description: Cloud specifies the Venafi cloud configuration settings.
                          Only one of TPP or Cloud may be specified.
                        properties:
                          apiTokenSecretRef:
                            description: APITokenSecretRef is a secret key selector for
                              the Venafi Cloud API token.
                            properties:
                              key:
                                description: The key of the entry in the Secret resource's
                                  `data` field to be used. Some instances of this field
                                  may be defaulted, in others it may be required.
                                type: string
                              name:
                                description: 'Name of the resource being referred to.
                                  More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                            required:
                            - name
                            type: object
                          url:
                            description: URL is the base URL for Venafi Cloud. Defaults
                              to "https://api.venafi.cloud/v1".
                            type: string
                        required:
                        - apiTokenSecretRef
                        type: object
                      tpp:
                        description: TPP specifies Trust Protection Platform configuration
                          settings. Only one of TPP or Cloud may be specified.
                        properties:
                          caBundle:
                            description: CABundle is a PEM encoded TLS certificate to
                              use to verify connections to the TPP instance. If specified,
                              system roots will not be used and the issuing CA for the
                              TPP instance must be verifiable using the provided root.
                              If not specified, the connection will be verified using
                              the cert-manager system root certificates.
                            format: byte
                            type: string
                          credentialsRef:
                            description: CredentialsRef is a reference to a Secret containing
                              the username and password for the TPP server. The secret
                              must contain two keys, 'username' and 'password'.
                            properties:
                              name:
                                description: 'Name of the resource being referred to.
                                  More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                            required:
                            - name
                            type: object
                          url:
                            description: 'URL is the base URL for the vedsdk endpoint
                              of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".'
                            type: string
                        required:
                        - credentialsRef
                        - url
                        type: object
                      zone:
                        description: Zone is the Venafi Policy Zone to use for this issuer.
                          All requests made to the Venafi platform will be restricted
                          by the named zone policy. This field is required.
                        type: string
                    required:
                    - zone
                    type: object
                type: object
              status:
                description: Status of the ClusterIssuer. This is set and managed automatically.
                properties:
                  acme:
                    description: ACME specific status options. This field should only
                      be set if the Issuer is configured to use an ACME server to issue
                      certificates.
                    properties:
                      lastRegisteredEmail:
                        description: LastRegisteredEmail is the email associated with
                          the latest registered ACME account, in order to track changes
                          made to registered account associated with the  Issuer
                        type: string
                      uri:
                        description: URI is the unique account identifier, which can also
                          be used to retrieve account details from the CA
                        type: string
                    type: object
                  conditions:
                    description: List of status conditions to indicate the status of a
                      CertificateRequest. Known condition types are `Ready`.
                    items:
                      description: IssuerCondition contains condition information for
                        an Issuer.
                      properties:
                        lastTransitionTime:
                          description: LastTransitionTime is the timestamp corresponding
                            to the last status change of this condition.
                          format: date-time
                          type: string
                        message:
                          description: Message is a human readable description of the
                            details of the last transition, complementing reason.
                          type: string
                        observedGeneration:
                          description: If set, this represents the .metadata.generation
                            that the condition was set based upon. For instance, if .metadata.generation
                            is currently 12, but the .status.condition[x].observedGeneration
                            is 9, the condition is out of date with respect to the current
                            state of the Issuer.
                          format: int64
                          type: integer
                        reason:
                          description: Reason is a brief machine readable explanation
                            for the condition's last transition.
                          type: string
                        status:
                          description: Status of the condition, one of (`True`, `False`,
                            `Unknown`).
                          enum:
                          - "True"
                          - "False"
                          - Unknown
                          type: string
                        type:
                          description: Type of the condition, known values are (`Ready`).
                          type: string
                      required:
                      - status
                      - type
                      type: object
                    type: array
                type: object
            type: object
        served: true
        storage: false
        subresources:
          status: {}
      - additionalPrinterColumns:
        - jsonPath: .status.conditions[?(@.type=="Ready")].status
          name: Ready
          type: string
        - jsonPath: .status.conditions[?(@.type=="Ready")].message
          name: Status
          priority: 1
          type: string
        - description: CreationTimestamp is a timestamp representing the server time when
            this object was created. It is not guaranteed to be set in happens-before
            order across separate operations. Clients may not set this value. It is represented
            in RFC3339 form and is in UTC.
          jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
        name: v1beta1
        schema:
          openAPIV3Schema:
            description: A ClusterIssuer represents a certificate issuing authority which
              can be referenced as part of `issuerRef` fields. It is similar to an Issuer,
              however it is cluster-scoped and therefore can be referenced by resources
              that exist in *any* namespace, not just the same namespace as the referent.
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: Desired state of the ClusterIssuer resource.
                properties:
                  acme:
                    description: ACME configures this issuer to communicate with a RFC8555
                      (ACME) server to obtain signed x509 certificates.
                    properties:
                      disableAccountKeyGeneration:
                        description: Enables or disables generating a new ACME account
                          key. If true, the Issuer resource will *not* request a new account
                          but will expect the account key to be supplied via an existing
                          secret. If false, the cert-manager system will generate a new
                          ACME account key for the Issuer. Defaults to false.
                        type: boolean
                      email:
                        description: Email is the email address to be associated with
                          the ACME account. This field is optional, but it is strongly
                          recommended to be set. It will be used to contact you in case
                          of issues with your account or certificates, including expiry
                          notification emails. This field may be updated after the account
                          is initially registered.
                        type: string
                      enableDurationFeature:
                        description: Enables requesting a Not After date on certificates
                          that matches the duration of the certificate. This is not supported
                          by all ACME servers like Let's Encrypt. If set to true when
                          the ACME server does not support it it will create an error
                          on the Order. Defaults to false.
                        type: boolean
                      externalAccountBinding:
                        description: ExternalAccountBinding is a reference to a CA external
                          account of the ACME server. If set, upon registration cert-manager
                          will attempt to associate the given external account credentials
                          with the registered ACME account.
                        properties:
                          keyAlgorithm:
                            description: 'Deprecated: keyAlgorithm field exists for historical
                              compatibility reasons and should not be used. The algorithm
                              is now hardcoded to HS256 in golang/x/crypto/acme.'
                            enum:
                            - HS256
                            - HS384
                            - HS512
                            type: string
                          keyID:
                            description: keyID is the ID of the CA key that the External
                              Account is bound to.
                            type: string
                          keySecretRef:
                            description: keySecretRef is a Secret Key Selector referencing
                              a data item in a Kubernetes Secret which holds the symmetric
                              MAC key of the External Account Binding. The `key` is the
                              index string that is paired with the key data in the Secret
                              and should not be confused with the key data itself, or
                              indeed with the External Account Binding keyID above. The
                              secret key stored in the Secret **must** be un-padded, base64
                              URL encoded data.
                            properties:
                              key:
                                description: The key of the entry in the Secret resource's
                                  `data` field to be used. Some instances of this field
                                  may be defaulted, in others it may be required.
                                type: string
                              name:
                                description: 'Name of the resource being referred to.
                                  More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                            required:
                            - name
                            type: object
                        required:
                        - keyID
                        - keySecretRef
                        type: object
                      preferredChain:
                        description: 'PreferredChain is the chain to use if the ACME server
                          outputs multiple. PreferredChain is no guarantee that this one
                          gets delivered by the ACME endpoint. For example, for Let''s
                          Encrypt''s DST crosssign you would use: "DST Root CA X3" or
                          "ISRG Root X1" for the newer Let''s Encrypt root CA. This value
                          picks the first certificate bundle in the ACME alternative chains
                          that has a certificate with this value as its issuer''s CN'
                        maxLength: 64
                        type: string
                      privateKeySecretRef:
                        description: PrivateKey is the name of a Kubernetes Secret resource
                          that will be used to store the automatically generated ACME
                          account private key. Optionally, a `key` may be specified to
                          select a specific entry within the named Secret resource. If
                          `key` is not specified, a default of `tls.key` will be used.
                        properties:
                          key:
                            description: The key of the entry in the Secret resource's
                              `data` field to be used. Some instances of this field may
                              be defaulted, in others it may be required.
                            type: string
                          name:
                            description: 'Name of the resource being referred to. More
                              info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                        required:
                        - name
                        type: object
                      server:
                        description: 'Server is the URL used to access the ACME server''s
                          ''directory'' endpoint. For example, for Let''s Encrypt''s staging
                          endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory".
                          Only ACME v2 endpoints (i.e. RFC 8555) are supported.'
                        type: string
                      skipTLSVerify:
                        description: Enables or disables validation of the ACME server
                          TLS certificate. If true, requests to the ACME server will not
                          have their TLS certificate validated (i.e. insecure connections
                          will be allowed). Only enable this option in development environments.
                          The cert-manager system installed roots will be used to verify
                          connections to the ACME server if this is false. Defaults to
                          false.
                        type: boolean
                      solvers:
                        description: 'Solvers is a list of challenge solvers that will
                          be used to solve ACME challenges for the matching domains. Solver
                          configurations must be provided in order to obtain certificates
                          from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/'
                        items:
                          description: Configures an issuer to solve challenges using
                            the specified options. Only one of HTTP01 or DNS01 may be
                            provided.
                          properties:
                            dns01:
                              description: Configures cert-manager to attempt to complete
                                authorizations by performing the DNS01 challenge flow.
                              properties:
                                acmeDNS:
                                  description: Use the 'ACME DNS' (https://github.com/joohoi/acme-dns)
                                    API to manage DNS01 challenge records.
                                  properties:
                                    accountSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    host:
                                      type: string
                                  required:
                                  - accountSecretRef
                                  - host
                                  type: object
                                akamai:
                                  description: Use the Akamai DNS zone management API
                                    to manage DNS01 challenge records.
                                  properties:
                                    accessTokenSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    clientSecretSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    clientTokenSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    serviceConsumerDomain:
                                      type: string
                                  required:
                                  - accessTokenSecretRef
                                  - clientSecretSecretRef
                                  - clientTokenSecretRef
                                  - serviceConsumerDomain
                                  type: object
                                azureDNS:
                                  description: Use the Microsoft Azure DNS API to manage
                                    DNS01 challenge records.
                                  properties:
                                    clientID:
                                      description: if both this and ClientSecret are left
                                        unset MSI will be used
                                      type: string
                                    clientSecretSecretRef:
                                      description: if both this and ClientID are left
                                        unset MSI will be used
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    environment:
                                      enum:
                                      - AzurePublicCloud
                                      - AzureChinaCloud
                                      - AzureGermanCloud
                                      - AzureUSGovernmentCloud
                                      type: string
                                    hostedZoneName:
                                      type: string
                                    resourceGroupName:
                                      type: string
                                    subscriptionID:
                                      type: string
                                    tenantID:
                                      description: when specifying ClientID and ClientSecret
                                        then this field is also needed
                                      type: string
                                  required:
                                  - resourceGroupName
                                  - subscriptionID
                                  type: object
                                cloudDNS:
                                  description: Use the Google Cloud DNS API to manage
                                    DNS01 challenge records.
                                  properties:
                                    hostedZoneName:
                                      description: HostedZoneName is an optional field
                                        that tells cert-manager in which Cloud DNS zone
                                        the challenge record has to be created. If left
                                        empty cert-manager will automatically choose a
                                        zone.
                                      type: string
                                    project:
                                      type: string
                                    serviceAccountSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                  required:
                                  - project
                                  type: object
                                cloudflare:
                                  description: Use the Cloudflare API to manage DNS01
                                    challenge records.
                                  properties:
                                    apiKeySecretRef:
                                      description: 'API key to use to authenticate with
                                        Cloudflare. Note: using an API token to authenticate
                                        is now the recommended method as it allows greater
                                        control of permissions.'
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    apiTokenSecretRef:
                                      description: API token used to authenticate with
                                        Cloudflare.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    email:
                                      description: Email of the account, only required
                                        when using API key based authentication.
                                      type: string
                                  type: object
                                cnameStrategy:
                                  description: CNAMEStrategy configures how the DNS01
                                    provider should handle CNAME records when found in
                                    DNS zones.
                                  enum:
                                  - None
                                  - Follow
                                  type: string
                                digitalocean:
                                  description: Use the DigitalOcean DNS API to manage
                                    DNS01 challenge records.
                                  properties:
                                    tokenSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                  required:
                                  - tokenSecretRef
                                  type: object
                                rfc2136:
                                  description: Use RFC2136 ("Dynamic Updates in the Domain
                                    Name System") (https://datatracker.ietf.org/doc/rfc2136/)
                                    to manage DNS01 challenge records.
                                  properties:
                                    nameserver:
                                      description: The IP address or hostname of an authoritative
                                        DNS server supporting RFC2136 in the form host:port.
                                        If the host is an IPv6 address it must be enclosed
                                        in square brackets (e.g [2001:db8::1]) ; port
                                        is optional. This field is required.
                                      type: string
                                    tsigAlgorithm:
                                      description: 'The TSIG Algorithm configured in the
                                        DNS supporting RFC2136. Used only when ``tsigSecretSecretRef``
                                        and ``tsigKeyName`` are defined. Supported values
                                        are (case-insensitive): ``HMACMD5`` (default),
                                        ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.'
                                      type: string
                                    tsigKeyName:
                                      description: The TSIG Key name configured in the
                                        DNS. If ``tsigSecretSecretRef`` is defined, this
                                        field is required.
                                      type: string
                                    tsigSecretSecretRef:
                                      description: The name of the secret containing the
                                        TSIG value. If ``tsigKeyName`` is defined, this
                                        field is required.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                  required:
                                  - nameserver
                                  type: object
                                route53:
                                  description: Use the AWS Route53 API to manage DNS01
                                    challenge records.
                                  properties:
                                    accessKeyID:
                                      description: 'The AccessKeyID is used for authentication.
                                        If not set we fall-back to using env vars, shared
                                        credentials file or AWS Instance metadata see:
                                        https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials'
                                      type: string
                                    hostedZoneID:
                                      description: If set, the provider will manage only
                                        this zone in Route53 and will not do an lookup
                                        using the route53:ListHostedZonesByName api call.
                                      type: string
                                    region:
                                      description: Always set the region when using AccessKeyID
                                        and SecretAccessKey
                                      type: string
                                    role:
                                      description: Role is a Role ARN which the Route53
                                        provider will assume using either the explicit
                                        credentials AccessKeyID/SecretAccessKey or the
                                        inferred credentials from environment variables,
                                        shared credentials file or AWS Instance metadata
                                      type: string
                                    secretAccessKeySecretRef:
                                      description: The SecretAccessKey is used for authentication.
                                        If not set we fall-back to using env vars, shared
                                        credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                  required:
                                  - region
                                  type: object
                                webhook:
                                  description: Configure an external webhook based DNS01
                                    challenge solver to manage DNS01 challenge records.
                                  properties:
                                    config:
                                      description: Additional configuration that should
                                        be passed to the webhook apiserver when challenges
                                        are processed. This can contain arbitrary JSON
                                        data. Secret values should not be specified in
                                        this stanza. If secret values are needed (e.g.
                                        credentials for a DNS service), you should use
                                        a SecretKeySelector to reference a Secret resource.
                                        For details on the schema of this field, consult
                                        the webhook provider implementation's documentation.
                                      x-kubernetes-preserve-unknown-fields: true
                                    groupName:
                                      description: The API group name that should be used
                                        when POSTing ChallengePayload resources to the
                                        webhook apiserver. This should be the same as
                                        the GroupName specified in the webhook provider
                                        implementation.
                                      type: string
                                    solverName:
                                      description: The name of the solver to use, as defined
                                        in the webhook provider implementation. This will
                                        typically be the name of the provider, e.g. 'cloudflare'.
                                      type: string
                                  required:
                                  - groupName
                                  - solverName
                                  type: object
                              type: object
                            http01:
                              description: Configures cert-manager to attempt to complete
                                authorizations by performing the HTTP01 challenge flow.
                                It is not possible to obtain certificates for wildcard
                                domain names (e.g. `*.example.com`) using the HTTP01 challenge
                                mechanism.
                              properties:
                                gatewayHTTPRoute:
                                  description: The Gateway API is a sig-network community
                                    API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/).
                                    The Gateway solver will create HTTPRoutes with the
                                    specified labels in the same namespace as the challenge.
                                    This solver is experimental, and fields / behaviour
                                    may change in the future.
                                  properties:
                                    labels:
                                      additionalProperties:
                                        type: string
                                      description: The labels that cert-manager will use
                                        when creating the temporary HTTPRoute needed for
                                        solving the HTTP-01 challenge. These labels must
                                        match the label selector of at least one Gateway.
                                      type: object
                                    serviceType:
                                      description: Optional service type for Kubernetes
                                        solver service. Supported values are NodePort
                                        or ClusterIP. If unset, defaults to NodePort.
                                      type: string
                                  type: object
                                ingress:
                                  description: The ingress based HTTP01 challenge solver
                                    will solve challenges by creating or modifying Ingress
                                    resources in order to route requests for '/.well-known/acme-challenge/XYZ'
                                    to 'challenge solver' pods that are provisioned by
                                    cert-manager for each Challenge to be completed.
                                  properties:
                                    class:
                                      description: The ingress class to use when creating
                                        Ingress resources to solve ACME challenges that
                                        use this challenge solver. Only one of 'class'
                                        or 'name' may be specified.
                                      type: string
                                    ingressTemplate:
                                      description: Optional ingress template used to configure
                                        the ACME challenge solver ingress used for HTTP01
                                        challenges.
                                      properties:
                                        metadata:
                                          description: ObjectMeta overrides for the ingress
                                            used to solve HTTP01 challenges. Only the
                                            'labels' and 'annotations' fields may be set.
                                            If labels or annotations overlap with in-built
                                            values, the values here will override the
                                            in-built values.
                                          properties:
                                            annotations:
                                              additionalProperties:
                                                type: string
                                              description: Annotations that should be
                                                added to the created ACME HTTP01 solver
                                                ingress.
                                              type: object
                                            labels:
                                              additionalProperties:
                                                type: string
                                              description: Labels that should be added
                                                to the created ACME HTTP01 solver ingress.
                                              type: object
                                          type: object
                                      type: object
                                    name:
                                      description: The name of the ingress resource that
                                        should have ACME challenge solving routes inserted
                                        into it in order to solve HTTP01 challenges. This
                                        is typically used in conjunction with ingress
                                        controllers like ingress-gce, which maintains
                                        a 1:1 mapping between external IPs and ingress
                                        resources.
                                      type: string
                                    podTemplate:
                                      description: Optional pod template used to configure
                                        the ACME challenge solver pods used for HTTP01
                                        challenges
                                      properties:
                                        metadata:
                                          description: ObjectMeta overrides for the pod
                                            used to solve HTTP01 challenges. Only the
                                            'labels' and 'annotations' fields may be set.
                                            If labels or annotations overlap with in-built
                                            values, the values here will override the
                                            in-built values.
                                          properties:
                                            annotations:
                                              additionalProperties:
                                                type: string
                                              description: Annotations that should be
                                                added to the create ACME HTTP01 solver
                                                pods.
                                              type: object
                                            labels:
                                              additionalProperties:
                                                type: string
                                              description: Labels that should be added
                                                to the created ACME HTTP01 solver pods.
                                              type: object
                                          type: object
                                        spec:
                                          description: PodSpec defines overrides for the
                                            HTTP01 challenge solver pod. Only the 'priorityClassName',
                                            'nodeSelector', 'affinity', 'serviceAccountName'
                                            and 'tolerations' fields are supported currently.
                                            All other fields will be ignored.
                                          properties:
                                            affinity:
                                              description: If specified, the pod's scheduling
                                                constraints
                                              properties:
                                                nodeAffinity:
                                                  description: Describes node affinity
                                                    scheduling rules for the pod.
                                                  properties:
                                                    preferredDuringSchedulingIgnoredDuringExecution:
                                                      description: The scheduler will
                                                        prefer to schedule pods to nodes
                                                        that satisfy the affinity expressions
                                                        specified by this field, but it
                                                        may choose a node that violates
                                                        one or more of the expressions.
                                                        The node that is most preferred
                                                        is the one with the greatest sum
                                                        of weights, i.e. for each node
                                                        that meets all of the scheduling
                                                        requirements (resource request,
                                                        requiredDuringScheduling affinity
                                                        expressions, etc.), compute a
                                                        sum by iterating through the elements
                                                        of this field and adding "weight"
                                                        to the sum if the node matches
                                                        the corresponding matchExpressions;
                                                        the node(s) with the highest sum
                                                        are the most preferred.
                                                      items:
                                                        description: An empty preferred
                                                          scheduling term matches all
                                                          objects with implicit weight
                                                          0 (i.e. it's a no-op). A null
                                                          preferred scheduling term matches
                                                          no objects (i.e. is also a no-op).
                                                        properties:
                                                          preference:
                                                            description: A node selector
                                                              term, associated with the
                                                              corresponding weight.
                                                            properties:
                                                              matchExpressions:
                                                                description: A list of
                                                                  node selector requirements
                                                                  by node's labels.
                                                                items:
                                                                  description: A node
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: The
                                                                        label key that
                                                                        the selector applies
                                                                        to.
                                                                      type: string
                                                                    operator:
                                                                      description: Represents
                                                                        a key's relationship
                                                                        to a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists, DoesNotExist.
                                                                        Gt, and Lt.
                                                                      type: string
                                                                    values:
                                                                      description: An
                                                                        array of string
                                                                        values. If the
                                                                        operator is In
                                                                        or NotIn, the
                                                                        values array must
                                                                        be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        If the operator
                                                                        is Gt or Lt, the
                                                                        values array must
                                                                        have a single
                                                                        element, which
                                                                        will be interpreted
                                                                        as an integer.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchFields:
                                                                description: A list of
                                                                  node selector requirements
                                                                  by node's fields.
                                                                items:
                                                                  description: A node
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: The
                                                                        label key that
                                                                        the selector applies
                                                                        to.
                                                                      type: string
                                                                    operator:
                                                                      description: Represents
                                                                        a key's relationship
                                                                        to a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists, DoesNotExist.
                                                                        Gt, and Lt.
                                                                      type: string
                                                                    values:
                                                                      description: An
                                                                        array of string
                                                                        values. If the
                                                                        operator is In
                                                                        or NotIn, the
                                                                        values array must
                                                                        be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        If the operator
                                                                        is Gt or Lt, the
                                                                        values array must
                                                                        have a single
                                                                        element, which
                                                                        will be interpreted
                                                                        as an integer.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                            type: object
                                                          weight:
                                                            description: Weight associated
                                                              with matching the corresponding
                                                              nodeSelectorTerm, in the
                                                              range 1-100.
                                                            format: int32
                                                            type: integer
                                                        required:
                                                        - preference
                                                        - weight
                                                        type: object
                                                      type: array
                                                    requiredDuringSchedulingIgnoredDuringExecution:
                                                      description: If the affinity requirements
                                                        specified by this field are not
                                                        met at scheduling time, the pod
                                                        will not be scheduled onto the
                                                        node. If the affinity requirements
                                                        specified by this field cease
                                                        to be met at some point during
                                                        pod execution (e.g. due to an
                                                        update), the system may or may
                                                        not try to eventually evict the
                                                        pod from its node.
                                                      properties:
                                                        nodeSelectorTerms:
                                                          description: Required. A list
                                                            of node selector terms. The
                                                            terms are ORed.
                                                          items:
                                                            description: A null or empty
                                                              node selector term matches
                                                              no objects. The requirements
                                                              of them are ANDed. The TopologySelectorTerm
                                                              type implements a subset
                                                              of the NodeSelectorTerm.
                                                            properties:
                                                              matchExpressions:
                                                                description: A list of
                                                                  node selector requirements
                                                                  by node's labels.
                                                                items:
                                                                  description: A node
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: The
                                                                        label key that
                                                                        the selector applies
                                                                        to.
                                                                      type: string
                                                                    operator:
                                                                      description: Represents
                                                                        a key's relationship
                                                                        to a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists, DoesNotExist.
                                                                        Gt, and Lt.
                                                                      type: string
                                                                    values:
                                                                      description: An
                                                                        array of string
                                                                        values. If the
                                                                        operator is In
                                                                        or NotIn, the
                                                                        values array must
                                                                        be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        If the operator
                                                                        is Gt or Lt, the
                                                                        values array must
                                                                        have a single
                                                                        element, which
                                                                        will be interpreted
                                                                        as an integer.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchFields:
                                                                description: A list of
                                                                  node selector requirements
                                                                  by node's fields.
                                                                items:
                                                                  description: A node
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: The
                                                                        label key that
                                                                        the selector applies
                                                                        to.
                                                                      type: string
                                                                    operator:
                                                                      description: Represents
                                                                        a key's relationship
                                                                        to a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists, DoesNotExist.
                                                                        Gt, and Lt.
                                                                      type: string
                                                                    values:
                                                                      description: An
                                                                        array of string
                                                                        values. If the
                                                                        operator is In
                                                                        or NotIn, the
                                                                        values array must
                                                                        be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        If the operator
                                                                        is Gt or Lt, the
                                                                        values array must
                                                                        have a single
                                                                        element, which
                                                                        will be interpreted
                                                                        as an integer.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                            type: object
                                                          type: array
                                                      required:
                                                      - nodeSelectorTerms
                                                      type: object
                                                  type: object
                                                podAffinity:
                                                  description: Describes pod affinity
                                                    scheduling rules (e.g. co-locate this
                                                    pod in the same node, zone, etc. as
                                                    some other pod(s)).
                                                  properties:
                                                    preferredDuringSchedulingIgnoredDuringExecution:
                                                      description: The scheduler will
                                                        prefer to schedule pods to nodes
                                                        that satisfy the affinity expressions
                                                        specified by this field, but it
                                                        may choose a node that violates
                                                        one or more of the expressions.
                                                        The node that is most preferred
                                                        is the one with the greatest sum
                                                        of weights, i.e. for each node
                                                        that meets all of the scheduling
                                                        requirements (resource request,
                                                        requiredDuringScheduling affinity
                                                        expressions, etc.), compute a
                                                        sum by iterating through the elements
                                                        of this field and adding "weight"
                                                        to the sum if the node has pods
                                                        which matches the corresponding
                                                        podAffinityTerm; the node(s) with
                                                        the highest sum are the most preferred.
                                                      items:
                                                        description: The weights of all
                                                          of the matched WeightedPodAffinityTerm
                                                          fields are added per-node to
                                                          find the most preferred node(s)
                                                        properties:
                                                          podAffinityTerm:
                                                            description: Required. A pod
                                                              affinity term, associated
                                                              with the corresponding weight.
                                                            properties:
                                                              labelSelector:
                                                                description: A label query
                                                                  over a set of resources,
                                                                  in this case pods.
                                                                properties:
                                                                  matchExpressions:
                                                                    description: matchExpressions
                                                                      is a list of label
                                                                      selector requirements.
                                                                      The requirements
                                                                      are ANDed.
                                                                    items:
                                                                      description: A label
                                                                        selector requirement
                                                                        is a selector
                                                                        that contains
                                                                        values, a key,
                                                                        and an operator
                                                                        that relates the
                                                                        key and values.
                                                                      properties:
                                                                        key:
                                                                          description: key
                                                                            is the label
                                                                            key that the
                                                                            selector applies
                                                                            to.
                                                                          type: string
                                                                        operator:
                                                                          description: operator
                                                                            represents
                                                                            a key's relationship
                                                                            to a set of
                                                                            values. Valid
                                                                            operators
                                                                            are In, NotIn,
                                                                            Exists and
                                                                            DoesNotExist.
                                                                          type: string
                                                                        values:
                                                                          description: values
                                                                            is an array
                                                                            of string
                                                                            values. If
                                                                            the operator
                                                                            is In or NotIn,
                                                                            the values
                                                                            array must
                                                                            be non-empty.
                                                                            If the operator
                                                                            is Exists
                                                                            or DoesNotExist,
                                                                            the values
                                                                            array must
                                                                            be empty.
                                                                            This array
                                                                            is replaced
                                                                            during a strategic
                                                                            merge patch.
                                                                          items:
                                                                            type: string
                                                                          type: array
                                                                      required:
                                                                      - key
                                                                      - operator
                                                                      type: object
                                                                    type: array
                                                                  matchLabels:
                                                                    additionalProperties:
                                                                      type: string
                                                                    description: matchLabels
                                                                      is a map of {key,value}
                                                                      pairs. A single
                                                                      {key,value} in the
                                                                      matchLabels map
                                                                      is equivalent to
                                                                      an element of matchExpressions,
                                                                      whose key field
                                                                      is "key", the operator
                                                                      is "In", and the
                                                                      values array contains
                                                                      only "value". The
                                                                      requirements are
                                                                      ANDed.
                                                                    type: object
                                                                type: object
                                                              namespaceSelector:
                                                                description: A label query
                                                                  over the set of namespaces
                                                                  that the term applies
                                                                  to. The term is applied
                                                                  to the union of the
                                                                  namespaces selected
                                                                  by this field and the
                                                                  ones listed in the namespaces
                                                                  field. null selector
                                                                  and null or empty namespaces
                                                                  list means "this pod's
                                                                  namespace". An empty
                                                                  selector ({}) matches
                                                                  all namespaces. This
                                                                  field is alpha-level
                                                                  and is only honored
                                                                  when PodAffinityNamespaceSelector
                                                                  feature is enabled.
                                                                properties:
                                                                  matchExpressions:
                                                                    description: matchExpressions
                                                                      is a list of label
                                                                      selector requirements.
                                                                      The requirements
                                                                      are ANDed.
                                                                    items:
                                                                      description: A label
                                                                        selector requirement
                                                                        is a selector
                                                                        that contains
                                                                        values, a key,
                                                                        and an operator
                                                                        that relates the
                                                                        key and values.
                                                                      properties:
                                                                        key:
                                                                          description: key
                                                                            is the label
                                                                            key that the
                                                                            selector applies
                                                                            to.
                                                                          type: string
                                                                        operator:
                                                                          description: operator
                                                                            represents
                                                                            a key's relationship
                                                                            to a set of
                                                                            values. Valid
                                                                            operators
                                                                            are In, NotIn,
                                                                            Exists and
                                                                            DoesNotExist.
                                                                          type: string
                                                                        values:
                                                                          description: values
                                                                            is an array
                                                                            of string
                                                                            values. If
                                                                            the operator
                                                                            is In or NotIn,
                                                                            the values
                                                                            array must
                                                                            be non-empty.
                                                                            If the operator
                                                                            is Exists
                                                                            or DoesNotExist,
                                                                            the values
                                                                            array must
                                                                            be empty.
                                                                            This array
                                                                            is replaced
                                                                            during a strategic
                                                                            merge patch.
                                                                          items:
                                                                            type: string
                                                                          type: array
                                                                      required:
                                                                      - key
                                                                      - operator
                                                                      type: object
                                                                    type: array
                                                                  matchLabels:
                                                                    additionalProperties:
                                                                      type: string
                                                                    description: matchLabels
                                                                      is a map of {key,value}
                                                                      pairs. A single
                                                                      {key,value} in the
                                                                      matchLabels map
                                                                      is equivalent to
                                                                      an element of matchExpressions,
                                                                      whose key field
                                                                      is "key", the operator
                                                                      is "In", and the
                                                                      values array contains
                                                                      only "value". The
                                                                      requirements are
                                                                      ANDed.
                                                                    type: object
                                                                type: object
                                                              namespaces:
                                                                description: namespaces
                                                                  specifies a static list
                                                                  of namespace names that
                                                                  the term applies to.
                                                                  The term is applied
                                                                  to the union of the
                                                                  namespaces listed in
                                                                  this field and the ones
                                                                  selected by namespaceSelector.
                                                                  null or empty namespaces
                                                                  list and null namespaceSelector
                                                                  means "this pod's namespace"
                                                                items:
                                                                  type: string
                                                                type: array
                                                              topologyKey:
                                                                description: This pod
                                                                  should be co-located
                                                                  (affinity) or not co-located
                                                                  (anti-affinity) with
                                                                  the pods matching the
                                                                  labelSelector in the
                                                                  specified namespaces,
                                                                  where co-located is
                                                                  defined as running on
                                                                  a node whose value of
                                                                  the label with key topologyKey
                                                                  matches that of any
                                                                  node on which any of
                                                                  the selected pods is
                                                                  running. Empty topologyKey
                                                                  is not allowed.
                                                                type: string
                                                            required:
                                                            - topologyKey
                                                            type: object
                                                          weight:
                                                            description: weight associated
                                                              with matching the corresponding
                                                              podAffinityTerm, in the
                                                              range 1-100.
                                                            format: int32
                                                            type: integer
                                                        required:
                                                        - podAffinityTerm
                                                        - weight
                                                        type: object
                                                      type: array
                                                    requiredDuringSchedulingIgnoredDuringExecution:
                                                      description: If the affinity requirements
                                                        specified by this field are not
                                                        met at scheduling time, the pod
                                                        will not be scheduled onto the
                                                        node. If the affinity requirements
                                                        specified by this field cease
                                                        to be met at some point during
                                                        pod execution (e.g. due to a pod
                                                        label update), the system may
                                                        or may not try to eventually evict
                                                        the pod from its node. When there
                                                        are multiple elements, the lists
                                                        of nodes corresponding to each
                                                        podAffinityTerm are intersected,
                                                        i.e. all terms must be satisfied.
                                                      items:
                                                        description: Defines a set of
                                                          pods (namely those matching
                                                          the labelSelector relative to
                                                          the given namespace(s)) that
                                                          this pod should be co-located
                                                          (affinity) or not co-located
                                                          (anti-affinity) with, where
                                                          co-located is defined as running
                                                          on a node whose value of the
                                                          label with key <topologyKey>
                                                          matches that of any node on
                                                          which a pod of the set of pods
                                                          is running
                                                        properties:
                                                          labelSelector:
                                                            description: A label query
                                                              over a set of resources,
                                                              in this case pods.
                                                            properties:
                                                              matchExpressions:
                                                                description: matchExpressions
                                                                  is a list of label selector
                                                                  requirements. The requirements
                                                                  are ANDed.
                                                                items:
                                                                  description: A label
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: key
                                                                        is the label key
                                                                        that the selector
                                                                        applies to.
                                                                      type: string
                                                                    operator:
                                                                      description: operator
                                                                        represents a key's
                                                                        relationship to
                                                                        a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists and DoesNotExist.
                                                                      type: string
                                                                    values:
                                                                      description: values
                                                                        is an array of
                                                                        string values.
                                                                        If the operator
                                                                        is In or NotIn,
                                                                        the values array
                                                                        must be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchLabels:
                                                                additionalProperties:
                                                                  type: string
                                                                description: matchLabels
                                                                  is a map of {key,value}
                                                                  pairs. A single {key,value}
                                                                  in the matchLabels map
                                                                  is equivalent to an
                                                                  element of matchExpressions,
                                                                  whose key field is "key",
                                                                  the operator is "In",
                                                                  and the values array
                                                                  contains only "value".
                                                                  The requirements are
                                                                  ANDed.
                                                                type: object
                                                            type: object
                                                          namespaceSelector:
                                                            description: A label query
                                                              over the set of namespaces
                                                              that the term applies to.
                                                              The term is applied to the
                                                              union of the namespaces
                                                              selected by this field and
                                                              the ones listed in the namespaces
                                                              field. null selector and
                                                              null or empty namespaces
                                                              list means "this pod's namespace".
                                                              An empty selector ({}) matches
                                                              all namespaces. This field
                                                              is alpha-level and is only
                                                              honored when PodAffinityNamespaceSelector
                                                              feature is enabled.
                                                            properties:
                                                              matchExpressions:
                                                                description: matchExpressions
                                                                  is a list of label selector
                                                                  requirements. The requirements
                                                                  are ANDed.
                                                                items:
                                                                  description: A label
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: key
                                                                        is the label key
                                                                        that the selector
                                                                        applies to.
                                                                      type: string
                                                                    operator:
                                                                      description: operator
                                                                        represents a key's
                                                                        relationship to
                                                                        a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists and DoesNotExist.
                                                                      type: string
                                                                    values:
                                                                      description: values
                                                                        is an array of
                                                                        string values.
                                                                        If the operator
                                                                        is In or NotIn,
                                                                        the values array
                                                                        must be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchLabels:
                                                                additionalProperties:
                                                                  type: string
                                                                description: matchLabels
                                                                  is a map of {key,value}
                                                                  pairs. A single {key,value}
                                                                  in the matchLabels map
                                                                  is equivalent to an
                                                                  element of matchExpressions,
                                                                  whose key field is "key",
                                                                  the operator is "In",
                                                                  and the values array
                                                                  contains only "value".
                                                                  The requirements are
                                                                  ANDed.
                                                                type: object
                                                            type: object
                                                          namespaces:
                                                            description: namespaces specifies
                                                              a static list of namespace
                                                              names that the term applies
                                                              to. The term is applied
                                                              to the union of the namespaces
                                                              listed in this field and
                                                              the ones selected by namespaceSelector.
                                                              null or empty namespaces
                                                              list and null namespaceSelector
                                                              means "this pod's namespace"
                                                            items:
                                                              type: string
                                                            type: array
                                                          topologyKey:
                                                            description: This pod should
                                                              be co-located (affinity)
                                                              or not co-located (anti-affinity)
                                                              with the pods matching the
                                                              labelSelector in the specified
                                                              namespaces, where co-located
                                                              is defined as running on
                                                              a node whose value of the
                                                              label with key topologyKey
                                                              matches that of any node
                                                              on which any of the selected
                                                              pods is running. Empty topologyKey
                                                              is not allowed.
                                                            type: string
                                                        required:
                                                        - topologyKey
                                                        type: object
                                                      type: array
                                                  type: object
                                                podAntiAffinity:
                                                  description: Describes pod anti-affinity
                                                    scheduling rules (e.g. avoid putting
                                                    this pod in the same node, zone, etc.
                                                    as some other pod(s)).
                                                  properties:
                                                    preferredDuringSchedulingIgnoredDuringExecution:
                                                      description: The scheduler will
                                                        prefer to schedule pods to nodes
                                                        that satisfy the anti-affinity
                                                        expressions specified by this
                                                        field, but it may choose a node
                                                        that violates one or more of the
                                                        expressions. The node that is
                                                        most preferred is the one with
                                                        the greatest sum of weights, i.e.
                                                        for each node that meets all of
                                                        the scheduling requirements (resource
                                                        request, requiredDuringScheduling
                                                        anti-affinity expressions, etc.),
                                                        compute a sum by iterating through
                                                        the elements of this field and
                                                        adding "weight" to the sum if
                                                        the node has pods which matches
                                                        the corresponding podAffinityTerm;
                                                        the node(s) with the highest sum
                                                        are the most preferred.
                                                      items:
                                                        description: The weights of all
                                                          of the matched WeightedPodAffinityTerm
                                                          fields are added per-node to
                                                          find the most preferred node(s)
                                                        properties:
                                                          podAffinityTerm:
                                                            description: Required. A pod
                                                              affinity term, associated
                                                              with the corresponding weight.
                                                            properties:
                                                              labelSelector:
                                                                description: A label query
                                                                  over a set of resources,
                                                                  in this case pods.
                                                                properties:
                                                                  matchExpressions:
                                                                    description: matchExpressions
                                                                      is a list of label
                                                                      selector requirements.
                                                                      The requirements
                                                                      are ANDed.
                                                                    items:
                                                                      description: A label
                                                                        selector requirement
                                                                        is a selector
                                                                        that contains
                                                                        values, a key,
                                                                        and an operator
                                                                        that relates the
                                                                        key and values.
                                                                      properties:
                                                                        key:
                                                                          description: key
                                                                            is the label
                                                                            key that the
                                                                            selector applies
                                                                            to.
                                                                          type: string
                                                                        operator:
                                                                          description: operator
                                                                            represents
                                                                            a key's relationship
                                                                            to a set of
                                                                            values. Valid
                                                                            operators
                                                                            are In, NotIn,
                                                                            Exists and
                                                                            DoesNotExist.
                                                                          type: string
                                                                        values:
                                                                          description: values
                                                                            is an array
                                                                            of string
                                                                            values. If
                                                                            the operator
                                                                            is In or NotIn,
                                                                            the values
                                                                            array must
                                                                            be non-empty.
                                                                            If the operator
                                                                            is Exists
                                                                            or DoesNotExist,
                                                                            the values
                                                                            array must
                                                                            be empty.
                                                                            This array
                                                                            is replaced
                                                                            during a strategic
                                                                            merge patch.
                                                                          items:
                                                                            type: string
                                                                          type: array
                                                                      required:
                                                                      - key
                                                                      - operator
                                                                      type: object
                                                                    type: array
                                                                  matchLabels:
                                                                    additionalProperties:
                                                                      type: string
                                                                    description: matchLabels
                                                                      is a map of {key,value}
                                                                      pairs. A single
                                                                      {key,value} in the
                                                                      matchLabels map
                                                                      is equivalent to
                                                                      an element of matchExpressions,
                                                                      whose key field
                                                                      is "key", the operator
                                                                      is "In", and the
                                                                      values array contains
                                                                      only "value". The
                                                                      requirements are
                                                                      ANDed.
                                                                    type: object
                                                                type: object
                                                              namespaceSelector:
                                                                description: A label query
                                                                  over the set of namespaces
                                                                  that the term applies
                                                                  to. The term is applied
                                                                  to the union of the
                                                                  namespaces selected
                                                                  by this field and the
                                                                  ones listed in the namespaces
                                                                  field. null selector
                                                                  and null or empty namespaces
                                                                  list means "this pod's
                                                                  namespace". An empty
                                                                  selector ({}) matches
                                                                  all namespaces. This
                                                                  field is alpha-level
                                                                  and is only honored
                                                                  when PodAffinityNamespaceSelector
                                                                  feature is enabled.
                                                                properties:
                                                                  matchExpressions:
                                                                    description: matchExpressions
                                                                      is a list of label
                                                                      selector requirements.
                                                                      The requirements
                                                                      are ANDed.
                                                                    items:
                                                                      description: A label
                                                                        selector requirement
                                                                        is a selector
                                                                        that contains
                                                                        values, a key,
                                                                        and an operator
                                                                        that relates the
                                                                        key and values.
                                                                      properties:
                                                                        key:
                                                                          description: key
                                                                            is the label
                                                                            key that the
                                                                            selector applies
                                                                            to.
                                                                          type: string
                                                                        operator:
                                                                          description: operator
                                                                            represents
                                                                            a key's relationship
                                                                            to a set of
                                                                            values. Valid
                                                                            operators
                                                                            are In, NotIn,
                                                                            Exists and
                                                                            DoesNotExist.
                                                                          type: string
                                                                        values:
                                                                          description: values
                                                                            is an array
                                                                            of string
                                                                            values. If
                                                                            the operator
                                                                            is In or NotIn,
                                                                            the values
                                                                            array must
                                                                            be non-empty.
                                                                            If the operator
                                                                            is Exists
                                                                            or DoesNotExist,
                                                                            the values
                                                                            array must
                                                                            be empty.
                                                                            This array
                                                                            is replaced
                                                                            during a strategic
                                                                            merge patch.
                                                                          items:
                                                                            type: string
                                                                          type: array
                                                                      required:
                                                                      - key
                                                                      - operator
                                                                      type: object
                                                                    type: array
                                                                  matchLabels:
                                                                    additionalProperties:
                                                                      type: string
                                                                    description: matchLabels
                                                                      is a map of {key,value}
                                                                      pairs. A single
                                                                      {key,value} in the
                                                                      matchLabels map
                                                                      is equivalent to
                                                                      an element of matchExpressions,
                                                                      whose key field
                                                                      is "key", the operator
                                                                      is "In", and the
                                                                      values array contains
                                                                      only "value". The
                                                                      requirements are
                                                                      ANDed.
                                                                    type: object
                                                                type: object
                                                              namespaces:
                                                                description: namespaces
                                                                  specifies a static list
                                                                  of namespace names that
                                                                  the term applies to.
                                                                  The term is applied
                                                                  to the union of the
                                                                  namespaces listed in
                                                                  this field and the ones
                                                                  selected by namespaceSelector.
                                                                  null or empty namespaces
                                                                  list and null namespaceSelector
                                                                  means "this pod's namespace"
                                                                items:
                                                                  type: string
                                                                type: array
                                                              topologyKey:
                                                                description: This pod
                                                                  should be co-located
                                                                  (affinity) or not co-located
                                                                  (anti-affinity) with
                                                                  the pods matching the
                                                                  labelSelector in the
                                                                  specified namespaces,
                                                                  where co-located is
                                                                  defined as running on
                                                                  a node whose value of
                                                                  the label with key topologyKey
                                                                  matches that of any
                                                                  node on which any of
                                                                  the selected pods is
                                                                  running. Empty topologyKey
                                                                  is not allowed.
                                                                type: string
                                                            required:
                                                            - topologyKey
                                                            type: object
                                                          weight:
                                                            description: weight associated
                                                              with matching the corresponding
                                                              podAffinityTerm, in the
                                                              range 1-100.
                                                            format: int32
                                                            type: integer
                                                        required:
                                                        - podAffinityTerm
                                                        - weight
                                                        type: object
                                                      type: array
                                                    requiredDuringSchedulingIgnoredDuringExecution:
                                                      description: If the anti-affinity
                                                        requirements specified by this
                                                        field are not met at scheduling
                                                        time, the pod will not be scheduled
                                                        onto the node. If the anti-affinity
                                                        requirements specified by this
                                                        field cease to be met at some
                                                        point during pod execution (e.g.
                                                        due to a pod label update), the
                                                        system may or may not try to eventually
                                                        evict the pod from its node. When
                                                        there are multiple elements, the
                                                        lists of nodes corresponding to
                                                        each podAffinityTerm are intersected,
                                                        i.e. all terms must be satisfied.
                                                      items:
                                                        description: Defines a set of
                                                          pods (namely those matching
                                                          the labelSelector relative to
                                                          the given namespace(s)) that
                                                          this pod should be co-located
                                                          (affinity) or not co-located
                                                          (anti-affinity) with, where
                                                          co-located is defined as running
                                                          on a node whose value of the
                                                          label with key <topologyKey>
                                                          matches that of any node on
                                                          which a pod of the set of pods
                                                          is running
                                                        properties:
                                                          labelSelector:
                                                            description: A label query
                                                              over a set of resources,
                                                              in this case pods.
                                                            properties:
                                                              matchExpressions:
                                                                description: matchExpressions
                                                                  is a list of label selector
                                                                  requirements. The requirements
                                                                  are ANDed.
                                                                items:
                                                                  description: A label
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: key
                                                                        is the label key
                                                                        that the selector
                                                                        applies to.
                                                                      type: string
                                                                    operator:
                                                                      description: operator
                                                                        represents a key's
                                                                        relationship to
                                                                        a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists and DoesNotExist.
                                                                      type: string
                                                                    values:
                                                                      description: values
                                                                        is an array of
                                                                        string values.
                                                                        If the operator
                                                                        is In or NotIn,
                                                                        the values array
                                                                        must be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchLabels:
                                                                additionalProperties:
                                                                  type: string
                                                                description: matchLabels
                                                                  is a map of {key,value}
                                                                  pairs. A single {key,value}
                                                                  in the matchLabels map
                                                                  is equivalent to an
                                                                  element of matchExpressions,
                                                                  whose key field is "key",
                                                                  the operator is "In",
                                                                  and the values array
                                                                  contains only "value".
                                                                  The requirements are
                                                                  ANDed.
                                                                type: object
                                                            type: object
                                                          namespaceSelector:
                                                            description: A label query
                                                              over the set of namespaces
                                                              that the term applies to.
                                                              The term is applied to the
                                                              union of the namespaces
                                                              selected by this field and
                                                              the ones listed in the namespaces
                                                              field. null selector and
                                                              null or empty namespaces
                                                              list means "this pod's namespace".
                                                              An empty selector ({}) matches
                                                              all namespaces. This field
                                                              is alpha-level and is only
                                                              honored when PodAffinityNamespaceSelector
                                                              feature is enabled.
                                                            properties:
                                                              matchExpressions:
                                                                description: matchExpressions
                                                                  is a list of label selector
                                                                  requirements. The requirements
                                                                  are ANDed.
                                                                items:
                                                                  description: A label
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: key
                                                                        is the label key
                                                                        that the selector
                                                                        applies to.
                                                                      type: string
                                                                    operator:
                                                                      description: operator
                                                                        represents a key's
                                                                        relationship to
                                                                        a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists and DoesNotExist.
                                                                      type: string
                                                                    values:
                                                                      description: values
                                                                        is an array of
                                                                        string values.
                                                                        If the operator
                                                                        is In or NotIn,
                                                                        the values array
                                                                        must be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchLabels:
                                                                additionalProperties:
                                                                  type: string
                                                                description: matchLabels
                                                                  is a map of {key,value}
                                                                  pairs. A single {key,value}
                                                                  in the matchLabels map
                                                                  is equivalent to an
                                                                  element of matchExpressions,
                                                                  whose key field is "key",
                                                                  the operator is "In",
                                                                  and the values array
                                                                  contains only "value".
                                                                  The requirements are
                                                                  ANDed.
                                                                type: object
                                                            type: object
                                                          namespaces:
                                                            description: namespaces specifies
                                                              a static list of namespace
                                                              names that the term applies
                                                              to. The term is applied
                                                              to the union of the namespaces
                                                              listed in this field and
                                                              the ones selected by namespaceSelector.
                                                              null or empty namespaces
                                                              list and null namespaceSelector
                                                              means "this pod's namespace"
                                                            items:
                                                              type: string
                                                            type: array
                                                          topologyKey:
                                                            description: This pod should
                                                              be co-located (affinity)
                                                              or not co-located (anti-affinity)
                                                              with the pods matching the
                                                              labelSelector in the specified
                                                              namespaces, where co-located
                                                              is defined as running on
                                                              a node whose value of the
                                                              label with key topologyKey
                                                              matches that of any node
                                                              on which any of the selected
                                                              pods is running. Empty topologyKey
                                                              is not allowed.
                                                            type: string
                                                        required:
                                                        - topologyKey
                                                        type: object
                                                      type: array
                                                  type: object
                                              type: object
                                            nodeSelector:
                                              additionalProperties:
                                                type: string
                                              description: 'NodeSelector is a selector
                                                which must be true for the pod to fit
                                                on a node. Selector which must match a
                                                node''s labels for the pod to be scheduled
                                                on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
                                              type: object
                                            priorityClassName:
                                              description: If specified, the pod's priorityClassName.
                                              type: string
                                            serviceAccountName:
                                              description: If specified, the pod's service
                                                account
                                              type: string
                                            tolerations:
                                              description: If specified, the pod's tolerations.
                                              items:
                                                description: The pod this Toleration is
                                                  attached to tolerates any taint that
                                                  matches the triple <key,value,effect>
                                                  using the matching operator <operator>.
                                                properties:
                                                  effect:
                                                    description: Effect indicates the
                                                      taint effect to match. Empty means
                                                      match all taint effects. When specified,
                                                      allowed values are NoSchedule, PreferNoSchedule
                                                      and NoExecute.
                                                    type: string
                                                  key:
                                                    description: Key is the taint key
                                                      that the toleration applies to.
                                                      Empty means match all taint keys.
                                                      If the key is empty, operator must
                                                      be Exists; this combination means
                                                      to match all values and all keys.
                                                    type: string
                                                  operator:
                                                    description: Operator represents a
                                                      key's relationship to the value.
                                                      Valid operators are Exists and Equal.
                                                      Defaults to Equal. Exists is equivalent
                                                      to wildcard for value, so that a
                                                      pod can tolerate all taints of a
                                                      particular category.
                                                    type: string
                                                  tolerationSeconds:
                                                    description: TolerationSeconds represents
                                                      the period of time the toleration
                                                      (which must be of effect NoExecute,
                                                      otherwise this field is ignored)
                                                      tolerates the taint. By default,
                                                      it is not set, which means tolerate
                                                      the taint forever (do not evict).
                                                      Zero and negative values will be
                                                      treated as 0 (evict immediately)
                                                      by the system.
                                                    format: int64
                                                    type: integer
                                                  value:
                                                    description: Value is the taint value
                                                      the toleration matches to. If the
                                                      operator is Exists, the value should
                                                      be empty, otherwise just a regular
                                                      string.
                                                    type: string
                                                type: object
                                              type: array
                                          type: object
                                      type: object
                                    serviceType:
                                      description: Optional service type for Kubernetes
                                        solver service. Supported values are NodePort
                                        or ClusterIP. If unset, defaults to NodePort.
                                      type: string
                                  type: object
                              type: object
                            selector:
                              description: Selector selects a set of DNSNames on the Certificate
                                resource that should be solved using this challenge solver.
                                If not specified, the solver will be treated as the 'default'
                                solver with the lowest priority, i.e. if any other solver
                                has a more specific match, it will be used instead.
                              properties:
                                dnsNames:
                                  description: List of DNSNames that this solver will
                                    be used to solve. If specified and a match is found,
                                    a dnsNames selector will take precedence over a dnsZones
                                    selector. If multiple solvers match with the same
                                    dnsNames value, the solver with the most matching
                                    labels in matchLabels will be selected. If neither
                                    has more matches, the solver defined earlier in the
                                    list will be selected.
                                  items:
                                    type: string
                                  type: array
                                dnsZones:
                                  description: List of DNSZones that this solver will
                                    be used to solve. The most specific DNS zone match
                                    specified here will take precedence over other DNS
                                    zone matches, so a solver specifying sys.example.com
                                    will be selected over one specifying example.com for
                                    the domain www.sys.example.com. If multiple solvers
                                    match with the same dnsZones value, the solver with
                                    the most matching labels in matchLabels will be selected.
                                    If neither has more matches, the solver defined earlier
                                    in the list will be selected.
                                  items:
                                    type: string
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: A label selector that is used to refine
                                    the set of certificate's that this challenge solver
                                    will apply to.
                                  type: object
                              type: object
                          type: object
                        type: array
                    required:
                    - privateKeySecretRef
                    - server
                    type: object
                  ca:
                    description: CA configures this issuer to sign certificates using
                      a signing CA keypair stored in a Secret resource. This is used to
                      build internal PKIs that are managed by cert-manager.
                    properties:
                      crlDistributionPoints:
                        description: The CRL distribution points is an X.509 v3 certificate
                          extension which identifies the location of the CRL from which
                          the revocation of this certificate can be checked. If not set,
                          certificates will be issued without distribution points set.
                        items:
                          type: string
                        type: array
                      ocspServers:
                        description: The OCSP server list is an X.509 v3 extension that
                          defines a list of URLs of OCSP responders. The OCSP responders
                          can be queried for the revocation status of an issued certificate.
                          If not set, the certificate will be issued with no OCSP servers
                          set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
                        items:
                          type: string
                        type: array
                      secretName:
                        description: SecretName is the name of the secret used to sign
                          Certificates issued by this Issuer.
                        type: string
                    required:
                    - secretName
                    type: object
                  selfSigned:
                    description: SelfSigned configures this issuer to 'self sign' certificates
                      using the private key used to create the CertificateRequest object.
                    properties:
                      crlDistributionPoints:
                        description: The CRL distribution points is an X.509 v3 certificate
                          extension which identifies the location of the CRL from which
                          the revocation of this certificate can be checked. If not set
                          certificate will be issued without CDP. Values are strings.
                        items:
                          type: string
                        type: array
                    type: object
                  vault:
                    description: Vault configures this issuer to sign certificates using
                      a HashiCorp Vault PKI backend.
                    properties:
                      auth:
                        description: Auth configures how cert-manager authenticates with
                          the Vault server.
                        properties:
                          appRole:
                            description: AppRole authenticates with Vault using the App
                              Role auth mechanism, with the role and secret stored in
                              a Kubernetes Secret resource.
                            properties:
                              path:
                                description: 'Path where the App Role authentication backend
                                  is mounted in Vault, e.g: "approle"'
                                type: string
                              roleId:
                                description: RoleID configured in the App Role authentication
                                  backend when setting up the authentication backend in
                                  Vault.
                                type: string
                              secretRef:
                                description: Reference to a key in a Secret that contains
                                  the App Role secret used to authenticate with Vault.
                                  The `key` field must be specified and denotes which
                                  entry within the Secret resource is used as the app
                                  role secret.
                                properties:
                                  key:
                                    description: The key of the entry in the Secret resource's
                                      `data` field to be used. Some instances of this
                                      field may be defaulted, in others it may be required.
                                    type: string
                                  name:
                                    description: 'Name of the resource being referred
                                      to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                    type: string
                                required:
                                - name
                                type: object
                            required:
                            - path
                            - roleId
                            - secretRef
                            type: object
                          kubernetes:
                            description: Kubernetes authenticates with Vault by passing
                              the ServiceAccount token stored in the named Secret resource
                              to the Vault server.
                            properties:
                              mountPath:
                                description: The Vault mountPath here is the mount path
                                  to use when authenticating with Vault. For example,
                                  setting a value to `/v1/auth/foo`, will use the path
                                  `/v1/auth/foo/login` to authenticate with Vault. If
                                  unspecified, the default value "/v1/auth/kubernetes"
                                  will be used.
                                type: string
                              role:
                                description: A required field containing the Vault Role
                                  to assume. A Role binds a Kubernetes ServiceAccount
                                  with a set of Vault policies.
                                type: string
                              secretRef:
                                description: The required Secret field containing a Kubernetes
                                  ServiceAccount JWT used for authenticating with Vault.
                                  Use of 'ambient credentials' is not supported.
                                properties:
                                  key:
                                    description: The key of the entry in the Secret resource's
                                      `data` field to be used. Some instances of this
                                      field may be defaulted, in others it may be required.
                                    type: string
                                  name:
                                    description: 'Name of the resource being referred
                                      to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                    type: string
                                required:
                                - name
                                type: object
                            required:
                            - role
                            - secretRef
                            type: object
                          tokenSecretRef:
                            description: TokenSecretRef authenticates with Vault by presenting
                              a token.
                            properties:
                              key:
                                description: The key of the entry in the Secret resource's
                                  `data` field to be used. Some instances of this field
                                  may be defaulted, in others it may be required.
                                type: string
                              name:
                                description: 'Name of the resource being referred to.
                                  More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                            required:
                            - name
                            type: object
                        type: object
                      caBundle:
                        description: PEM-encoded CA bundle (base64-encoded) used to validate
                          Vault server certificate. Only used if the Server URL is using
                          HTTPS protocol. This parameter is ignored for plain HTTP protocol
                          connection. If not set the system root certificates are used
                          to validate the TLS connection.
                        format: byte
                        type: string
                      namespace:
                        description: 'Name of the vault namespace. Namespaces is a set
                          of features within Vault Enterprise that allows Vault environments
                          to support Secure Multi-tenancy. e.g: "ns1" More about namespaces
                          can be found here https://www.vaultproject.io/docs/enterprise/namespaces'
                        type: string
                      path:
                        description: 'Path is the mount path of the Vault PKI backend''s
                          `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".'
                        type: string
                      server:
                        description: 'Server is the connection address for the Vault server,
                          e.g: "https://vault.example.com:8200".'
                        type: string
                    required:
                    - auth
                    - path
                    - server
                    type: object
                  venafi:
                    description: Venafi configures this issuer to sign certificates using
                      a Venafi TPP or Venafi Cloud policy zone.
                    properties:
                      cloud:
                        description: Cloud specifies the Venafi cloud configuration settings.
                          Only one of TPP or Cloud may be specified.
                        properties:
                          apiTokenSecretRef:
                            description: APITokenSecretRef is a secret key selector for
                              the Venafi Cloud API token.
                            properties:
                              key:
                                description: The key of the entry in the Secret resource's
                                  `data` field to be used. Some instances of this field
                                  may be defaulted, in others it may be required.
                                type: string
                              name:
                                description: 'Name of the resource being referred to.
                                  More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                            required:
                            - name
                            type: object
                          url:
                            description: URL is the base URL for Venafi Cloud. Defaults
                              to "https://api.venafi.cloud/v1".
                            type: string
                        required:
                        - apiTokenSecretRef
                        type: object
                      tpp:
                        description: TPP specifies Trust Protection Platform configuration
                          settings. Only one of TPP or Cloud may be specified.
                        properties:
                          caBundle:
                            description: CABundle is a PEM encoded TLS certificate to
                              use to verify connections to the TPP instance. If specified,
                              system roots will not be used and the issuing CA for the
                              TPP instance must be verifiable using the provided root.
                              If not specified, the connection will be verified using
                              the cert-manager system root certificates.
                            format: byte
                            type: string
                          credentialsRef:
                            description: CredentialsRef is a reference to a Secret containing
                              the username and password for the TPP server. The secret
                              must contain two keys, 'username' and 'password'.
                            properties:
                              name:
                                description: 'Name of the resource being referred to.
                                  More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                            required:
                            - name
                            type: object
                          url:
                            description: 'URL is the base URL for the vedsdk endpoint
                              of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".'
                            type: string
                        required:
                        - credentialsRef
                        - url
                        type: object
                      zone:
                        description: Zone is the Venafi Policy Zone to use for this issuer.
                          All requests made to the Venafi platform will be restricted
                          by the named zone policy. This field is required.
                        type: string
                    required:
                    - zone
                    type: object
                type: object
              status:
                description: Status of the ClusterIssuer. This is set and managed automatically.
                properties:
                  acme:
                    description: ACME specific status options. This field should only
                      be set if the Issuer is configured to use an ACME server to issue
                      certificates.
                    properties:
                      lastRegisteredEmail:
                        description: LastRegisteredEmail is the email associated with
                          the latest registered ACME account, in order to track changes
                          made to registered account associated with the  Issuer
                        type: string
                      uri:
                        description: URI is the unique account identifier, which can also
                          be used to retrieve account details from the CA
                        type: string
                    type: object
                  conditions:
                    description: List of status conditions to indicate the status of a
                      CertificateRequest. Known condition types are `Ready`.
                    items:
                      description: IssuerCondition contains condition information for
                        an Issuer.
                      properties:
                        lastTransitionTime:
                          description: LastTransitionTime is the timestamp corresponding
                            to the last status change of this condition.
                          format: date-time
                          type: string
                        message:
                          description: Message is a human readable description of the
                            details of the last transition, complementing reason.
                          type: string
                        observedGeneration:
                          description: If set, this represents the .metadata.generation
                            that the condition was set based upon. For instance, if .metadata.generation
                            is currently 12, but the .status.condition[x].observedGeneration
                            is 9, the condition is out of date with respect to the current
                            state of the Issuer.
                          format: int64
                          type: integer
                        reason:
                          description: Reason is a brief machine readable explanation
                            for the condition's last transition.
                          type: string
                        status:
                          description: Status of the condition, one of (`True`, `False`,
                            `Unknown`).
                          enum:
                          - "True"
                          - "False"
                          - Unknown
                          type: string
                        type:
                          description: Type of the condition, known values are (`Ready`).
                          type: string
                      required:
                      - status
                      - type
                      type: object
                    type: array
                type: object
            required:
            - spec
            type: object
        served: true
        storage: false
        subresources:
          status: {}
      - additionalPrinterColumns:
        - jsonPath: .status.conditions[?(@.type=="Ready")].status
          name: Ready
          type: string
        - jsonPath: .status.conditions[?(@.type=="Ready")].message
          name: Status
          priority: 1
          type: string
        - description: CreationTimestamp is a timestamp representing the server time when
            this object was created. It is not guaranteed to be set in happens-before
            order across separate operations. Clients may not set this value. It is represented
            in RFC3339 form and is in UTC.
          jsonPath: .metadata.creationTimestamp
          name: Age
          type: date
        name: v1
        schema:
          openAPIV3Schema:
            description: A ClusterIssuer represents a certificate issuing authority which
              can be referenced as part of `issuerRef` fields. It is similar to an Issuer,
              however it is cluster-scoped and therefore can be referenced by resources
              that exist in *any* namespace, not just the same namespace as the referent.
            properties:
              apiVersion:
                description: 'APIVersion defines the versioned schema of this representation
                  of an object. Servers should convert recognized schemas to the latest
                  internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
                type: string
              kind:
                description: 'Kind is a string value representing the REST resource this
                  object represents. Servers may infer this from the endpoint the client
                  submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                type: string
              metadata:
                type: object
              spec:
                description: Desired state of the ClusterIssuer resource.
                properties:
                  acme:
                    description: ACME configures this issuer to communicate with a RFC8555
                      (ACME) server to obtain signed x509 certificates.
                    properties:
                      disableAccountKeyGeneration:
                        description: Enables or disables generating a new ACME account
                          key. If true, the Issuer resource will *not* request a new account
                          but will expect the account key to be supplied via an existing
                          secret. If false, the cert-manager system will generate a new
                          ACME account key for the Issuer. Defaults to false.
                        type: boolean
                      email:
                        description: Email is the email address to be associated with
                          the ACME account. This field is optional, but it is strongly
                          recommended to be set. It will be used to contact you in case
                          of issues with your account or certificates, including expiry
                          notification emails. This field may be updated after the account
                          is initially registered.
                        type: string
                      enableDurationFeature:
                        description: Enables requesting a Not After date on certificates
                          that matches the duration of the certificate. This is not supported
                          by all ACME servers like Let's Encrypt. If set to true when
                          the ACME server does not support it it will create an error
                          on the Order. Defaults to false.
                        type: boolean
                      externalAccountBinding:
                        description: ExternalAccountBinding is a reference to a CA external
                          account of the ACME server. If set, upon registration cert-manager
                          will attempt to associate the given external account credentials
                          with the registered ACME account.
                        properties:
                          keyAlgorithm:
                            description: 'Deprecated: keyAlgorithm field exists for historical
                              compatibility reasons and should not be used. The algorithm
                              is now hardcoded to HS256 in golang/x/crypto/acme.'
                            enum:
                            - HS256
                            - HS384
                            - HS512
                            type: string
                          keyID:
                            description: keyID is the ID of the CA key that the External
                              Account is bound to.
                            type: string
                          keySecretRef:
                            description: keySecretRef is a Secret Key Selector referencing
                              a data item in a Kubernetes Secret which holds the symmetric
                              MAC key of the External Account Binding. The `key` is the
                              index string that is paired with the key data in the Secret
                              and should not be confused with the key data itself, or
                              indeed with the External Account Binding keyID above. The
                              secret key stored in the Secret **must** be un-padded, base64
                              URL encoded data.
                            properties:
                              key:
                                description: The key of the entry in the Secret resource's
                                  `data` field to be used. Some instances of this field
                                  may be defaulted, in others it may be required.
                                type: string
                              name:
                                description: 'Name of the resource being referred to.
                                  More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                            required:
                            - name
                            type: object
                        required:
                        - keyID
                        - keySecretRef
                        type: object
                      preferredChain:
                        description: 'PreferredChain is the chain to use if the ACME server
                          outputs multiple. PreferredChain is no guarantee that this one
                          gets delivered by the ACME endpoint. For example, for Let''s
                          Encrypt''s DST crosssign you would use: "DST Root CA X3" or
                          "ISRG Root X1" for the newer Let''s Encrypt root CA. This value
                          picks the first certificate bundle in the ACME alternative chains
                          that has a certificate with this value as its issuer''s CN'
                        maxLength: 64
                        type: string
                      privateKeySecretRef:
                        description: PrivateKey is the name of a Kubernetes Secret resource
                          that will be used to store the automatically generated ACME
                          account private key. Optionally, a `key` may be specified to
                          select a specific entry within the named Secret resource. If
                          `key` is not specified, a default of `tls.key` will be used.
                        properties:
                          key:
                            description: The key of the entry in the Secret resource's
                              `data` field to be used. Some instances of this field may
                              be defaulted, in others it may be required.
                            type: string
                          name:
                            description: 'Name of the resource being referred to. More
                              info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                            type: string
                        required:
                        - name
                        type: object
                      server:
                        description: 'Server is the URL used to access the ACME server''s
                          ''directory'' endpoint. For example, for Let''s Encrypt''s staging
                          endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory".
                          Only ACME v2 endpoints (i.e. RFC 8555) are supported.'
                        type: string
                      skipTLSVerify:
                        description: Enables or disables validation of the ACME server
                          TLS certificate. If true, requests to the ACME server will not
                          have their TLS certificate validated (i.e. insecure connections
                          will be allowed). Only enable this option in development environments.
                          The cert-manager system installed roots will be used to verify
                          connections to the ACME server if this is false. Defaults to
                          false.
                        type: boolean
                      solvers:
                        description: 'Solvers is a list of challenge solvers that will
                          be used to solve ACME challenges for the matching domains. Solver
                          configurations must be provided in order to obtain certificates
                          from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/'
                        items:
                          description: An ACMEChallengeSolver describes how to solve ACME
                            challenges for the issuer it is part of. A selector may be
                            provided to use different solving strategies for different
                            DNS names. Only one of HTTP01 or DNS01 must be provided.
                          properties:
                            dns01:
                              description: Configures cert-manager to attempt to complete
                                authorizations by performing the DNS01 challenge flow.
                              properties:
                                acmeDNS:
                                  description: Use the 'ACME DNS' (https://github.com/joohoi/acme-dns)
                                    API to manage DNS01 challenge records.
                                  properties:
                                    accountSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    host:
                                      type: string
                                  required:
                                  - accountSecretRef
                                  - host
                                  type: object
                                akamai:
                                  description: Use the Akamai DNS zone management API
                                    to manage DNS01 challenge records.
                                  properties:
                                    accessTokenSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    clientSecretSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    clientTokenSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    serviceConsumerDomain:
                                      type: string
                                  required:
                                  - accessTokenSecretRef
                                  - clientSecretSecretRef
                                  - clientTokenSecretRef
                                  - serviceConsumerDomain
                                  type: object
                                azureDNS:
                                  description: Use the Microsoft Azure DNS API to manage
                                    DNS01 challenge records.
                                  properties:
                                    clientID:
                                      description: if both this and ClientSecret are left
                                        unset MSI will be used
                                      type: string
                                    clientSecretSecretRef:
                                      description: if both this and ClientID are left
                                        unset MSI will be used
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    environment:
                                      enum:
                                      - AzurePublicCloud
                                      - AzureChinaCloud
                                      - AzureGermanCloud
                                      - AzureUSGovernmentCloud
                                      type: string
                                    hostedZoneName:
                                      type: string
                                    resourceGroupName:
                                      type: string
                                    subscriptionID:
                                      type: string
                                    tenantID:
                                      description: when specifying ClientID and ClientSecret
                                        then this field is also needed
                                      type: string
                                  required:
                                  - resourceGroupName
                                  - subscriptionID
                                  type: object
                                cloudDNS:
                                  description: Use the Google Cloud DNS API to manage
                                    DNS01 challenge records.
                                  properties:
                                    hostedZoneName:
                                      description: HostedZoneName is an optional field
                                        that tells cert-manager in which Cloud DNS zone
                                        the challenge record has to be created. If left
                                        empty cert-manager will automatically choose a
                                        zone.
                                      type: string
                                    project:
                                      type: string
                                    serviceAccountSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                  required:
                                  - project
                                  type: object
                                cloudflare:
                                  description: Use the Cloudflare API to manage DNS01
                                    challenge records.
                                  properties:
                                    apiKeySecretRef:
                                      description: 'API key to use to authenticate with
                                        Cloudflare. Note: using an API token to authenticate
                                        is now the recommended method as it allows greater
                                        control of permissions.'
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    apiTokenSecretRef:
                                      description: API token used to authenticate with
                                        Cloudflare.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                    email:
                                      description: Email of the account, only required
                                        when using API key based authentication.
                                      type: string
                                  type: object
                                cnameStrategy:
                                  description: CNAMEStrategy configures how the DNS01
                                    provider should handle CNAME records when found in
                                    DNS zones.
                                  enum:
                                  - None
                                  - Follow
                                  type: string
                                digitalocean:
                                  description: Use the DigitalOcean DNS API to manage
                                    DNS01 challenge records.
                                  properties:
                                    tokenSecretRef:
                                      description: A reference to a specific 'key' within
                                        a Secret resource. In some instances, `key` is
                                        a required field.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                  required:
                                  - tokenSecretRef
                                  type: object
                                rfc2136:
                                  description: Use RFC2136 ("Dynamic Updates in the Domain
                                    Name System") (https://datatracker.ietf.org/doc/rfc2136/)
                                    to manage DNS01 challenge records.
                                  properties:
                                    nameserver:
                                      description: The IP address or hostname of an authoritative
                                        DNS server supporting RFC2136 in the form host:port.
                                        If the host is an IPv6 address it must be enclosed
                                        in square brackets (e.g [2001:db8::1]) ; port
                                        is optional. This field is required.
                                      type: string
                                    tsigAlgorithm:
                                      description: 'The TSIG Algorithm configured in the
                                        DNS supporting RFC2136. Used only when ``tsigSecretSecretRef``
                                        and ``tsigKeyName`` are defined. Supported values
                                        are (case-insensitive): ``HMACMD5`` (default),
                                        ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.'
                                      type: string
                                    tsigKeyName:
                                      description: The TSIG Key name configured in the
                                        DNS. If ``tsigSecretSecretRef`` is defined, this
                                        field is required.
                                      type: string
                                    tsigSecretSecretRef:
                                      description: The name of the secret containing the
                                        TSIG value. If ``tsigKeyName`` is defined, this
                                        field is required.
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                  required:
                                  - nameserver
                                  type: object
                                route53:
                                  description: Use the AWS Route53 API to manage DNS01
                                    challenge records.
                                  properties:
                                    accessKeyID:
                                      description: 'The AccessKeyID is used for authentication.
                                        If not set we fall-back to using env vars, shared
                                        credentials file or AWS Instance metadata see:
                                        https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials'
                                      type: string
                                    hostedZoneID:
                                      description: If set, the provider will manage only
                                        this zone in Route53 and will not do an lookup
                                        using the route53:ListHostedZonesByName api call.
                                      type: string
                                    region:
                                      description: Always set the region when using AccessKeyID
                                        and SecretAccessKey
                                      type: string
                                    role:
                                      description: Role is a Role ARN which the Route53
                                        provider will assume using either the explicit
                                        credentials AccessKeyID/SecretAccessKey or the
                                        inferred credentials from environment variables,
                                        shared credentials file or AWS Instance metadata
                                      type: string
                                    secretAccessKeySecretRef:
                                      description: The SecretAccessKey is used for authentication.
                                        If not set we fall-back to using env vars, shared
                                        credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
                                      properties:
                                        key:
                                          description: The key of the entry in the Secret
                                            resource's `data` field to be used. Some instances
                                            of this field may be defaulted, in others
                                            it may be required.
                                          type: string
                                        name:
                                          description: 'Name of the resource being referred
                                            to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                          type: string
                                      required:
                                      - name
                                      type: object
                                  required:
                                  - region
                                  type: object
                                webhook:
                                  description: Configure an external webhook based DNS01
                                    challenge solver to manage DNS01 challenge records.
                                  properties:
                                    config:
                                      description: Additional configuration that should
                                        be passed to the webhook apiserver when challenges
                                        are processed. This can contain arbitrary JSON
                                        data. Secret values should not be specified in
                                        this stanza. If secret values are needed (e.g.
                                        credentials for a DNS service), you should use
                                        a SecretKeySelector to reference a Secret resource.
                                        For details on the schema of this field, consult
                                        the webhook provider implementation's documentation.
                                      x-kubernetes-preserve-unknown-fields: true
                                    groupName:
                                      description: The API group name that should be used
                                        when POSTing ChallengePayload resources to the
                                        webhook apiserver. This should be the same as
                                        the GroupName specified in the webhook provider
                                        implementation.
                                      type: string
                                    solverName:
                                      description: The name of the solver to use, as defined
                                        in the webhook provider implementation. This will
                                        typically be the name of the provider, e.g. 'cloudflare'.
                                      type: string
                                  required:
                                  - groupName
                                  - solverName
                                  type: object
                              type: object
                            http01:
                              description: Configures cert-manager to attempt to complete
                                authorizations by performing the HTTP01 challenge flow.
                                It is not possible to obtain certificates for wildcard
                                domain names (e.g. `*.example.com`) using the HTTP01 challenge
                                mechanism.
                              properties:
                                gatewayHTTPRoute:
                                  description: The Gateway API is a sig-network community
                                    API that models service networking in Kubernetes (https://gateway-api.sigs.k8s.io/).
                                    The Gateway solver will create HTTPRoutes with the
                                    specified labels in the same namespace as the challenge.
                                    This solver is experimental, and fields / behaviour
                                    may change in the future.
                                  properties:
                                    labels:
                                      additionalProperties:
                                        type: string
                                      description: The labels that cert-manager will use
                                        when creating the temporary HTTPRoute needed for
                                        solving the HTTP-01 challenge. These labels must
                                        match the label selector of at least one Gateway.
                                      type: object
                                    serviceType:
                                      description: Optional service type for Kubernetes
                                        solver service. Supported values are NodePort
                                        or ClusterIP. If unset, defaults to NodePort.
                                      type: string
                                  type: object
                                ingress:
                                  description: The ingress based HTTP01 challenge solver
                                    will solve challenges by creating or modifying Ingress
                                    resources in order to route requests for '/.well-known/acme-challenge/XYZ'
                                    to 'challenge solver' pods that are provisioned by
                                    cert-manager for each Challenge to be completed.
                                  properties:
                                    class:
                                      description: The ingress class to use when creating
                                        Ingress resources to solve ACME challenges that
                                        use this challenge solver. Only one of 'class'
                                        or 'name' may be specified.
                                      type: string
                                    ingressTemplate:
                                      description: Optional ingress template used to configure
                                        the ACME challenge solver ingress used for HTTP01
                                        challenges.
                                      properties:
                                        metadata:
                                          description: ObjectMeta overrides for the ingress
                                            used to solve HTTP01 challenges. Only the
                                            'labels' and 'annotations' fields may be set.
                                            If labels or annotations overlap with in-built
                                            values, the values here will override the
                                            in-built values.
                                          properties:
                                            annotations:
                                              additionalProperties:
                                                type: string
                                              description: Annotations that should be
                                                added to the created ACME HTTP01 solver
                                                ingress.
                                              type: object
                                            labels:
                                              additionalProperties:
                                                type: string
                                              description: Labels that should be added
                                                to the created ACME HTTP01 solver ingress.
                                              type: object
                                          type: object
                                      type: object
                                    name:
                                      description: The name of the ingress resource that
                                        should have ACME challenge solving routes inserted
                                        into it in order to solve HTTP01 challenges. This
                                        is typically used in conjunction with ingress
                                        controllers like ingress-gce, which maintains
                                        a 1:1 mapping between external IPs and ingress
                                        resources.
                                      type: string
                                    podTemplate:
                                      description: Optional pod template used to configure
                                        the ACME challenge solver pods used for HTTP01
                                        challenges.
                                      properties:
                                        metadata:
                                          description: ObjectMeta overrides for the pod
                                            used to solve HTTP01 challenges. Only the
                                            'labels' and 'annotations' fields may be set.
                                            If labels or annotations overlap with in-built
                                            values, the values here will override the
                                            in-built values.
                                          properties:
                                            annotations:
                                              additionalProperties:
                                                type: string
                                              description: Annotations that should be
                                                added to the create ACME HTTP01 solver
                                                pods.
                                              type: object
                                            labels:
                                              additionalProperties:
                                                type: string
                                              description: Labels that should be added
                                                to the created ACME HTTP01 solver pods.
                                              type: object
                                          type: object
                                        spec:
                                          description: PodSpec defines overrides for the
                                            HTTP01 challenge solver pod. Only the 'priorityClassName',
                                            'nodeSelector', 'affinity', 'serviceAccountName'
                                            and 'tolerations' fields are supported currently.
                                            All other fields will be ignored.
                                          properties:
                                            affinity:
                                              description: If specified, the pod's scheduling
                                                constraints
                                              properties:
                                                nodeAffinity:
                                                  description: Describes node affinity
                                                    scheduling rules for the pod.
                                                  properties:
                                                    preferredDuringSchedulingIgnoredDuringExecution:
                                                      description: The scheduler will
                                                        prefer to schedule pods to nodes
                                                        that satisfy the affinity expressions
                                                        specified by this field, but it
                                                        may choose a node that violates
                                                        one or more of the expressions.
                                                        The node that is most preferred
                                                        is the one with the greatest sum
                                                        of weights, i.e. for each node
                                                        that meets all of the scheduling
                                                        requirements (resource request,
                                                        requiredDuringScheduling affinity
                                                        expressions, etc.), compute a
                                                        sum by iterating through the elements
                                                        of this field and adding "weight"
                                                        to the sum if the node matches
                                                        the corresponding matchExpressions;
                                                        the node(s) with the highest sum
                                                        are the most preferred.
                                                      items:
                                                        description: An empty preferred
                                                          scheduling term matches all
                                                          objects with implicit weight
                                                          0 (i.e. it's a no-op). A null
                                                          preferred scheduling term matches
                                                          no objects (i.e. is also a no-op).
                                                        properties:
                                                          preference:
                                                            description: A node selector
                                                              term, associated with the
                                                              corresponding weight.
                                                            properties:
                                                              matchExpressions:
                                                                description: A list of
                                                                  node selector requirements
                                                                  by node's labels.
                                                                items:
                                                                  description: A node
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: The
                                                                        label key that
                                                                        the selector applies
                                                                        to.
                                                                      type: string
                                                                    operator:
                                                                      description: Represents
                                                                        a key's relationship
                                                                        to a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists, DoesNotExist.
                                                                        Gt, and Lt.
                                                                      type: string
                                                                    values:
                                                                      description: An
                                                                        array of string
                                                                        values. If the
                                                                        operator is In
                                                                        or NotIn, the
                                                                        values array must
                                                                        be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        If the operator
                                                                        is Gt or Lt, the
                                                                        values array must
                                                                        have a single
                                                                        element, which
                                                                        will be interpreted
                                                                        as an integer.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchFields:
                                                                description: A list of
                                                                  node selector requirements
                                                                  by node's fields.
                                                                items:
                                                                  description: A node
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: The
                                                                        label key that
                                                                        the selector applies
                                                                        to.
                                                                      type: string
                                                                    operator:
                                                                      description: Represents
                                                                        a key's relationship
                                                                        to a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists, DoesNotExist.
                                                                        Gt, and Lt.
                                                                      type: string
                                                                    values:
                                                                      description: An
                                                                        array of string
                                                                        values. If the
                                                                        operator is In
                                                                        or NotIn, the
                                                                        values array must
                                                                        be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        If the operator
                                                                        is Gt or Lt, the
                                                                        values array must
                                                                        have a single
                                                                        element, which
                                                                        will be interpreted
                                                                        as an integer.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                            type: object
                                                          weight:
                                                            description: Weight associated
                                                              with matching the corresponding
                                                              nodeSelectorTerm, in the
                                                              range 1-100.
                                                            format: int32
                                                            type: integer
                                                        required:
                                                        - preference
                                                        - weight
                                                        type: object
                                                      type: array
                                                    requiredDuringSchedulingIgnoredDuringExecution:
                                                      description: If the affinity requirements
                                                        specified by this field are not
                                                        met at scheduling time, the pod
                                                        will not be scheduled onto the
                                                        node. If the affinity requirements
                                                        specified by this field cease
                                                        to be met at some point during
                                                        pod execution (e.g. due to an
                                                        update), the system may or may
                                                        not try to eventually evict the
                                                        pod from its node.
                                                      properties:
                                                        nodeSelectorTerms:
                                                          description: Required. A list
                                                            of node selector terms. The
                                                            terms are ORed.
                                                          items:
                                                            description: A null or empty
                                                              node selector term matches
                                                              no objects. The requirements
                                                              of them are ANDed. The TopologySelectorTerm
                                                              type implements a subset
                                                              of the NodeSelectorTerm.
                                                            properties:
                                                              matchExpressions:
                                                                description: A list of
                                                                  node selector requirements
                                                                  by node's labels.
                                                                items:
                                                                  description: A node
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: The
                                                                        label key that
                                                                        the selector applies
                                                                        to.
                                                                      type: string
                                                                    operator:
                                                                      description: Represents
                                                                        a key's relationship
                                                                        to a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists, DoesNotExist.
                                                                        Gt, and Lt.
                                                                      type: string
                                                                    values:
                                                                      description: An
                                                                        array of string
                                                                        values. If the
                                                                        operator is In
                                                                        or NotIn, the
                                                                        values array must
                                                                        be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        If the operator
                                                                        is Gt or Lt, the
                                                                        values array must
                                                                        have a single
                                                                        element, which
                                                                        will be interpreted
                                                                        as an integer.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchFields:
                                                                description: A list of
                                                                  node selector requirements
                                                                  by node's fields.
                                                                items:
                                                                  description: A node
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: The
                                                                        label key that
                                                                        the selector applies
                                                                        to.
                                                                      type: string
                                                                    operator:
                                                                      description: Represents
                                                                        a key's relationship
                                                                        to a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists, DoesNotExist.
                                                                        Gt, and Lt.
                                                                      type: string
                                                                    values:
                                                                      description: An
                                                                        array of string
                                                                        values. If the
                                                                        operator is In
                                                                        or NotIn, the
                                                                        values array must
                                                                        be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        If the operator
                                                                        is Gt or Lt, the
                                                                        values array must
                                                                        have a single
                                                                        element, which
                                                                        will be interpreted
                                                                        as an integer.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                            type: object
                                                          type: array
                                                      required:
                                                      - nodeSelectorTerms
                                                      type: object
                                                  type: object
                                                podAffinity:
                                                  description: Describes pod affinity
                                                    scheduling rules (e.g. co-locate this
                                                    pod in the same node, zone, etc. as
                                                    some other pod(s)).
                                                  properties:
                                                    preferredDuringSchedulingIgnoredDuringExecution:
                                                      description: The scheduler will
                                                        prefer to schedule pods to nodes
                                                        that satisfy the affinity expressions
                                                        specified by this field, but it
                                                        may choose a node that violates
                                                        one or more of the expressions.
                                                        The node that is most preferred
                                                        is the one with the greatest sum
                                                        of weights, i.e. for each node
                                                        that meets all of the scheduling
                                                        requirements (resource request,
                                                        requiredDuringScheduling affinity
                                                        expressions, etc.), compute a
                                                        sum by iterating through the elements
                                                        of this field and adding "weight"
                                                        to the sum if the node has pods
                                                        which matches the corresponding
                                                        podAffinityTerm; the node(s) with
                                                        the highest sum are the most preferred.
                                                      items:
                                                        description: The weights of all
                                                          of the matched WeightedPodAffinityTerm
                                                          fields are added per-node to
                                                          find the most preferred node(s)
                                                        properties:
                                                          podAffinityTerm:
                                                            description: Required. A pod
                                                              affinity term, associated
                                                              with the corresponding weight.
                                                            properties:
                                                              labelSelector:
                                                                description: A label query
                                                                  over a set of resources,
                                                                  in this case pods.
                                                                properties:
                                                                  matchExpressions:
                                                                    description: matchExpressions
                                                                      is a list of label
                                                                      selector requirements.
                                                                      The requirements
                                                                      are ANDed.
                                                                    items:
                                                                      description: A label
                                                                        selector requirement
                                                                        is a selector
                                                                        that contains
                                                                        values, a key,
                                                                        and an operator
                                                                        that relates the
                                                                        key and values.
                                                                      properties:
                                                                        key:
                                                                          description: key
                                                                            is the label
                                                                            key that the
                                                                            selector applies
                                                                            to.
                                                                          type: string
                                                                        operator:
                                                                          description: operator
                                                                            represents
                                                                            a key's relationship
                                                                            to a set of
                                                                            values. Valid
                                                                            operators
                                                                            are In, NotIn,
                                                                            Exists and
                                                                            DoesNotExist.
                                                                          type: string
                                                                        values:
                                                                          description: values
                                                                            is an array
                                                                            of string
                                                                            values. If
                                                                            the operator
                                                                            is In or NotIn,
                                                                            the values
                                                                            array must
                                                                            be non-empty.
                                                                            If the operator
                                                                            is Exists
                                                                            or DoesNotExist,
                                                                            the values
                                                                            array must
                                                                            be empty.
                                                                            This array
                                                                            is replaced
                                                                            during a strategic
                                                                            merge patch.
                                                                          items:
                                                                            type: string
                                                                          type: array
                                                                      required:
                                                                      - key
                                                                      - operator
                                                                      type: object
                                                                    type: array
                                                                  matchLabels:
                                                                    additionalProperties:
                                                                      type: string
                                                                    description: matchLabels
                                                                      is a map of {key,value}
                                                                      pairs. A single
                                                                      {key,value} in the
                                                                      matchLabels map
                                                                      is equivalent to
                                                                      an element of matchExpressions,
                                                                      whose key field
                                                                      is "key", the operator
                                                                      is "In", and the
                                                                      values array contains
                                                                      only "value". The
                                                                      requirements are
                                                                      ANDed.
                                                                    type: object
                                                                type: object
                                                              namespaceSelector:
                                                                description: A label query
                                                                  over the set of namespaces
                                                                  that the term applies
                                                                  to. The term is applied
                                                                  to the union of the
                                                                  namespaces selected
                                                                  by this field and the
                                                                  ones listed in the namespaces
                                                                  field. null selector
                                                                  and null or empty namespaces
                                                                  list means "this pod's
                                                                  namespace". An empty
                                                                  selector ({}) matches
                                                                  all namespaces. This
                                                                  field is alpha-level
                                                                  and is only honored
                                                                  when PodAffinityNamespaceSelector
                                                                  feature is enabled.
                                                                properties:
                                                                  matchExpressions:
                                                                    description: matchExpressions
                                                                      is a list of label
                                                                      selector requirements.
                                                                      The requirements
                                                                      are ANDed.
                                                                    items:
                                                                      description: A label
                                                                        selector requirement
                                                                        is a selector
                                                                        that contains
                                                                        values, a key,
                                                                        and an operator
                                                                        that relates the
                                                                        key and values.
                                                                      properties:
                                                                        key:
                                                                          description: key
                                                                            is the label
                                                                            key that the
                                                                            selector applies
                                                                            to.
                                                                          type: string
                                                                        operator:
                                                                          description: operator
                                                                            represents
                                                                            a key's relationship
                                                                            to a set of
                                                                            values. Valid
                                                                            operators
                                                                            are In, NotIn,
                                                                            Exists and
                                                                            DoesNotExist.
                                                                          type: string
                                                                        values:
                                                                          description: values
                                                                            is an array
                                                                            of string
                                                                            values. If
                                                                            the operator
                                                                            is In or NotIn,
                                                                            the values
                                                                            array must
                                                                            be non-empty.
                                                                            If the operator
                                                                            is Exists
                                                                            or DoesNotExist,
                                                                            the values
                                                                            array must
                                                                            be empty.
                                                                            This array
                                                                            is replaced
                                                                            during a strategic
                                                                            merge patch.
                                                                          items:
                                                                            type: string
                                                                          type: array
                                                                      required:
                                                                      - key
                                                                      - operator
                                                                      type: object
                                                                    type: array
                                                                  matchLabels:
                                                                    additionalProperties:
                                                                      type: string
                                                                    description: matchLabels
                                                                      is a map of {key,value}
                                                                      pairs. A single
                                                                      {key,value} in the
                                                                      matchLabels map
                                                                      is equivalent to
                                                                      an element of matchExpressions,
                                                                      whose key field
                                                                      is "key", the operator
                                                                      is "In", and the
                                                                      values array contains
                                                                      only "value". The
                                                                      requirements are
                                                                      ANDed.
                                                                    type: object
                                                                type: object
                                                              namespaces:
                                                                description: namespaces
                                                                  specifies a static list
                                                                  of namespace names that
                                                                  the term applies to.
                                                                  The term is applied
                                                                  to the union of the
                                                                  namespaces listed in
                                                                  this field and the ones
                                                                  selected by namespaceSelector.
                                                                  null or empty namespaces
                                                                  list and null namespaceSelector
                                                                  means "this pod's namespace"
                                                                items:
                                                                  type: string
                                                                type: array
                                                              topologyKey:
                                                                description: This pod
                                                                  should be co-located
                                                                  (affinity) or not co-located
                                                                  (anti-affinity) with
                                                                  the pods matching the
                                                                  labelSelector in the
                                                                  specified namespaces,
                                                                  where co-located is
                                                                  defined as running on
                                                                  a node whose value of
                                                                  the label with key topologyKey
                                                                  matches that of any
                                                                  node on which any of
                                                                  the selected pods is
                                                                  running. Empty topologyKey
                                                                  is not allowed.
                                                                type: string
                                                            required:
                                                            - topologyKey
                                                            type: object
                                                          weight:
                                                            description: weight associated
                                                              with matching the corresponding
                                                              podAffinityTerm, in the
                                                              range 1-100.
                                                            format: int32
                                                            type: integer
                                                        required:
                                                        - podAffinityTerm
                                                        - weight
                                                        type: object
                                                      type: array
                                                    requiredDuringSchedulingIgnoredDuringExecution:
                                                      description: If the affinity requirements
                                                        specified by this field are not
                                                        met at scheduling time, the pod
                                                        will not be scheduled onto the
                                                        node. If the affinity requirements
                                                        specified by this field cease
                                                        to be met at some point during
                                                        pod execution (e.g. due to a pod
                                                        label update), the system may
                                                        or may not try to eventually evict
                                                        the pod from its node. When there
                                                        are multiple elements, the lists
                                                        of nodes corresponding to each
                                                        podAffinityTerm are intersected,
                                                        i.e. all terms must be satisfied.
                                                      items:
                                                        description: Defines a set of
                                                          pods (namely those matching
                                                          the labelSelector relative to
                                                          the given namespace(s)) that
                                                          this pod should be co-located
                                                          (affinity) or not co-located
                                                          (anti-affinity) with, where
                                                          co-located is defined as running
                                                          on a node whose value of the
                                                          label with key <topologyKey>
                                                          matches that of any node on
                                                          which a pod of the set of pods
                                                          is running
                                                        properties:
                                                          labelSelector:
                                                            description: A label query
                                                              over a set of resources,
                                                              in this case pods.
                                                            properties:
                                                              matchExpressions:
                                                                description: matchExpressions
                                                                  is a list of label selector
                                                                  requirements. The requirements
                                                                  are ANDed.
                                                                items:
                                                                  description: A label
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: key
                                                                        is the label key
                                                                        that the selector
                                                                        applies to.
                                                                      type: string
                                                                    operator:
                                                                      description: operator
                                                                        represents a key's
                                                                        relationship to
                                                                        a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists and DoesNotExist.
                                                                      type: string
                                                                    values:
                                                                      description: values
                                                                        is an array of
                                                                        string values.
                                                                        If the operator
                                                                        is In or NotIn,
                                                                        the values array
                                                                        must be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchLabels:
                                                                additionalProperties:
                                                                  type: string
                                                                description: matchLabels
                                                                  is a map of {key,value}
                                                                  pairs. A single {key,value}
                                                                  in the matchLabels map
                                                                  is equivalent to an
                                                                  element of matchExpressions,
                                                                  whose key field is "key",
                                                                  the operator is "In",
                                                                  and the values array
                                                                  contains only "value".
                                                                  The requirements are
                                                                  ANDed.
                                                                type: object
                                                            type: object
                                                          namespaceSelector:
                                                            description: A label query
                                                              over the set of namespaces
                                                              that the term applies to.
                                                              The term is applied to the
                                                              union of the namespaces
                                                              selected by this field and
                                                              the ones listed in the namespaces
                                                              field. null selector and
                                                              null or empty namespaces
                                                              list means "this pod's namespace".
                                                              An empty selector ({}) matches
                                                              all namespaces. This field
                                                              is alpha-level and is only
                                                              honored when PodAffinityNamespaceSelector
                                                              feature is enabled.
                                                            properties:
                                                              matchExpressions:
                                                                description: matchExpressions
                                                                  is a list of label selector
                                                                  requirements. The requirements
                                                                  are ANDed.
                                                                items:
                                                                  description: A label
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: key
                                                                        is the label key
                                                                        that the selector
                                                                        applies to.
                                                                      type: string
                                                                    operator:
                                                                      description: operator
                                                                        represents a key's
                                                                        relationship to
                                                                        a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists and DoesNotExist.
                                                                      type: string
                                                                    values:
                                                                      description: values
                                                                        is an array of
                                                                        string values.
                                                                        If the operator
                                                                        is In or NotIn,
                                                                        the values array
                                                                        must be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchLabels:
                                                                additionalProperties:
                                                                  type: string
                                                                description: matchLabels
                                                                  is a map of {key,value}
                                                                  pairs. A single {key,value}
                                                                  in the matchLabels map
                                                                  is equivalent to an
                                                                  element of matchExpressions,
                                                                  whose key field is "key",
                                                                  the operator is "In",
                                                                  and the values array
                                                                  contains only "value".
                                                                  The requirements are
                                                                  ANDed.
                                                                type: object
                                                            type: object
                                                          namespaces:
                                                            description: namespaces specifies
                                                              a static list of namespace
                                                              names that the term applies
                                                              to. The term is applied
                                                              to the union of the namespaces
                                                              listed in this field and
                                                              the ones selected by namespaceSelector.
                                                              null or empty namespaces
                                                              list and null namespaceSelector
                                                              means "this pod's namespace"
                                                            items:
                                                              type: string
                                                            type: array
                                                          topologyKey:
                                                            description: This pod should
                                                              be co-located (affinity)
                                                              or not co-located (anti-affinity)
                                                              with the pods matching the
                                                              labelSelector in the specified
                                                              namespaces, where co-located
                                                              is defined as running on
                                                              a node whose value of the
                                                              label with key topologyKey
                                                              matches that of any node
                                                              on which any of the selected
                                                              pods is running. Empty topologyKey
                                                              is not allowed.
                                                            type: string
                                                        required:
                                                        - topologyKey
                                                        type: object
                                                      type: array
                                                  type: object
                                                podAntiAffinity:
                                                  description: Describes pod anti-affinity
                                                    scheduling rules (e.g. avoid putting
                                                    this pod in the same node, zone, etc.
                                                    as some other pod(s)).
                                                  properties:
                                                    preferredDuringSchedulingIgnoredDuringExecution:
                                                      description: The scheduler will
                                                        prefer to schedule pods to nodes
                                                        that satisfy the anti-affinity
                                                        expressions specified by this
                                                        field, but it may choose a node
                                                        that violates one or more of the
                                                        expressions. The node that is
                                                        most preferred is the one with
                                                        the greatest sum of weights, i.e.
                                                        for each node that meets all of
                                                        the scheduling requirements (resource
                                                        request, requiredDuringScheduling
                                                        anti-affinity expressions, etc.),
                                                        compute a sum by iterating through
                                                        the elements of this field and
                                                        adding "weight" to the sum if
                                                        the node has pods which matches
                                                        the corresponding podAffinityTerm;
                                                        the node(s) with the highest sum
                                                        are the most preferred.
                                                      items:
                                                        description: The weights of all
                                                          of the matched WeightedPodAffinityTerm
                                                          fields are added per-node to
                                                          find the most preferred node(s)
                                                        properties:
                                                          podAffinityTerm:
                                                            description: Required. A pod
                                                              affinity term, associated
                                                              with the corresponding weight.
                                                            properties:
                                                              labelSelector:
                                                                description: A label query
                                                                  over a set of resources,
                                                                  in this case pods.
                                                                properties:
                                                                  matchExpressions:
                                                                    description: matchExpressions
                                                                      is a list of label
                                                                      selector requirements.
                                                                      The requirements
                                                                      are ANDed.
                                                                    items:
                                                                      description: A label
                                                                        selector requirement
                                                                        is a selector
                                                                        that contains
                                                                        values, a key,
                                                                        and an operator
                                                                        that relates the
                                                                        key and values.
                                                                      properties:
                                                                        key:
                                                                          description: key
                                                                            is the label
                                                                            key that the
                                                                            selector applies
                                                                            to.
                                                                          type: string
                                                                        operator:
                                                                          description: operator
                                                                            represents
                                                                            a key's relationship
                                                                            to a set of
                                                                            values. Valid
                                                                            operators
                                                                            are In, NotIn,
                                                                            Exists and
                                                                            DoesNotExist.
                                                                          type: string
                                                                        values:
                                                                          description: values
                                                                            is an array
                                                                            of string
                                                                            values. If
                                                                            the operator
                                                                            is In or NotIn,
                                                                            the values
                                                                            array must
                                                                            be non-empty.
                                                                            If the operator
                                                                            is Exists
                                                                            or DoesNotExist,
                                                                            the values
                                                                            array must
                                                                            be empty.
                                                                            This array
                                                                            is replaced
                                                                            during a strategic
                                                                            merge patch.
                                                                          items:
                                                                            type: string
                                                                          type: array
                                                                      required:
                                                                      - key
                                                                      - operator
                                                                      type: object
                                                                    type: array
                                                                  matchLabels:
                                                                    additionalProperties:
                                                                      type: string
                                                                    description: matchLabels
                                                                      is a map of {key,value}
                                                                      pairs. A single
                                                                      {key,value} in the
                                                                      matchLabels map
                                                                      is equivalent to
                                                                      an element of matchExpressions,
                                                                      whose key field
                                                                      is "key", the operator
                                                                      is "In", and the
                                                                      values array contains
                                                                      only "value". The
                                                                      requirements are
                                                                      ANDed.
                                                                    type: object
                                                                type: object
                                                              namespaceSelector:
                                                                description: A label query
                                                                  over the set of namespaces
                                                                  that the term applies
                                                                  to. The term is applied
                                                                  to the union of the
                                                                  namespaces selected
                                                                  by this field and the
                                                                  ones listed in the namespaces
                                                                  field. null selector
                                                                  and null or empty namespaces
                                                                  list means "this pod's
                                                                  namespace". An empty
                                                                  selector ({}) matches
                                                                  all namespaces. This
                                                                  field is alpha-level
                                                                  and is only honored
                                                                  when PodAffinityNamespaceSelector
                                                                  feature is enabled.
                                                                properties:
                                                                  matchExpressions:
                                                                    description: matchExpressions
                                                                      is a list of label
                                                                      selector requirements.
                                                                      The requirements
                                                                      are ANDed.
                                                                    items:
                                                                      description: A label
                                                                        selector requirement
                                                                        is a selector
                                                                        that contains
                                                                        values, a key,
                                                                        and an operator
                                                                        that relates the
                                                                        key and values.
                                                                      properties:
                                                                        key:
                                                                          description: key
                                                                            is the label
                                                                            key that the
                                                                            selector applies
                                                                            to.
                                                                          type: string
                                                                        operator:
                                                                          description: operator
                                                                            represents
                                                                            a key's relationship
                                                                            to a set of
                                                                            values. Valid
                                                                            operators
                                                                            are In, NotIn,
                                                                            Exists and
                                                                            DoesNotExist.
                                                                          type: string
                                                                        values:
                                                                          description: values
                                                                            is an array
                                                                            of string
                                                                            values. If
                                                                            the operator
                                                                            is In or NotIn,
                                                                            the values
                                                                            array must
                                                                            be non-empty.
                                                                            If the operator
                                                                            is Exists
                                                                            or DoesNotExist,
                                                                            the values
                                                                            array must
                                                                            be empty.
                                                                            This array
                                                                            is replaced
                                                                            during a strategic
                                                                            merge patch.
                                                                          items:
                                                                            type: string
                                                                          type: array
                                                                      required:
                                                                      - key
                                                                      - operator
                                                                      type: object
                                                                    type: array
                                                                  matchLabels:
                                                                    additionalProperties:
                                                                      type: string
                                                                    description: matchLabels
                                                                      is a map of {key,value}
                                                                      pairs. A single
                                                                      {key,value} in the
                                                                      matchLabels map
                                                                      is equivalent to
                                                                      an element of matchExpressions,
                                                                      whose key field
                                                                      is "key", the operator
                                                                      is "In", and the
                                                                      values array contains
                                                                      only "value". The
                                                                      requirements are
                                                                      ANDed.
                                                                    type: object
                                                                type: object
                                                              namespaces:
                                                                description: namespaces
                                                                  specifies a static list
                                                                  of namespace names that
                                                                  the term applies to.
                                                                  The term is applied
                                                                  to the union of the
                                                                  namespaces listed in
                                                                  this field and the ones
                                                                  selected by namespaceSelector.
                                                                  null or empty namespaces
                                                                  list and null namespaceSelector
                                                                  means "this pod's namespace"
                                                                items:
                                                                  type: string
                                                                type: array
                                                              topologyKey:
                                                                description: This pod
                                                                  should be co-located
                                                                  (affinity) or not co-located
                                                                  (anti-affinity) with
                                                                  the pods matching the
                                                                  labelSelector in the
                                                                  specified namespaces,
                                                                  where co-located is
                                                                  defined as running on
                                                                  a node whose value of
                                                                  the label with key topologyKey
                                                                  matches that of any
                                                                  node on which any of
                                                                  the selected pods is
                                                                  running. Empty topologyKey
                                                                  is not allowed.
                                                                type: string
                                                            required:
                                                            - topologyKey
                                                            type: object
                                                          weight:
                                                            description: weight associated
                                                              with matching the corresponding
                                                              podAffinityTerm, in the
                                                              range 1-100.
                                                            format: int32
                                                            type: integer
                                                        required:
                                                        - podAffinityTerm
                                                        - weight
                                                        type: object
                                                      type: array
                                                    requiredDuringSchedulingIgnoredDuringExecution:
                                                      description: If the anti-affinity
                                                        requirements specified by this
                                                        field are not met at scheduling
                                                        time, the pod will not be scheduled
                                                        onto the node. If the anti-affinity
                                                        requirements specified by this
                                                        field cease to be met at some
                                                        point during pod execution (e.g.
                                                        due to a pod label update), the
                                                        system may or may not try to eventually
                                                        evict the pod from its node. When
                                                        there are multiple elements, the
                                                        lists of nodes corresponding to
                                                        each podAffinityTerm are intersected,
                                                        i.e. all terms must be satisfied.
                                                      items:
                                                        description: Defines a set of
                                                          pods (namely those matching
                                                          the labelSelector relative to
                                                          the given namespace(s)) that
                                                          this pod should be co-located
                                                          (affinity) or not co-located
                                                          (anti-affinity) with, where
                                                          co-located is defined as running
                                                          on a node whose value of the
                                                          label with key <topologyKey>
                                                          matches that of any node on
                                                          which a pod of the set of pods
                                                          is running
                                                        properties:
                                                          labelSelector:
                                                            description: A label query
                                                              over a set of resources,
                                                              in this case pods.
                                                            properties:
                                                              matchExpressions:
                                                                description: matchExpressions
                                                                  is a list of label selector
                                                                  requirements. The requirements
                                                                  are ANDed.
                                                                items:
                                                                  description: A label
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: key
                                                                        is the label key
                                                                        that the selector
                                                                        applies to.
                                                                      type: string
                                                                    operator:
                                                                      description: operator
                                                                        represents a key's
                                                                        relationship to
                                                                        a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists and DoesNotExist.
                                                                      type: string
                                                                    values:
                                                                      description: values
                                                                        is an array of
                                                                        string values.
                                                                        If the operator
                                                                        is In or NotIn,
                                                                        the values array
                                                                        must be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchLabels:
                                                                additionalProperties:
                                                                  type: string
                                                                description: matchLabels
                                                                  is a map of {key,value}
                                                                  pairs. A single {key,value}
                                                                  in the matchLabels map
                                                                  is equivalent to an
                                                                  element of matchExpressions,
                                                                  whose key field is "key",
                                                                  the operator is "In",
                                                                  and the values array
                                                                  contains only "value".
                                                                  The requirements are
                                                                  ANDed.
                                                                type: object
                                                            type: object
                                                          namespaceSelector:
                                                            description: A label query
                                                              over the set of namespaces
                                                              that the term applies to.
                                                              The term is applied to the
                                                              union of the namespaces
                                                              selected by this field and
                                                              the ones listed in the namespaces
                                                              field. null selector and
                                                              null or empty namespaces
                                                              list means "this pod's namespace".
                                                              An empty selector ({}) matches
                                                              all namespaces. This field
                                                              is alpha-level and is only
                                                              honored when PodAffinityNamespaceSelector
                                                              feature is enabled.
                                                            properties:
                                                              matchExpressions:
                                                                description: matchExpressions
                                                                  is a list of label selector
                                                                  requirements. The requirements
                                                                  are ANDed.
                                                                items:
                                                                  description: A label
                                                                    selector requirement
                                                                    is a selector that
                                                                    contains values, a
                                                                    key, and an operator
                                                                    that relates the key
                                                                    and values.
                                                                  properties:
                                                                    key:
                                                                      description: key
                                                                        is the label key
                                                                        that the selector
                                                                        applies to.
                                                                      type: string
                                                                    operator:
                                                                      description: operator
                                                                        represents a key's
                                                                        relationship to
                                                                        a set of values.
                                                                        Valid operators
                                                                        are In, NotIn,
                                                                        Exists and DoesNotExist.
                                                                      type: string
                                                                    values:
                                                                      description: values
                                                                        is an array of
                                                                        string values.
                                                                        If the operator
                                                                        is In or NotIn,
                                                                        the values array
                                                                        must be non-empty.
                                                                        If the operator
                                                                        is Exists or DoesNotExist,
                                                                        the values array
                                                                        must be empty.
                                                                        This array is
                                                                        replaced during
                                                                        a strategic merge
                                                                        patch.
                                                                      items:
                                                                        type: string
                                                                      type: array
                                                                  required:
                                                                  - key
                                                                  - operator
                                                                  type: object
                                                                type: array
                                                              matchLabels:
                                                                additionalProperties:
                                                                  type: string
                                                                description: matchLabels
                                                                  is a map of {key,value}
                                                                  pairs. A single {key,value}
                                                                  in the matchLabels map
                                                                  is equivalent to an
                                                                  element of matchExpressions,
                                                                  whose key field is "key",
                                                                  the operator is "In",
                                                                  and the values array
                                                                  contains only "value".
                                                                  The requirements are
                                                                  ANDed.
                                                                type: object
                                                            type: object
                                                          namespaces:
                                                            description: namespaces specifies
                                                              a static list of namespace
                                                              names that the term applies
                                                              to. The term is applied
                                                              to the union of the namespaces
                                                              listed in this field and
                                                              the ones selected by namespaceSelector.
                                                              null or empty namespaces
                                                              list and null namespaceSelector
                                                              means "this pod's namespace"
                                                            items:
                                                              type: string
                                                            type: array
                                                          topologyKey:
                                                            description: This pod should
                                                              be co-located (affinity)
                                                              or not co-located (anti-affinity)
                                                              with the pods matching the
                                                              labelSelector in the specified
                                                              namespaces, where co-located
                                                              is defined as running on
                                                              a node whose value of the
                                                              label with key topologyKey
                                                              matches that of any node
                                                              on which any of the selected
                                                              pods is running. Empty topologyKey
                                                              is not allowed.
                                                            type: string
                                                        required:
                                                        - topologyKey
                                                        type: object
                                                      type: array
                                                  type: object
                                              type: object
                                            nodeSelector:
                                              additionalProperties:
                                                type: string
                                              description: 'NodeSelector is a selector
                                                which must be true for the pod to fit
                                                on a node. Selector which must match a
                                                node''s labels for the pod to be scheduled
                                                on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
                                              type: object
                                            priorityClassName:
                                              description: If specified, the pod's priorityClassName.
                                              type: string
                                            serviceAccountName:
                                              description: If specified, the pod's service
                                                account
                                              type: string
                                            tolerations:
                                              description: If specified, the pod's tolerations.
                                              items:
                                                description: The pod this Toleration is
                                                  attached to tolerates any taint that
                                                  matches the triple <key,value,effect>
                                                  using the matching operator <operator>.
                                                properties:
                                                  effect:
                                                    description: Effect indicates the
                                                      taint effect to match. Empty means
                                                      match all taint effects. When specified,
                                                      allowed values are NoSchedule, PreferNoSchedule
                                                      and NoExecute.
                                                    type: string
                                                  key:
                                                    description: Key is the taint key
                                                      that the toleration applies to.
                                                      Empty means match all taint keys.
                                                      If the key is empty, operator must
                                                      be Exists; this combination means
                                                      to match all values and all keys.
                                                    type: string
                                                  operator:
                                                    description: Operator represents a
                                                      key's relationship to the value.
                                                      Valid operators are Exists and Equal.
                                                      Defaults to Equal. Exists is equivalent
                                                      to wildcard for value, so that a
                                                      pod can tolerate all taints of a
                                                      particular category.
                                                    type: string
                                                  tolerationSeconds:
                                                    description: TolerationSeconds represents
                                                      the period of time the toleration
                                                      (which must be of effect NoExecute,
                                                      otherwise this field is ignored)
                                                      tolerates the taint. By default,
                                                      it is not set, which means tolerate
                                                      the taint forever (do not evict).
                                                      Zero and negative values will be
                                                      treated as 0 (evict immediately)
                                                      by the system.
                                                    format: int64
                                                    type: integer
                                                  value:
                                                    description: Value is the taint value
                                                      the toleration matches to. If the
                                                      operator is Exists, the value should
                                                      be empty, otherwise just a regular
                                                      string.
                                                    type: string
                                                type: object
                                              type: array
                                          type: object
                                      type: object
                                    serviceType:
                                      description: Optional service type for Kubernetes
                                        solver service. Supported values are NodePort
                                        or ClusterIP. If unset, defaults to NodePort.
                                      type: string
                                  type: object
                              type: object
                            selector:
                              description: Selector selects a set of DNSNames on the Certificate
                                resource that should be solved using this challenge solver.
                                If not specified, the solver will be treated as the 'default'
                                solver with the lowest priority, i.e. if any other solver
                                has a more specific match, it will be used instead.
                              properties:
                                dnsNames:
                                  description: List of DNSNames that this solver will
                                    be used to solve. If specified and a match is found,
                                    a dnsNames selector will take precedence over a dnsZones
                                    selector. If multiple solvers match with the same
                                    dnsNames value, the solver with the most matching
                                    labels in matchLabels will be selected. If neither
                                    has more matches, the solver defined earlier in the
                                    list will be selected.
                                  items:
                                    type: string
                                  type: array
                                dnsZones:
                                  description: List of DNSZones that this solver will
                                    be used to solve. The most specific DNS zone match
                                    specified here will take precedence over other DNS
                                    zone matches, so a solver specifying sys.example.com
                                    will be selected over one specifying example.com for
                                    the domain www.sys.example.com. If multiple solvers
                                    match with the same dnsZones value, the solver with
                                    the most matching labels in matchLabels will be selected.
                                    If neither has more matches, the solver defined earlier
                                    in the list will be selected.
                                  items:
                                    type: string
                                  type: array
                                matchLabels:
                                  additionalProperties:
                                    type: string
                                  description: A label selector that is used to refine
                                    the set of certificate's that this challenge solver
                                    will apply to.
                                  type: object
                              type: object
                          type: object
                        type: array
                    required:
                    - privateKeySecretRef
                    - server
                    type: object
                  ca:
                    description: CA configures this issuer to sign certificates using
                      a signing CA keypair stored in a Secret resource. This is used to
                      build internal PKIs that are managed by cert-manager.
                    properties:
                      crlDistributionPoints:
                        description: The CRL distribution points is an X.509 v3 certificate
                          extension which identifies the location of the CRL from which
                          the revocation of this certificate can be checked. If not set,
                          certificates will be issued without distribution points set.
                        items:
                          type: string
                        type: array
                      ocspServers:
                        description: The OCSP server list is an X.509 v3 extension that
                          defines a list of URLs of OCSP responders. The OCSP responders
                          can be queried for the revocation status of an issued certificate.
                          If not set, the certificate will be issued with no OCSP servers
                          set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
                        items:
                          type: string
                        type: array
                      secretName:
                        description: SecretName is the name of the secret used to sign
                          Certificates issued by this Issuer.
                        type: string
                    required:
                    - secretName
                    type: object
                  selfSigned:
                    description: SelfSigned configures this issuer to 'self sign' certificates
                      using the private key used to create the CertificateRequest object.
                    properties:
                      crlDistributionPoints:
                        description: The CRL distribution points is an X.509 v3 certificate
                          extension which identifies the location of the CRL from which
                          the revocation of this certificate can be checked. If not set
                          certificate will be issued without CDP. Values are strings.
                        items:
                          type: string
                        type: array
                    type: object
                  vault:
                    description: Vault configures this issuer to sign certificates using
                      a HashiCorp Vault PKI backend.
                    properties:
                      auth:
                        description: Auth configures how cert-manager authenticates with
                          the Vault server.
                        properties:
                          appRole:
                            description: AppRole authenticates with Vault using the App
                              Role auth mechanism, with the role and secret stored in
                              a Kubernetes Secret resource.
                            properties:
                              path:
                                description: 'Path where the App Role authentication backend
                                  is mounted in Vault, e.g: "approle"'
                                type: string
                              roleId:
                                description: RoleID configured in the App Role authentication
                                  backend when setting up the authentication backend in
                                  Vault.
                                type: string
                              secretRef:
                                description: Reference to a key in a Secret that contains
                                  the App Role secret used to authenticate with Vault.
                                  The `key` field must be specified and denotes which
                                  entry within the Secret resource is used as the app
                                  role secret.
                                properties:
                                  key:
                                    description: The key of the entry in the Secret resource's
                                      `data` field to be used. Some instances of this
                                      field may be defaulted, in others it may be required.
                                    type: string
                                  name:
                                    description: 'Name of the resource being referred
                                      to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                    type: string
                                required:
                                - name
                                type: object
                            required:
                            - path
                            - roleId
                            - secretRef
                            type: object
                          kubernetes:
                            description: Kubernetes authenticates with Vault by passing
                              the ServiceAccount token stored in the named Secret resource
                              to the Vault server.
                            properties:
                              mountPath:
                                description: The Vault mountPath here is the mount path
                                  to use when authenticating with Vault. For example,
                                  setting a value to `/v1/auth/foo`, will use the path
                                  `/v1/auth/foo/login` to authenticate with Vault. If
                                  unspecified, the default value "/v1/auth/kubernetes"
                                  will be used.
                                type: string
                              role:
                                description: A required field containing the Vault Role
                                  to assume. A Role binds a Kubernetes ServiceAccount
                                  with a set of Vault policies.
                                type: string
                              secretRef:
                                description: The required Secret field containing a Kubernetes
                                  ServiceAccount JWT used for authenticating with Vault.
                                  Use of 'ambient credentials' is not supported.
                                properties:
                                  key:
                                    description: The key of the entry in the Secret resource's
                                      `data` field to be used. Some instances of this
                                      field may be defaulted, in others it may be required.
                                    type: string
                                  name:
                                    description: 'Name of the resource being referred
                                      to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                    type: string
                                required:
                                - name
                                type: object
                            required:
                            - role
                            - secretRef
                            type: object
                          tokenSecretRef:
                            description: TokenSecretRef authenticates with Vault by presenting
                              a token.
                            properties:
                              key:
                                description: The key of the entry in the Secret resource's
                                  `data` field to be used. Some instances of this field
                                  may be defaulted, in others it may be required.
                                type: string
                              name:
                                description: 'Name of the resource being referred to.
                                  More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                            required:
                            - name
                            type: object
                        type: object
                      caBundle:
                        description: PEM-encoded CA bundle (base64-encoded) used to validate
                          Vault server certificate. Only used if the Server URL is using
                          HTTPS protocol. This parameter is ignored for plain HTTP protocol
                          connection. If not set the system root certificates are used
                          to validate the TLS connection.
                        format: byte
                        type: string
                      namespace:
                        description: 'Name of the vault namespace. Namespaces is a set
                          of features within Vault Enterprise that allows Vault environments
                          to support Secure Multi-tenancy. e.g: "ns1" More about namespaces
                          can be found here https://www.vaultproject.io/docs/enterprise/namespaces'
                        type: string
                      path:
                        description: 'Path is the mount path of the Vault PKI backend''s
                          `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".'
                        type: string
                      server:
                        description: 'Server is the connection address for the Vault server,
                          e.g: "https://vault.example.com:8200".'
                        type: string
                    required:
                    - auth
                    - path
                    - server
                    type: object
                  venafi:
                    description: Venafi configures this issuer to sign certificates using
                      a Venafi TPP or Venafi Cloud policy zone.
                    properties:
                      cloud:
                        description: Cloud specifies the Venafi cloud configuration settings.
                          Only one of TPP or Cloud may be specified.
                        properties:
                          apiTokenSecretRef:
                            description: APITokenSecretRef is a secret key selector for
                              the Venafi Cloud API token.
                            properties:
                              key:
                                description: The key of the entry in the Secret resource's
                                  `data` field to be used. Some instances of this field
                                  may be defaulted, in others it may be required.
                                type: string
                              name:
                                description: 'Name of the resource being referred to.
                                  More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                            required:
                            - name
                            type: object
                          url:
                            description: URL is the base URL for Venafi Cloud. Defaults
                              to "https://api.venafi.cloud/v1".
                            type: string
                        required:
                        - apiTokenSecretRef
                        type: object
                      tpp:
                        description: TPP specifies Trust Protection Platform configuration
                          settings. Only one of TPP or Cloud may be specified.
                        properties:
                          caBundle:
                            description: CABundle is a PEM encoded TLS certificate to
                              use to verify connections to the TPP instance. If specified,
                              system roots will not be used and the issuing CA for the
                              TPP instance must be verifiable using the provided root.
                              If not specified, the connection will be verified using
                              the cert-manager system root certificates.
                            format: byte
                            type: string
                          credentialsRef:
                            description: CredentialsRef is a reference to a Secret containing
                              the username and password for the TPP server. The secret
                              must contain two keys, 'username' and 'password'.
                            properties:
                              name:
                                description: 'Name of the resource being referred to.
                                  More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                type: string
                            required:
                            - name
                            type: object
                          url:
                            description: 'URL is the base URL for the vedsdk endpoint
                              of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".'
                            type: string
                        required:
                        - credentialsRef
                        - url
                        type: object
                      zone:
                        description: Zone is the Venafi Policy Zone to use for this issuer.
                          All requests made to the Venafi platform will be restricted
                          by the named zone policy. This field is required.
                        type: string
                    required:
                    - zone
                    type: object
                type: object
              status:
                description: Status of the ClusterIssuer. This is set and managed automatically.
                properties:
                  acme:
                    description: ACME specific status options. This field should only
                      be set if the Issuer is configured to use an ACME server to issue
                      certificates.
                    properties:
                      lastRegisteredEmail:
                        description: LastRegisteredEmail is the email associated with
                          the latest registered ACME account, in order to track changes
                          made to registered account associated with the  Issuer
                        type: string
                      uri:
                        description: URI is the unique account identifier, which can also
                          be used to retrieve account details from the CA
                        type: string
                    type: object
                  conditions:
                    description: List of status conditions to indicate the status of a
                      CertificateRequest. Known condition types are `Ready`.
                    items:
                      description: IssuerCondition contains condition information for
                        an Issuer.
                      properties:
                        lastTransitionTime:
                          description: LastTransitionTime is the timestamp corresponding
                            to the last status change of this condition.
                          format: date-time
                          type: string
                        message:
                          description: Message is a human readable description of the
                            details of the last transition, complementing reason.
                          type: string
                        observedGeneration:
                          description: If set, this represents the .metadata.generation
                            that the condition was set based upon. For instance, if .metadata.generation
                            is currently 12, but the .status.condition[x].observedGeneration
                            is 9, the condition is out of date with respect to the current
                            state of the Issuer.
                          format: int64
                          type: integer
                        reason:
                          description: Reason is a brief machine readable explanation
                            for the condition's last transition.
                          type: string
                        status:
                          description: Status of the condition, one of (`True`, `False`,
                            `Unknown`).
                          enum:
                          - "True"
                          - "False"
                          - Unknown
                          type: string
                        type:
                          description: Type of the condition, known values are (`Ready`).
                          type: string
                      required:
                      - status
                      - type
                      type: object
                    type: array
                type: object
            required:
            - spec
            type: object
        served: true
        storage: true
        subresources:
          status: {}
    status:
      acceptedNames:
        categories:
        - cert-manager
        kind: ClusterIssuer
        listKind: ClusterIssuerList
        plural: clusterissuers
        singular: clusterissuer
      conditions:
      - lastTransitionTime: "2022-04-05T20:47:18Z"
        message: no conflicts found
        reason: NoConflicts
        status: "True"
        type: NamesAccepted
      - lastTransitionTime: "2022-04-05T20:47:19Z"
        message: the initial names have been accepted
        reason: InitialNamesAccepted
        status: "True"
        type: Established
      storedVersions:
      - v1
    ---
    apiVersion: cert-manager.io/v1
    kind: ClusterIssuer
    metadata:
    name: kommander-acme-issuer
    spec:
    acme:
      email: egoode@d2iq.com
      server: https://acme-v02.api.letsencrypt.org/directory
      privateKeySecretRef:
      name: letsencrypt-real
      solvers:
      - dns01:
        route53:
          hostedZoneID: Z1MK25233K9MVW
          region: us-west-2
          role: arn:aws:iam::222638339470:role/egoode-external-dns-role

kind: ConfigMap
metadata:
  name: cert-mgr-cluster-issuer-crd
  namespace: default

# ---
# apiVersion: v1
# data:
#   custom-resources.yaml: |
#     apiVersion: cert-manager.io/v1
#     kind: ClusterIssuer
#     metadata:
#     name: kommander-acme-issuer
#     spec:
#     acme:
#       email: egoode@d2iq.com
#       server: https://acme-v02.api.letsencrypt.org/directory
#       privateKeySecretRef:
#       name: letsencrypt-real
#       solvers:
#       - dns01:
#         route53:
#           hostedZoneID: Z1MK25233K9MVW
#           region: us-west-2
#           role: arn:aws:iam::222638339470:role/egoode-external-dns-role
# kind: ConfigMap
# metadata:
#   name: lets-encrypt-issuer
#   namespace: default